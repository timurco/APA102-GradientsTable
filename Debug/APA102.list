
APA102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007480  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08007590  08007590  00017590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d8  080078d8  00020720  2**0
                  CONTENTS
  4 .ARM          00000000  080078d8  080078d8  00020720  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078d8  080078d8  00020720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000720  20000000  080078e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000720  08008000  00020720  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  08008000  00020a88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020720  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6a3  00000000  00000000  00020749  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002079  00000000  00000000  0002ddec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00030b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f33  00000000  00000000  00031700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a87e  00000000  00000000  0004a633  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b641  00000000  00000000  00054eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e04f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  000e0570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000720 	.word	0x20000720
 800012c:	00000000 	.word	0x00000000
 8000130:	08007578 	.word	0x08007578

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000724 	.word	0x20000724
 800014c:	08007578 	.word	0x08007578

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <DigiLed_init>:

/**
 *  @brief Initialize digital led class
 */
void DigiLed_init(SPI_HandleTypeDef *hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	_frameModified = TRUE; 		// Initial set to true to force update after initialization of frame buffer
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <DigiLed_init+0x78>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]

	_spiHandler = hspi;			// SPI handler is given to library
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <DigiLed_init+0x7c>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6013      	str	r3, [r2, #0]

	// TODO Auto-generated constructor stub

	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	e023      	b.n	80011fe <DigiLed_init+0x62>
	{
		_digitalLedframe[led].FieldsIn.INIT = 0x07; // Set MSB first 3 bits to identify start of LED packet
 80011b6:	4a19      	ldr	r2, [pc, #100]	; (800121c <DigiLed_init+0x80>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	78da      	ldrb	r2, [r3, #3]
 80011c0:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80011c4:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.GLOBAL = 0x00; // Switch off LED global
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <DigiLed_init+0x80>)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	78da      	ldrb	r2, [r3, #3]
 80011d0:	f36f 0204 	bfc	r2, #0, #5
 80011d4:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.BLUE = 0x00;
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <DigiLed_init+0x80>)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	709a      	strb	r2, [r3, #2]
		_digitalLedframe[led].FieldsIn.GREEN = 0x00;
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <DigiLed_init+0x80>)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
		_digitalLedframe[led].FieldsIn.RED = 0x00;
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <DigiLed_init+0x80>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2100      	movs	r1, #0
 80011f4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b2f      	cmp	r3, #47	; 0x2f
 8001202:	ddd8      	ble.n	80011b6 <DigiLed_init+0x1a>
	}
	DigiLed_update(FALSE); // Update frame buffer using the value of _frameModified as set in initialiser.
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f887 	bl	8001318 <DigiLed_update>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000091c 	.word	0x2000091c
 8001218:	20000850 	.word	0x20000850
 800121c:	20000920 	.word	0x20000920

08001220 <DigiLed_setRGB>:
 * Colors can be set using defines from "APA102_colors.h"
 * @param led position of the led in the string
 * @param rgb color of led in RGB color scheme
 */
void DigiLed_setRGB(uint8_t led, uint32_t rgb)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
	_digitalLedframe[led].FieldsIn.INIT = 0x7;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <DigiLed_setRGB+0x6c>)
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	78da      	ldrb	r2, [r3, #3]
 8001236:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800123a:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.GLOBAL = 0x1F;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <DigiLed_setRGB+0x6c>)
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	78da      	ldrb	r2, [r3, #3]
 8001246:	f042 021f 	orr.w	r2, r2, #31
 800124a:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.BLUE = (uint8_t)(rgb);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	b2d1      	uxtb	r1, r2
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <DigiLed_setRGB+0x6c>)
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	460a      	mov	r2, r1
 800125a:	709a      	strb	r2, [r3, #2]
	_digitalLedframe[led].FieldsIn.GREEN = (uint8_t)(rgb >> 8);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	0a1a      	lsrs	r2, r3, #8
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	b2d1      	uxtb	r1, r2
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <DigiLed_setRGB+0x6c>)
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	460a      	mov	r2, r1
 800126c:	705a      	strb	r2, [r3, #1]
	_digitalLedframe[led].FieldsIn.RED = (uint8_t)(rgb >> 16);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	0c1a      	lsrs	r2, r3, #16
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	b2d1      	uxtb	r1, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <DigiLed_setRGB+0x6c>)
 8001278:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	_frameModified = TRUE;
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <DigiLed_setRGB+0x70>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000920 	.word	0x20000920
 8001290:	2000091c 	.word	0x2000091c

08001294 <DigiLed_setAllRGB>:
 * expressed as hex values from 0 to 255 (0 - FF).
 * Colors can be set using defines from "APA102_colors.h"
 * @param rgb color of led in RGB color scheme
 */
void DigiLed_setAllRGB(uint32_t rgb)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e008      	b.n	80012b4 <DigiLed_setAllRGB+0x20>
	{
		DigiLed_setRGB(led, rgb);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffb9 	bl	8001220 <DigiLed_setRGB>
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b2f      	cmp	r3, #47	; 0x2f
 80012b8:	ddf3      	ble.n	80012a2 <DigiLed_setAllRGB+0xe>
	}
	_frameModified = TRUE;
 80012ba:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <DigiLed_setAllRGB+0x34>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000091c 	.word	0x2000091c

080012cc <DigiLed_setAllIllumination>:
 * Illumination is a value from 0 to 31. 0 means no light, and 31 maximum illumination.
 * setting illumination can interfere with individual RGB settings
 * @param intensity of illumination
 */
void DigiLed_setAllIllumination(uint8_t illumination)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e00e      	b.n	80012fa <DigiLed_setAllIllumination+0x2e>
	{
		_digitalLedframe[led].FieldsIn.GLOBAL = illumination;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	b2d9      	uxtb	r1, r3
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <DigiLed_setAllIllumination+0x44>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	78da      	ldrb	r2, [r3, #3]
 80012ee:	f361 0204 	bfi	r2, r1, #0, #5
 80012f2:	70da      	strb	r2, [r3, #3]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b2f      	cmp	r3, #47	; 0x2f
 80012fe:	dded      	ble.n	80012dc <DigiLed_setAllIllumination+0x10>
	}
	_frameModified = TRUE;
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <DigiLed_setAllIllumination+0x48>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000920 	.word	0x20000920
 8001314:	2000091c 	.word	0x2000091c

08001318 <DigiLed_update>:
/**
 * @brief update led string
 * @param set true to force update leds and false to update only when frame is modified
 */
void DigiLed_update(uint8_t forceUpdate)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	if(_frameModified | forceUpdate)
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <DigiLed_update+0xd0>)
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4313      	orrs	r3, r2
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d053      	beq.n	80013d8 <DigiLed_update+0xc0>
	{
		// add start of frame (0x00000000)
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e007      	b.n	8001346 <DigiLed_update+0x2e>
		{
			SpiSendFrame[i] = 0x00;
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <DigiLed_update+0xd4>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b03      	cmp	r3, #3
 800134a:	ddf4      	ble.n	8001336 <DigiLed_update+0x1e>
		}

		// add all LED packets of the frame
		uint32_t SpiDataPacket = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e028      	b.n	80013a8 <DigiLed_update+0x90>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 0] = _digitalLedframe[led].FieldsOut.CMD;		// Add INIT and GLOBAL to SPI send frame
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1d1a      	adds	r2, r3, #4
 800135a:	4925      	ldr	r1, [pc, #148]	; (80013f0 <DigiLed_update+0xd8>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	78d9      	ldrb	r1, [r3, #3]
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <DigiLed_update+0xd4>)
 8001366:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 1] = _digitalLedframe[led].FieldsOut.BLUE; 	// Add BLUE to SPI send frame
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1d5a      	adds	r2, r3, #5
 800136c:	4920      	ldr	r1, [pc, #128]	; (80013f0 <DigiLed_update+0xd8>)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	7899      	ldrb	r1, [r3, #2]
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <DigiLed_update+0xd4>)
 8001378:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 2] = _digitalLedframe[led].FieldsOut.GREEN;	// Add GREEN to SPI send frame
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1d9a      	adds	r2, r3, #6
 800137e:	491c      	ldr	r1, [pc, #112]	; (80013f0 <DigiLed_update+0xd8>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	7859      	ldrb	r1, [r3, #1]
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <DigiLed_update+0xd4>)
 800138a:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 3] = _digitalLedframe[led].FieldsOut.RED;		// Add RED to SPI send frame
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3307      	adds	r3, #7
 8001390:	4917      	ldr	r1, [pc, #92]	; (80013f0 <DigiLed_update+0xd8>)
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	f811 1022 	ldrb.w	r1, [r1, r2, lsl #2]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <DigiLed_update+0xd4>)
 800139a:	54d1      	strb	r1, [r2, r3]

			SpiDataPacket = SpiDataPacket + 4;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	3304      	adds	r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b2f      	cmp	r3, #47	; 0x2f
 80013ac:	d9d3      	bls.n	8001356 <DigiLed_update+0x3e>
		}

		// add end of frame (0xffffffff)
		for(int i = 0; i < 4; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	e007      	b.n	80013c4 <DigiLed_update+0xac>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + 4*LED_FRAME_SIZE + i] = 0xFF;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	33c4      	adds	r3, #196	; 0xc4
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <DigiLed_update+0xd4>)
 80013ba:	21ff      	movs	r1, #255	; 0xff
 80013bc:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < 4; i++)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	ddf4      	ble.n	80013b4 <DigiLed_update+0x9c>
		}

		// send spi frame with all led values
		HAL_SPI_Transmit(_spiHandler, SpiSendFrame, sizeof(SpiSendFrame), 10);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <DigiLed_update+0xdc>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	230a      	movs	r3, #10
 80013d0:	22c8      	movs	r2, #200	; 0xc8
 80013d2:	4906      	ldr	r1, [pc, #24]	; (80013ec <DigiLed_update+0xd4>)
 80013d4:	f002 f8f8 	bl	80035c8 <HAL_SPI_Transmit>
	}

	_frameModified = FALSE; // reset frame modified identifier.
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <DigiLed_update+0xd0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000091c 	.word	0x2000091c
 80013ec:	20000854 	.word	0x20000854
 80013f0:	20000920 	.word	0x20000920
 80013f4:	20000850 	.word	0x20000850

080013f8 <gammaInit>:
 *  Created on: Dec 28, 2020
 *      Author: timurko
 */
#include "colors.h"

void gammaInit(float gamma) {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	// precalculate the gamma lookup table
	for (int i = 0; i < 256; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e029      	b.n	800145a <gammaInit+0x62>
		gammaTable[i] = 255 * pow((i / 256.0), gamma);
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7fe fffc 	bl	8000404 <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <gammaInit+0x78>)
 8001412:	f7ff f98b 	bl	800072c <__aeabi_ddiv>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	4625      	mov	r5, r4
 800141c:	461c      	mov	r4, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff f802 	bl	8000428 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f005 f87a 	bl	8006524 <pow>
 8001430:	a30d      	add	r3, pc, #52	; (adr r3, 8001468 <gammaInit+0x70>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f84f 	bl	80004d8 <__aeabi_dmul>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff fb21 	bl	8000a88 <__aeabi_d2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	b2d9      	uxtb	r1, r3
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <gammaInit+0x7c>)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	460a      	mov	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2bff      	cmp	r3, #255	; 0xff
 800145e:	ddd2      	ble.n	8001406 <gammaInit+0xe>
		//(uint8_t)(((float)n/LED_FRAME_SIZE)*255);
	};
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	00000000 	.word	0x00000000
 800146c:	406fe000 	.word	0x406fe000
 8001470:	40700000 	.word	0x40700000
 8001474:	2000073c 	.word	0x2000073c

08001478 <gradientTransition>:

uint32_t gradientTransition(
		uint8_t (*gradient_a)[16][4],
		uint8_t (*gradient_b)[16][4],
		uint8_t pos,
		float transition) {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	71fb      	strb	r3, [r7, #7]
	struct RGB a, b;
	uint8_t i;
	float f;

	// First gradient interation
	for (i=0; i<15; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800148e:	e0be      	b.n	800160e <gradientTransition+0x196>
		uint8_t from = (*gradient_a)[i][0];
 8001490:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800149a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t to = (*gradient_a)[i+1][0];
 800149e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80014aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (pos>=from && pos<to) {
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f0c0 80a5 	bcc.w	8001604 <gradientTransition+0x18c>
 80014ba:	79fa      	ldrb	r2, [r7, #7]
 80014bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f080 809f 	bcs.w	8001604 <gradientTransition+0x18c>
			f = (float)(pos-from)/(to-from);
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc04 	bl	8000cdc <__aeabi_i2f>
 80014d4:	4604      	mov	r4, r0
 80014d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbfb 	bl	8000cdc <__aeabi_i2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fcfe 	bl	8000eec <__aeabi_fdiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	623b      	str	r3, [r7, #32]
			a.r = (uint8_t)lerp((*gradient_a)[i][1], (*gradient_a)[i+1][1], f);
 80014f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	785b      	ldrb	r3, [r3, #1]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fbeb 	bl	8000cdc <__aeabi_i2f>
 8001506:	4604      	mov	r4, r0
 8001508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150c:	3301      	adds	r3, #1
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	4619      	mov	r1, r3
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	1acb      	subs	r3, r1, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fbd8 	bl	8000cdc <__aeabi_i2f>
 800152c:	4603      	mov	r3, r0
 800152e:	6a39      	ldr	r1, [r7, #32]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc27 	bl	8000d84 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fb1a 	bl	8000b74 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe0a 	bl	800115c <__aeabi_f2uiz>
 8001548:	4603      	mov	r3, r0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	763b      	strb	r3, [r7, #24]
			a.g = (uint8_t)lerp((*gradient_a)[i][2], (*gradient_a)[i+1][2], f);
 800154e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	789b      	ldrb	r3, [r3, #2]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fbbe 	bl	8000cdc <__aeabi_i2f>
 8001560:	4604      	mov	r4, r0
 8001562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001566:	3301      	adds	r3, #1
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	4619      	mov	r1, r3
 8001572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	1acb      	subs	r3, r1, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fbab 	bl	8000cdc <__aeabi_i2f>
 8001586:	4603      	mov	r3, r0
 8001588:	6a39      	ldr	r1, [r7, #32]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fbfa 	bl	8000d84 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff faed 	bl	8000b74 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fddd 	bl	800115c <__aeabi_f2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	767b      	strb	r3, [r7, #25]
			a.b = (uint8_t)lerp((*gradient_a)[i][3], (*gradient_a)[i+1][3], f);
 80015a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fb91 	bl	8000cdc <__aeabi_i2f>
 80015ba:	4604      	mov	r4, r0
 80015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015c0:	3301      	adds	r3, #1
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	4619      	mov	r1, r3
 80015cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	78db      	ldrb	r3, [r3, #3]
 80015d8:	1acb      	subs	r3, r1, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb7e 	bl	8000cdc <__aeabi_i2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	6a39      	ldr	r1, [r7, #32]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fbcd 	bl	8000d84 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff fac0 	bl	8000b74 <__addsf3>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdb0 	bl	800115c <__aeabi_f2uiz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	76bb      	strb	r3, [r7, #26]
			break;
 8001602:	e009      	b.n	8001618 <gradientTransition+0x1a0>
	for (i=0; i<15; i++) {
 8001604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001608:	3301      	adds	r3, #1
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800160e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001612:	2b0e      	cmp	r3, #14
 8001614:	f67f af3c 	bls.w	8001490 <gradientTransition+0x18>
		}
	}

	// Second gradient interation
	for (i=0; i<15; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800161e:	e0b7      	b.n	8001790 <gradientTransition+0x318>
		uint8_t from = (*gradient_b)[i][0];
 8001620:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800162a:	77fb      	strb	r3, [r7, #31]
		uint8_t to = (*gradient_b)[i+1][0];
 800162c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001638:	77bb      	strb	r3, [r7, #30]
		if (pos>=from && pos<to) {
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	429a      	cmp	r2, r3
 8001640:	f0c0 80a1 	bcc.w	8001786 <gradientTransition+0x30e>
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	7fbb      	ldrb	r3, [r7, #30]
 8001648:	429a      	cmp	r2, r3
 800164a:	f080 809c 	bcs.w	8001786 <gradientTransition+0x30e>
			f = (float)(pos-from)/(to-from);
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	7ffb      	ldrb	r3, [r7, #31]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb41 	bl	8000cdc <__aeabi_i2f>
 800165a:	4604      	mov	r4, r0
 800165c:	7fba      	ldrb	r2, [r7, #30]
 800165e:	7ffb      	ldrb	r3, [r7, #31]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb3a 	bl	8000cdc <__aeabi_i2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4619      	mov	r1, r3
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff fc3d 	bl	8000eec <__aeabi_fdiv>
 8001672:	4603      	mov	r3, r0
 8001674:	623b      	str	r3, [r7, #32]
			b.r = (uint8_t)lerp((*gradient_b)[i][1], (*gradient_b)[i+1][1], f);
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb2a 	bl	8000cdc <__aeabi_i2f>
 8001688:	4604      	mov	r4, r0
 800168a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800168e:	3301      	adds	r3, #1
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	4619      	mov	r1, r3
 800169a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	1acb      	subs	r3, r1, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fb17 	bl	8000cdc <__aeabi_i2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	6a39      	ldr	r1, [r7, #32]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb66 	bl	8000d84 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fa59 	bl	8000b74 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fd49 	bl	800115c <__aeabi_f2uiz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	753b      	strb	r3, [r7, #20]
			b.g = (uint8_t)lerp((*gradient_b)[i][2], (*gradient_b)[i+1][2], f);
 80016d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fafd 	bl	8000cdc <__aeabi_i2f>
 80016e2:	4604      	mov	r4, r0
 80016e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e8:	3301      	adds	r3, #1
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	789b      	ldrb	r3, [r3, #2]
 80016f2:	4619      	mov	r1, r3
 80016f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	1acb      	subs	r3, r1, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff faea 	bl	8000cdc <__aeabi_i2f>
 8001708:	4603      	mov	r3, r0
 800170a:	6a39      	ldr	r1, [r7, #32]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb39 	bl	8000d84 <__aeabi_fmul>
 8001712:	4603      	mov	r3, r0
 8001714:	4619      	mov	r1, r3
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff fa2c 	bl	8000b74 <__addsf3>
 800171c:	4603      	mov	r3, r0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fd1c 	bl	800115c <__aeabi_f2uiz>
 8001724:	4603      	mov	r3, r0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	757b      	strb	r3, [r7, #21]
			b.b = (uint8_t)lerp((*gradient_b)[i][3], (*gradient_b)[i+1][3], f);
 800172a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	78db      	ldrb	r3, [r3, #3]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fad0 	bl	8000cdc <__aeabi_i2f>
 800173c:	4604      	mov	r4, r0
 800173e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001742:	3301      	adds	r3, #1
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	78db      	ldrb	r3, [r3, #3]
 800174c:	4619      	mov	r1, r3
 800174e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	78db      	ldrb	r3, [r3, #3]
 800175a:	1acb      	subs	r3, r1, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fabd 	bl	8000cdc <__aeabi_i2f>
 8001762:	4603      	mov	r3, r0
 8001764:	6a39      	ldr	r1, [r7, #32]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb0c 	bl	8000d84 <__aeabi_fmul>
 800176c:	4603      	mov	r3, r0
 800176e:	4619      	mov	r1, r3
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff f9ff 	bl	8000b74 <__addsf3>
 8001776:	4603      	mov	r3, r0
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fcef 	bl	800115c <__aeabi_f2uiz>
 800177e:	4603      	mov	r3, r0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	75bb      	strb	r3, [r7, #22]
			break;
 8001784:	e009      	b.n	800179a <gradientTransition+0x322>
	for (i=0; i<15; i++) {
 8001786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178a:	3301      	adds	r3, #1
 800178c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001794:	2b0e      	cmp	r3, #14
 8001796:	f67f af43 	bls.w	8001620 <gradientTransition+0x1a8>
			gammaTable[FLOAT_TO_INT(lerp(a.r, b.r, transition))],
			gammaTable[FLOAT_TO_INT(lerp(a.g, b.g, transition))],
			gammaTable[FLOAT_TO_INT(lerp(a.b, b.b, transition))]
	);*/

	return getRGB(
 800179a:	7e3b      	ldrb	r3, [r7, #24]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa9d 	bl	8000cdc <__aeabi_i2f>
 80017a2:	4604      	mov	r4, r0
 80017a4:	7d3b      	ldrb	r3, [r7, #20]
 80017a6:	461a      	mov	r2, r3
 80017a8:	7e3b      	ldrb	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fa95 	bl	8000cdc <__aeabi_i2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fae4 	bl	8000d84 <__aeabi_fmul>
 80017bc:	4603      	mov	r3, r0
 80017be:	4619      	mov	r1, r3
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff f9d7 	bl	8000b74 <__addsf3>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fcc7 	bl	800115c <__aeabi_f2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <gradientTransition+0x3ec>)
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	041c      	lsls	r4, r3, #16
 80017da:	7e7b      	ldrb	r3, [r7, #25]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fa7d 	bl	8000cdc <__aeabi_i2f>
 80017e2:	4605      	mov	r5, r0
 80017e4:	7d7b      	ldrb	r3, [r7, #21]
 80017e6:	461a      	mov	r2, r3
 80017e8:	7e7b      	ldrb	r3, [r7, #25]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa75 	bl	8000cdc <__aeabi_i2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	6839      	ldr	r1, [r7, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fac4 	bl	8000d84 <__aeabi_fmul>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4619      	mov	r1, r3
 8001800:	4628      	mov	r0, r5
 8001802:	f7ff f9b7 	bl	8000b74 <__addsf3>
 8001806:	4603      	mov	r3, r0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fca7 	bl	800115c <__aeabi_f2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <gradientTransition+0x3ec>)
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	431c      	orrs	r4, r3
 800181c:	7ebb      	ldrb	r3, [r7, #26]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa5c 	bl	8000cdc <__aeabi_i2f>
 8001824:	4605      	mov	r5, r0
 8001826:	7dbb      	ldrb	r3, [r7, #22]
 8001828:	461a      	mov	r2, r3
 800182a:	7ebb      	ldrb	r3, [r7, #26]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fa54 	bl	8000cdc <__aeabi_i2f>
 8001834:	4603      	mov	r3, r0
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff faa3 	bl	8000d84 <__aeabi_fmul>
 800183e:	4603      	mov	r3, r0
 8001840:	4619      	mov	r1, r3
 8001842:	4628      	mov	r0, r5
 8001844:	f7ff f996 	bl	8000b74 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fc86 	bl	800115c <__aeabi_f2uiz>
 8001850:	4603      	mov	r3, r0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4b03      	ldr	r3, [pc, #12]	; (8001864 <gradientTransition+0x3ec>)
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	4323      	orrs	r3, r4
			gammaTable[(uint8_t)lerp(a.r, b.r, transition)],
			gammaTable[(uint8_t)lerp(a.g, b.g, transition)],
			gammaTable[(uint8_t)lerp(a.b, b.b, transition)]
	);
}
 800185c:	4618      	mov	r0, r3
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}
 8001864:	2000073c 	.word	0x2000073c

08001868 <gradientRGB>:


uint32_t gradientRGB(uint8_t (*gradient)[16][4], uint8_t pos) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	uint32_t color = 0x000000;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
	uint8_t r, g, b, i;
	float f;

	for (i=0; i<15; i++) {
 8001878:	2300      	movs	r3, #0
 800187a:	74fb      	strb	r3, [r7, #19]
 800187c:	e0bb      	b.n	80019f6 <gradientRGB+0x18e>
		uint8_t from = (*gradient)[i][0];
 800187e:	7cfa      	ldrb	r2, [r7, #19]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001886:	74bb      	strb	r3, [r7, #18]
		uint8_t to = (*gradient)[i+1][0];
 8001888:	7cfb      	ldrb	r3, [r7, #19]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001892:	747b      	strb	r3, [r7, #17]
		if (pos>=from && pos<to) {
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	7cbb      	ldrb	r3, [r7, #18]
 8001898:	429a      	cmp	r2, r3
 800189a:	f0c0 80a9 	bcc.w	80019f0 <gradientRGB+0x188>
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	7c7b      	ldrb	r3, [r7, #17]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f080 80a4 	bcs.w	80019f0 <gradientRGB+0x188>
			f = (float)(pos-from)/(to-from);
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	7cbb      	ldrb	r3, [r7, #18]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa14 	bl	8000cdc <__aeabi_i2f>
 80018b4:	4604      	mov	r4, r0
 80018b6:	7c7a      	ldrb	r2, [r7, #17]
 80018b8:	7cbb      	ldrb	r3, [r7, #18]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fa0d 	bl	8000cdc <__aeabi_i2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fb10 	bl	8000eec <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	60fb      	str	r3, [r7, #12]
			r = gammaTable[(uint8_t) lerp((*gradient)[i][1], (*gradient)[i+1][1], f)];
 80018d0:	7cfb      	ldrb	r3, [r7, #19]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9fe 	bl	8000cdc <__aeabi_i2f>
 80018e0:	4604      	mov	r4, r0
 80018e2:	7cfb      	ldrb	r3, [r7, #19]
 80018e4:	3301      	adds	r3, #1
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	4619      	mov	r1, r3
 80018f0:	7cfb      	ldrb	r3, [r7, #19]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	1acb      	subs	r3, r1, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f9ed 	bl	8000cdc <__aeabi_i2f>
 8001902:	4603      	mov	r3, r0
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fa3c 	bl	8000d84 <__aeabi_fmul>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	4620      	mov	r0, r4
 8001912:	f7ff f92f 	bl	8000b74 <__addsf3>
 8001916:	4603      	mov	r3, r0
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc1f 	bl	800115c <__aeabi_f2uiz>
 800191e:	4603      	mov	r3, r0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <gradientRGB+0x1a0>)
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	72fb      	strb	r3, [r7, #11]
			g = gammaTable[(uint8_t) lerp((*gradient)[i][2], (*gradient)[i+1][2], f)];
 800192a:	7cfb      	ldrb	r3, [r7, #19]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	789b      	ldrb	r3, [r3, #2]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff f9d1 	bl	8000cdc <__aeabi_i2f>
 800193a:	4604      	mov	r4, r0
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	3301      	adds	r3, #1
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	789b      	ldrb	r3, [r3, #2]
 8001948:	4619      	mov	r1, r3
 800194a:	7cfb      	ldrb	r3, [r7, #19]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	789b      	ldrb	r3, [r3, #2]
 8001954:	1acb      	subs	r3, r1, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f9c0 	bl	8000cdc <__aeabi_i2f>
 800195c:	4603      	mov	r3, r0
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa0f 	bl	8000d84 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff f902 	bl	8000b74 <__addsf3>
 8001970:	4603      	mov	r3, r0
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fbf2 	bl	800115c <__aeabi_f2uiz>
 8001978:	4603      	mov	r3, r0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <gradientRGB+0x1a0>)
 8001980:	5c9b      	ldrb	r3, [r3, r2]
 8001982:	72bb      	strb	r3, [r7, #10]
			b = gammaTable[(uint8_t) lerp((*gradient)[i][3], (*gradient)[i+1][3], f)];
 8001984:	7cfb      	ldrb	r3, [r7, #19]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a4 	bl	8000cdc <__aeabi_i2f>
 8001994:	4604      	mov	r4, r0
 8001996:	7cfb      	ldrb	r3, [r7, #19]
 8001998:	3301      	adds	r3, #1
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	4619      	mov	r1, r3
 80019a4:	7cfb      	ldrb	r3, [r7, #19]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	78db      	ldrb	r3, [r3, #3]
 80019ae:	1acb      	subs	r3, r1, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f993 	bl	8000cdc <__aeabi_i2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9e2 	bl	8000d84 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff f8d5 	bl	8000b74 <__addsf3>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fbc5 	bl	800115c <__aeabi_f2uiz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <gradientRGB+0x1a0>)
 80019da:	5c9b      	ldrb	r3, [r3, r2]
 80019dc:	727b      	strb	r3, [r7, #9]
			color = (uint32_t)(r << 16 | g << 8 | b << 0);
 80019de:	7afb      	ldrb	r3, [r7, #11]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	7abb      	ldrb	r3, [r7, #10]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	431a      	orrs	r2, r3
 80019e8:	7a7b      	ldrb	r3, [r7, #9]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]
			//printf("Current float: %f, red: %d, green: %d, blue: %d\nHEX:  %04x\n", f, r, g, b, color);
			break;
 80019ee:	e006      	b.n	80019fe <gradientRGB+0x196>
	for (i=0; i<15; i++) {
 80019f0:	7cfb      	ldrb	r3, [r7, #19]
 80019f2:	3301      	adds	r3, #1
 80019f4:	74fb      	strb	r3, [r7, #19]
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	2b0e      	cmp	r3, #14
 80019fa:	f67f af40 	bls.w	800187e <gradientRGB+0x16>
		}
	}
	return color;
 80019fe:	697b      	ldr	r3, [r7, #20]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	2000073c 	.word	0x2000073c

08001a0c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a18:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a28:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a2c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a34:	e000      	b.n	8001a38 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a36:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f9      	beq.n	8001a36 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a42:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a4c:	687b      	ldr	r3, [r7, #4]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	int i=0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ffc8 	bl	8001a0c <ITM_SendChar>
	for (i=0; i<len; i++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x16>
	return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	0000      	movs	r0, r0
	...

08001a98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9a:	b091      	sub	sp, #68	; 0x44
 8001a9c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	uint32_t changeTimer, transitionTimer;
	float transitionValue = 0;
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34

	float t = 0;
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	61bb      	str	r3, [r7, #24]
	uint8_t brightness = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	float yPos = 0;
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	float inc = 0.01;
 8001ab6:	4bb4      	ldr	r3, [pc, #720]	; (8001d88 <main+0x2f0>)
 8001ab8:	617b      	str	r3, [r7, #20]
	uint8_t noise;
	float noise_f;

	uint8_t short_state = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t long_state = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint32_t time_keyEnc = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001aca:	f000 fe1d 	bl	8002708 <HAL_Init>

	/* USER CODE BEGIN Init */
	gammaInit(1.8);
 8001ace:	48af      	ldr	r0, [pc, #700]	; (8001d8c <main+0x2f4>)
 8001ad0:	f7ff fc92 	bl	80013f8 <gammaInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ad4:	f000 fa32 	bl	8001f3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ad8:	f000 fafc 	bl	80020d4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001adc:	f000 fa6e 	bl	8001fbc <MX_SPI1_Init>
	MX_TIM1_Init();
 8001ae0:	f000 faa2 	bl	8002028 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	48aa      	ldr	r0, [pc, #680]	; (8001d90 <main+0x2f8>)
 8001ae8:	f001 fff2 	bl	8003ad0 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SetCounter(&htim1,31); // TODO: Load from EEPROM
 8001aec:	4ba8      	ldr	r3, [pc, #672]	; (8001d90 <main+0x2f8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	221f      	movs	r2, #31
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
	/* APA102 */
	DigiLed_init(&hspi1);
 8001af4:	48a7      	ldr	r0, [pc, #668]	; (8001d94 <main+0x2fc>)
 8001af6:	f7ff fb51 	bl	800119c <DigiLed_init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */;
	printf("Hi\n");
 8001afa:	48a7      	ldr	r0, [pc, #668]	; (8001d98 <main+0x300>)
 8001afc:	f002 fefe 	bl	80048fc <puts>
	HAL_Delay(500);
 8001b00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b04:	f000 fe62 	bl	80027cc <HAL_Delay>
	while (1)
	{
		/**
		 * Encoder Handler
		 */
		if (brightness != TIM1->CNT/2) {
 8001b08:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001b0c:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <main+0x304>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d01b      	beq.n	8001b4e <main+0xb6>
			brightness = TIM1->CNT/2;
 8001b16:	4ba1      	ldr	r3, [pc, #644]	; (8001d9c <main+0x304>)
 8001b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			if (brightness >= 0x1f) {
 8001b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b24:	2b1e      	cmp	r3, #30
 8001b26:	d90c      	bls.n	8001b42 <main+0xaa>
				/* BLINK */
				DigiLed_setAllRGB(0xffffff);
 8001b28:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001b2c:	f7ff fbb2 	bl	8001294 <DigiLed_setAllRGB>
				DigiLed_update(FALSE);
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fbf1 	bl	8001318 <DigiLed_update>
				HAL_Delay(20);
 8001b36:	2014      	movs	r0, #20
 8001b38:	f000 fe48 	bl	80027cc <HAL_Delay>
				brightness = 0x1f;
 8001b3c:	231f      	movs	r3, #31
 8001b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
			printf("Illumination: %d", brightness);
 8001b42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b46:	4619      	mov	r1, r3
 8001b48:	4895      	ldr	r0, [pc, #596]	; (8001da0 <main+0x308>)
 8001b4a:	f002 fe63 	bl	8004814 <iprintf>
		}

		/* Button handler
		 * src: https://istarik.ru/blog/stm32/148.html */
		uint32_t ms = HAL_GetTick();
 8001b4e:	f000 fe33 	bl	80027b8 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]
		uint8_t keyEnc_state = HAL_GPIO_ReadPin(KEY_ENC_GPIO_Port, KEY_ENC_Pin);
 8001b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b58:	4892      	ldr	r0, [pc, #584]	; (8001da4 <main+0x30c>)
 8001b5a:	f001 f897 	bl	8002c8c <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	73fb      	strb	r3, [r7, #15]
		if(keyEnc_state == 0 && !short_state && (ms - time_keyEnc) > 50) {
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d111      	bne.n	8001b8c <main+0xf4>
 8001b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d10d      	bne.n	8001b8c <main+0xf4>
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b32      	cmp	r3, #50	; 0x32
 8001b78:	d908      	bls.n	8001b8c <main+0xf4>
			short_state = 1;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			long_state = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			time_keyEnc = ms;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8a:	e0b3      	b.n	8001cf4 <main+0x25c>
		} else if(keyEnc_state == 0 && !long_state && (ms - time_keyEnc) > 1000) {
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d133      	bne.n	8001bfa <main+0x162>
 8001b92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d12f      	bne.n	8001bfa <main+0x162>
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba4:	d929      	bls.n	8001bfa <main+0x162>
			long_state = 1;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			// действие на длинное нажатие
			DigiLed_setAllRGB(0xff0000); DigiLed_update(FALSE); HAL_Delay(200);
 8001bac:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8001bb0:	f7ff fb70 	bl	8001294 <DigiLed_setAllRGB>
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff fbaf 	bl	8001318 <DigiLed_update>
 8001bba:	20c8      	movs	r0, #200	; 0xc8
 8001bbc:	f000 fe06 	bl	80027cc <HAL_Delay>
			DigiLed_setAllRGB(0x00ff00); DigiLed_update(FALSE); HAL_Delay(200);
 8001bc0:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8001bc4:	f7ff fb66 	bl	8001294 <DigiLed_setAllRGB>
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff fba5 	bl	8001318 <DigiLed_update>
 8001bce:	20c8      	movs	r0, #200	; 0xc8
 8001bd0:	f000 fdfc 	bl	80027cc <HAL_Delay>
			DigiLed_setAllRGB(0x0000ff); DigiLed_update(FALSE); HAL_Delay(200);
 8001bd4:	20ff      	movs	r0, #255	; 0xff
 8001bd6:	f7ff fb5d 	bl	8001294 <DigiLed_setAllRGB>
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff fb9c 	bl	8001318 <DigiLed_update>
 8001be0:	20c8      	movs	r0, #200	; 0xc8
 8001be2:	f000 fdf3 	bl	80027cc <HAL_Delay>
			DigiLed_setAllRGB(0x000000); DigiLed_update(FALSE); HAL_Delay(200);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fb54 	bl	8001294 <DigiLed_setAllRGB>
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff fb93 	bl	8001318 <DigiLed_update>
 8001bf2:	20c8      	movs	r0, #200	; 0xc8
 8001bf4:	f000 fdea 	bl	80027cc <HAL_Delay>
 8001bf8:	e07c      	b.n	8001cf4 <main+0x25c>
		} else if(keyEnc_state == 1 && short_state && (ms - time_keyEnc) > 50) {
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d179      	bne.n	8001cf4 <main+0x25c>
 8001c00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d075      	beq.n	8001cf4 <main+0x25c>
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b32      	cmp	r3, #50	; 0x32
 8001c10:	d970      	bls.n	8001cf4 <main+0x25c>
			short_state = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			time_keyEnc = ms;
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24

			if(!long_state) {
 8001c1c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d167      	bne.n	8001cf4 <main+0x25c>
				// действие на короткое нажатие

				// Rainbow Transition Effect
				for(int8_t j = 0; j < 25; j++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001c2a:	e04b      	b.n	8001cc4 <main+0x22c>
					for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	843b      	strh	r3, [r7, #32]
 8001c30:	e037      	b.n	8001ca2 <main+0x20a>
						uint8_t linear = (uint8_t)(((float)n/LED_FRAME_SIZE)*255);
 8001c32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff f850 	bl	8000cdc <__aeabi_i2f>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	495a      	ldr	r1, [pc, #360]	; (8001da8 <main+0x310>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f953 	bl	8000eec <__aeabi_fdiv>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4958      	ldr	r1, [pc, #352]	; (8001dac <main+0x314>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f89a 	bl	8000d84 <__aeabi_fmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa82 	bl	800115c <__aeabi_f2uiz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	73bb      	strb	r3, [r7, #14]
						uint8_t nn = (n + j) % LED_FRAME_SIZE;
 8001c5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001c60:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001c64:	441a      	add	r2, r3
 8001c66:	4b52      	ldr	r3, [pc, #328]	; (8001db0 <main+0x318>)
 8001c68:	fb83 1302 	smull	r1, r3, r3, r2
 8001c6c:	10d9      	asrs	r1, r3, #3
 8001c6e:	17d3      	asrs	r3, r2, #31
 8001c70:	1ac9      	subs	r1, r1, r3
 8001c72:	460b      	mov	r3, r1
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	440b      	add	r3, r1
 8001c78:	011b      	lsls	r3, r3, #4
 8001c7a:	1ad1      	subs	r1, r2, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	737b      	strb	r3, [r7, #13]
						DigiLed_setRGB(nn, gradientRGB(&loading, linear));
 8001c80:	7bbb      	ldrb	r3, [r7, #14]
 8001c82:	4619      	mov	r1, r3
 8001c84:	484b      	ldr	r0, [pc, #300]	; (8001db4 <main+0x31c>)
 8001c86:	f7ff fdef 	bl	8001868 <gradientRGB>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fac5 	bl	8001220 <DigiLed_setRGB>
					for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001c96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	843b      	strh	r3, [r7, #32]
 8001ca2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001ca6:	2b30      	cmp	r3, #48	; 0x30
 8001ca8:	ddc3      	ble.n	8001c32 <main+0x19a>
					}
					DigiLed_update(FALSE);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fb34 	bl	8001318 <DigiLed_update>
					HAL_Delay(10);
 8001cb0:	200a      	movs	r0, #10
 8001cb2:	f000 fd8b 	bl	80027cc <HAL_Delay>
				for(int8_t j = 0; j < 25; j++) {
 8001cb6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001cc4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001cc8:	2b18      	cmp	r3, #24
 8001cca:	ddaf      	ble.n	8001c2c <main+0x194>
				}
				// Incrementing
				if (currentGradient<gradientsNum-1) currentGradient++;
 8001ccc:	4b3a      	ldr	r3, [pc, #232]	; (8001db8 <main+0x320>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d806      	bhi.n	8001ce2 <main+0x24a>
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <main+0x320>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b36      	ldr	r3, [pc, #216]	; (8001db8 <main+0x320>)
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e002      	b.n	8001ce8 <main+0x250>
				else currentGradient=0;
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <main+0x320>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
				nextGradient = currentGradient;
 8001ce8:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <main+0x320>)
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <main+0x324>)
 8001cee:	701a      	strb	r2, [r3, #0]
				changeTimer = ms;
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
		}

		/**
		 * gradient changing
		 **/
		if ((ms-changeTimer) > 30000) {
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f247 5230 	movw	r2, #30000	; 0x7530
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d912      	bls.n	8001d28 <main+0x290>
			changeTimer = ms;
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	63fb      	str	r3, [r7, #60]	; 0x3c
			transitionValue = 0;
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	637b      	str	r3, [r7, #52]	; 0x34
			if (nextGradient<gradientsNum-1) nextGradient++;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <main+0x324>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d806      	bhi.n	8001d22 <main+0x28a>
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <main+0x324>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <main+0x324>)
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e002      	b.n	8001d28 <main+0x290>
			else nextGradient=0;
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <main+0x324>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]
		}

		if (nextGradient != currentGradient && (ms-transitionTimer) > 10) {
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <main+0x324>)
 8001d2a:	781a      	ldrb	r2, [r3, #0]
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <main+0x320>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d022      	beq.n	8001d7a <main+0x2e2>
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d91d      	bls.n	8001d7a <main+0x2e2>
			transitionTimer = ms;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
			transitionValue += 0.01;
 8001d42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d44:	f7fe fb70 	bl	8000428 <__aeabi_f2d>
 8001d48:	a30d      	add	r3, pc, #52	; (adr r3, 8001d80 <main+0x2e8>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fa0d 	bl	800016c <__adddf3>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	4618      	mov	r0, r3
 8001d58:	4621      	mov	r1, r4
 8001d5a:	f7fe feb5 	bl	8000ac8 <__aeabi_d2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	637b      	str	r3, [r7, #52]	; 0x34
			if (transitionValue >= 1.0) {
 8001d62:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d66:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d68:	f7ff f9be 	bl	80010e8 <__aeabi_fcmpge>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <main+0x2e2>
				currentGradient = nextGradient;
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <main+0x324>)
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <main+0x320>)
 8001d78:	701a      	strb	r2, [r3, #0]
			}
		}

		for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	83fb      	strh	r3, [r7, #30]
 8001d7e:	e0ac      	b.n	8001eda <main+0x442>
 8001d80:	47ae147b 	.word	0x47ae147b
 8001d84:	3f847ae1 	.word	0x3f847ae1
 8001d88:	3c23d70a 	.word	0x3c23d70a
 8001d8c:	3fe66666 	.word	0x3fe66666
 8001d90:	200009e0 	.word	0x200009e0
 8001d94:	20000a28 	.word	0x20000a28
 8001d98:	08007590 	.word	0x08007590
 8001d9c:	40012c00 	.word	0x40012c00
 8001da0:	08007594 	.word	0x08007594
 8001da4:	40010800 	.word	0x40010800
 8001da8:	42400000 	.word	0x42400000
 8001dac:	437f0000 	.word	0x437f0000
 8001db0:	2aaaaaab 	.word	0x2aaaaaab
 8001db4:	20000000 	.word	0x20000000
 8001db8:	2000083c 	.word	0x2000083c
 8001dbc:	2000083d 	.word	0x2000083d
			noise_f = perlin2d( n, yPos, 0.1, 1);
 8001dc0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff89 	bl	8000cdc <__aeabi_i2f>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	4a54      	ldr	r2, [pc, #336]	; (8001f20 <main+0x488>)
 8001dce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dd0:	f000 faad 	bl	800232e <perlin2d>
 8001dd4:	60b8      	str	r0, [r7, #8]
			noise = (uint8_t)constrain((noise_f*300-50), 0, 255);
 8001dd6:	4953      	ldr	r1, [pc, #332]	; (8001f24 <main+0x48c>)
 8001dd8:	68b8      	ldr	r0, [r7, #8]
 8001dda:	f7fe ffd3 	bl	8000d84 <__aeabi_fmul>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4951      	ldr	r1, [pc, #324]	; (8001f28 <main+0x490>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fec4 	bl	8000b70 <__aeabi_fsub>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f970 	bl	80010d4 <__aeabi_fcmple>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <main+0x366>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e021      	b.n	8001e42 <main+0x3aa>
 8001dfe:	4949      	ldr	r1, [pc, #292]	; (8001f24 <main+0x48c>)
 8001e00:	68b8      	ldr	r0, [r7, #8]
 8001e02:	f7fe ffbf 	bl	8000d84 <__aeabi_fmul>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4947      	ldr	r1, [pc, #284]	; (8001f28 <main+0x490>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe feb0 	bl	8000b70 <__aeabi_fsub>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4946      	ldr	r1, [pc, #280]	; (8001f2c <main+0x494>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f967 	bl	80010e8 <__aeabi_fcmpge>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <main+0x38c>
 8001e20:	23ff      	movs	r3, #255	; 0xff
 8001e22:	e00e      	b.n	8001e42 <main+0x3aa>
 8001e24:	493f      	ldr	r1, [pc, #252]	; (8001f24 <main+0x48c>)
 8001e26:	68b8      	ldr	r0, [r7, #8]
 8001e28:	f7fe ffac 	bl	8000d84 <__aeabi_fmul>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	493e      	ldr	r1, [pc, #248]	; (8001f28 <main+0x490>)
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fe9d 	bl	8000b70 <__aeabi_fsub>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f98f 	bl	800115c <__aeabi_f2uiz>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	71fb      	strb	r3, [r7, #7]

			if (nextGradient != currentGradient)
 8001e44:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <main+0x498>)
 8001e46:	781a      	ldrb	r2, [r3, #0]
 8001e48:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <main+0x49c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d02d      	beq.n	8001eac <main+0x414>
				DigiLed_setRGB(n,gradientTransition(
 8001e50:	8bfb      	ldrh	r3, [r7, #30]
 8001e52:	b2dc      	uxtb	r4, r3
						&gradients[currentGradient],
 8001e54:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <main+0x49c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	4a37      	ldr	r2, [pc, #220]	; (8001f38 <main+0x4a0>)
 8001e5c:	189d      	adds	r5, r3, r2
						&gradients[nextGradient],
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <main+0x498>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	019b      	lsls	r3, r3, #6
 8001e64:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <main+0x4a0>)
 8001e66:	189e      	adds	r6, r3, r2
				DigiLed_setRGB(n,gradientTransition(
 8001e68:	f04f 0100 	mov.w	r1, #0
 8001e6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e6e:	f7ff f931 	bl	80010d4 <__aeabi_fcmple>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <main+0x3e6>
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e00b      	b.n	8001e96 <main+0x3fe>
						noise, constrain(transitionValue, 0, 1)
 8001e7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e82:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e84:	f7ff f930 	bl	80010e8 <__aeabi_fcmpge>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <main+0x3fc>
 8001e8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e92:	e000      	b.n	8001e96 <main+0x3fe>
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				DigiLed_setRGB(n,gradientTransition(
 8001e96:	79fa      	ldrb	r2, [r7, #7]
 8001e98:	4631      	mov	r1, r6
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	f7ff faec 	bl	8001478 <gradientTransition>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7ff f9bb 	bl	8001220 <DigiLed_setRGB>
 8001eaa:	e010      	b.n	8001ece <main+0x436>
				));
			else
				DigiLed_setRGB(n,gradientRGB(&gradients[currentGradient], noise));
 8001eac:	8bfb      	ldrh	r3, [r7, #30]
 8001eae:	b2dc      	uxtb	r4, r3
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <main+0x49c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <main+0x4a0>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	79fa      	ldrb	r2, [r7, #7]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fcd2 	bl	8001868 <gradientRGB>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f7ff f9a9 	bl	8001220 <DigiLed_setRGB>
		for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001ece:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	83fb      	strh	r3, [r7, #30]
 8001eda:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ede:	2b30      	cmp	r3, #48	; 0x30
 8001ee0:	f77f af6e 	ble.w	8001dc0 <main+0x328>
		}

		yPos += .1;
 8001ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ee6:	f7fe fa9f 	bl	8000428 <__aeabi_f2d>
 8001eea:	a30b      	add	r3, pc, #44	; (adr r3, 8001f18 <main+0x480>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f7fe f93c 	bl	800016c <__adddf3>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	4621      	mov	r1, r4
 8001efc:	f7fe fde4 	bl	8000ac8 <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		DigiLed_setAllIllumination(brightness);
 8001f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f9df 	bl	80012cc <DigiLed_setAllIllumination>
		DigiLed_update(FALSE);
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff fa02 	bl	8001318 <DigiLed_update>
	{
 8001f14:	e5f8      	b.n	8001b08 <main+0x70>
 8001f16:	bf00      	nop
 8001f18:	9999999a 	.word	0x9999999a
 8001f1c:	3fb99999 	.word	0x3fb99999
 8001f20:	3dcccccd 	.word	0x3dcccccd
 8001f24:	43960000 	.word	0x43960000
 8001f28:	42480000 	.word	0x42480000
 8001f2c:	437f0000 	.word	0x437f0000
 8001f30:	2000083d 	.word	0x2000083d
 8001f34:	2000083c 	.word	0x2000083c
 8001f38:	20000040 	.word	0x20000040

08001f3c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b090      	sub	sp, #64	; 0x40
 8001f40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	2228      	movs	r2, #40	; 0x28
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 ff64 	bl	8003e18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f62:	2301      	movs	r3, #1
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f66:	2310      	movs	r3, #16
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001f72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 feb5 	bl	8002cec <HAL_RCC_OscConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001f88:	f000 f8fe 	bl	8002188 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f90:	2302      	movs	r3, #2
 8001f92:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 f921 	bl	80031ec <HAL_RCC_ClockConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8001fb0:	f000 f8ea 	bl	8002188 <Error_Handler>
	}
}
 8001fb4:	bf00      	nop
 8001fb6:	3740      	adds	r7, #64	; 0x40
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc2:	4a18      	ldr	r2, [pc, #96]	; (8002024 <MX_SPI1_Init+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fcc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_SPI1_Init+0x64>)
 8001fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fec:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ff4:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_SPI1_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002000:	4b07      	ldr	r3, [pc, #28]	; (8002020 <MX_SPI1_Init+0x64>)
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_SPI1_Init+0x64>)
 8002008:	220a      	movs	r2, #10
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800200c:	4804      	ldr	r0, [pc, #16]	; (8002020 <MX_SPI1_Init+0x64>)
 800200e:	f001 fa57 	bl	80034c0 <HAL_SPI_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8002018:	f000 f8b6 	bl	8002188 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000a28 	.word	0x20000a28
 8002024:	40013000 	.word	0x40013000

08002028 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	; 0x30
 800202c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2224      	movs	r2, #36	; 0x24
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f001 feee 	bl	8003e18 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <MX_TIM1_Init+0xa4>)
 8002046:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <MX_TIM1_Init+0xa8>)
 8002048:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <MX_TIM1_Init+0xa4>)
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <MX_TIM1_Init+0xa4>)
 8002052:	2260      	movs	r2, #96	; 0x60
 8002054:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62;
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <MX_TIM1_Init+0xa4>)
 8002058:	223e      	movs	r2, #62	; 0x3e
 800205a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <MX_TIM1_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <MX_TIM1_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <MX_TIM1_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800206e:	2301      	movs	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002076:	2301      	movs	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 800207e:	230f      	movs	r3, #15
 8002080:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002086:	2301      	movs	r3, #1
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 800208e:	230f      	movs	r3, #15
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	4619      	mov	r1, r3
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <MX_TIM1_Init+0xa4>)
 800209a:	f001 fc77 	bl	800398c <HAL_TIM_Encoder_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM1_Init+0x80>
	{
		Error_Handler();
 80020a4:	f000 f870 	bl	8002188 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_TIM1_Init+0xa4>)
 80020b6:	f001 fe1f 	bl	8003cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 80020c0:	f000 f862 	bl	8002188 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3730      	adds	r7, #48	; 0x30
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200009e0 	.word	0x200009e0
 80020d0:	40012c00 	.word	0x40012c00

080020d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <MX_GPIO_Init+0xa8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <MX_GPIO_Init+0xa8>)
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <MX_GPIO_Init+0xa8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MX_GPIO_Init+0xa8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <MX_GPIO_Init+0xa8>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <MX_GPIO_Init+0xa8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <MX_GPIO_Init+0xa8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <MX_GPIO_Init+0xa8>)
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <MX_GPIO_Init+0xa8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002130:	2200      	movs	r2, #0
 8002132:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002136:	4812      	ldr	r0, [pc, #72]	; (8002180 <MX_GPIO_Init+0xac>)
 8002138:	f000 fdbf 	bl	8002cba <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800213c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002140:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	2302      	movs	r3, #2
 800214c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4619      	mov	r1, r3
 8002154:	480a      	ldr	r0, [pc, #40]	; (8002180 <MX_GPIO_Init+0xac>)
 8002156:	f000 fc3f 	bl	80029d8 <HAL_GPIO_Init>

	/*Configure GPIO pin : KEY_ENC_Pin */
	GPIO_InitStruct.Pin = KEY_ENC_Pin;
 800215a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800215e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(KEY_ENC_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_GPIO_Init+0xb0>)
 8002170:	f000 fc32 	bl	80029d8 <HAL_GPIO_Init>

}
 8002174:	bf00      	nop
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	40011000 	.word	0x40011000
 8002184:	40010800 	.word	0x40010800

08002188 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <noise2>:
                     101,120,99,3,186,86,99,41,237,203,111,79,220,135,158,42,30,154,120,67,87,167,
                     135,176,183,191,253,115,184,21,233,58,129,233,142,39,128,211,118,137,139,255,
                     114,20,218,113,154,27,127,246,250,1,8,198,250,209,92,222,173,21,88,102,219};

int noise2(int x, int y)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
    int tmp = hash[(y + SEED) % 256];
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <noise2+0x44>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	4413      	add	r3, r2
 80021a6:	425a      	negs	r2, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	bf58      	it	pl
 80021ae:	4253      	negpl	r3, r2
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <noise2+0x48>)
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	60fb      	str	r3, [r7, #12]
    return hash[(tmp + x) % 256];
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	425a      	negs	r2, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	bf58      	it	pl
 80021c6:	4253      	negpl	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <noise2+0x48>)
 80021ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000840 	.word	0x20000840
 80021dc:	20000140 	.word	0x20000140

080021e0 <lin_inter>:

float lin_inter(float x, float y, float s)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
    return x + s * (y-x);
 80021ec:	68f9      	ldr	r1, [r7, #12]
 80021ee:	68b8      	ldr	r0, [r7, #8]
 80021f0:	f7fe fcbe 	bl	8000b70 <__aeabi_fsub>
 80021f4:	4603      	mov	r3, r0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fdc3 	bl	8000d84 <__aeabi_fmul>
 80021fe:	4603      	mov	r3, r0
 8002200:	68f9      	ldr	r1, [r7, #12]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fcb6 	bl	8000b74 <__addsf3>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <smooth_inter>:

float smooth_inter(float x, float y, float s)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
    return lin_inter(x, y, s * s * (3-2*s));
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fdae 	bl	8000d84 <__aeabi_fmul>
 8002228:	4603      	mov	r3, r0
 800222a:	461c      	mov	r4, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4619      	mov	r1, r3
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fc9f 	bl	8000b74 <__addsf3>
 8002236:	4603      	mov	r3, r0
 8002238:	4619      	mov	r1, r3
 800223a:	4809      	ldr	r0, [pc, #36]	; (8002260 <smooth_inter+0x4c>)
 800223c:	f7fe fc98 	bl	8000b70 <__aeabi_fsub>
 8002240:	4603      	mov	r3, r0
 8002242:	4619      	mov	r1, r3
 8002244:	4620      	mov	r0, r4
 8002246:	f7fe fd9d 	bl	8000d84 <__aeabi_fmul>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff ffc5 	bl	80021e0 <lin_inter>
 8002256:	4603      	mov	r3, r0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bd90      	pop	{r4, r7, pc}
 8002260:	40400000 	.word	0x40400000

08002264 <noise2d>:

float noise2d(float x, float y)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b08d      	sub	sp, #52	; 0x34
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
    int x_int = x;
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe ff4e 	bl	8001110 <__aeabi_f2iz>
 8002274:	4603      	mov	r3, r0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    int y_int = y;
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f7fe ff49 	bl	8001110 <__aeabi_f2iz>
 800227e:	4603      	mov	r3, r0
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    float x_frac = x - x_int;
 8002282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002284:	f7fe fd2a 	bl	8000cdc <__aeabi_i2f>
 8002288:	4603      	mov	r3, r0
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7fe fc6f 	bl	8000b70 <__aeabi_fsub>
 8002292:	4603      	mov	r3, r0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    float y_frac = y - y_int;
 8002296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002298:	f7fe fd20 	bl	8000cdc <__aeabi_i2f>
 800229c:	4603      	mov	r3, r0
 800229e:	4619      	mov	r1, r3
 80022a0:	6838      	ldr	r0, [r7, #0]
 80022a2:	f7fe fc65 	bl	8000b70 <__aeabi_fsub>
 80022a6:	4603      	mov	r3, r0
 80022a8:	623b      	str	r3, [r7, #32]
    int s = noise2(x_int, y_int);
 80022aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022ae:	f7ff ff71 	bl	8002194 <noise2>
 80022b2:	61f8      	str	r0, [r7, #28]
    int t = noise2(x_int+1, y_int);
 80022b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b6:	3301      	adds	r3, #1
 80022b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff6a 	bl	8002194 <noise2>
 80022c0:	61b8      	str	r0, [r7, #24]
    int u = noise2(x_int, y_int+1);
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	3301      	adds	r3, #1
 80022c6:	4619      	mov	r1, r3
 80022c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022ca:	f7ff ff63 	bl	8002194 <noise2>
 80022ce:	6178      	str	r0, [r7, #20]
    int v = noise2(x_int+1, y_int+1);
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d6:	3301      	adds	r3, #1
 80022d8:	4619      	mov	r1, r3
 80022da:	4610      	mov	r0, r2
 80022dc:	f7ff ff5a 	bl	8002194 <noise2>
 80022e0:	6138      	str	r0, [r7, #16]
    float low = smooth_inter(s, t, x_frac);
 80022e2:	69f8      	ldr	r0, [r7, #28]
 80022e4:	f7fe fcfa 	bl	8000cdc <__aeabi_i2f>
 80022e8:	4604      	mov	r4, r0
 80022ea:	69b8      	ldr	r0, [r7, #24]
 80022ec:	f7fe fcf6 	bl	8000cdc <__aeabi_i2f>
 80022f0:	4603      	mov	r3, r0
 80022f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4620      	mov	r0, r4
 80022f8:	f7ff ff8c 	bl	8002214 <smooth_inter>
 80022fc:	60f8      	str	r0, [r7, #12]
    float high = smooth_inter(u, v, x_frac);
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	f7fe fcec 	bl	8000cdc <__aeabi_i2f>
 8002304:	4604      	mov	r4, r0
 8002306:	6938      	ldr	r0, [r7, #16]
 8002308:	f7fe fce8 	bl	8000cdc <__aeabi_i2f>
 800230c:	4603      	mov	r3, r0
 800230e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	4620      	mov	r0, r4
 8002314:	f7ff ff7e 	bl	8002214 <smooth_inter>
 8002318:	60b8      	str	r0, [r7, #8]
    return smooth_inter(low, high, y_frac);
 800231a:	6a3a      	ldr	r2, [r7, #32]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7ff ff78 	bl	8002214 <smooth_inter>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3734      	adds	r7, #52	; 0x34
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}

0800232e <perlin2d>:

float perlin2d(float x, float y, float freq, int depth)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	; 0x28
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
    float xa = x*freq;
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f7fe fd20 	bl	8000d84 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    float ya = y*freq;
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	f7fe fd1a 	bl	8000d84 <__aeabi_fmul>
 8002350:	4603      	mov	r3, r0
 8002352:	623b      	str	r3, [r7, #32]
    float amp = 1.0;
 8002354:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002358:	61fb      	str	r3, [r7, #28]
    float fin = 0;
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
    float div = 0.0;
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	617b      	str	r3, [r7, #20]

    int i;
    for(i=0; i<depth; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	e033      	b.n	80023d4 <perlin2d+0xa6>
    {
        div += 256 * amp;
 800236c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002370:	69f8      	ldr	r0, [r7, #28]
 8002372:	f7fe fd07 	bl	8000d84 <__aeabi_fmul>
 8002376:	4603      	mov	r3, r0
 8002378:	4619      	mov	r1, r3
 800237a:	6978      	ldr	r0, [r7, #20]
 800237c:	f7fe fbfa 	bl	8000b74 <__addsf3>
 8002380:	4603      	mov	r3, r0
 8002382:	617b      	str	r3, [r7, #20]
        fin += noise2d(xa, ya) * amp;
 8002384:	6a39      	ldr	r1, [r7, #32]
 8002386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002388:	f7ff ff6c 	bl	8002264 <noise2d>
 800238c:	4603      	mov	r3, r0
 800238e:	69f9      	ldr	r1, [r7, #28]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fcf7 	bl	8000d84 <__aeabi_fmul>
 8002396:	4603      	mov	r3, r0
 8002398:	4619      	mov	r1, r3
 800239a:	69b8      	ldr	r0, [r7, #24]
 800239c:	f7fe fbea 	bl	8000b74 <__addsf3>
 80023a0:	4603      	mov	r3, r0
 80023a2:	61bb      	str	r3, [r7, #24]
        amp /= 2;
 80023a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023a8:	69f8      	ldr	r0, [r7, #28]
 80023aa:	f7fe fd9f 	bl	8000eec <__aeabi_fdiv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	61fb      	str	r3, [r7, #28]
        xa *= 2;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	4619      	mov	r1, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fbdc 	bl	8000b74 <__addsf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
        ya *= 2;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fbd5 	bl	8000b74 <__addsf3>
 80023ca:	4603      	mov	r3, r0
 80023cc:	623b      	str	r3, [r7, #32]
    for(i=0; i<depth; i++)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	3301      	adds	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	dbc7      	blt.n	800236c <perlin2d+0x3e>
    }

    return fin/div;
 80023dc:	6979      	ldr	r1, [r7, #20]
 80023de:	69b8      	ldr	r0, [r7, #24]
 80023e0:	f7fe fd84 	bl	8000eec <__aeabi_fdiv>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3728      	adds	r7, #40	; 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_MspInit+0x5c>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_MspInit+0x5c>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6193      	str	r3, [r2, #24]
 8002402:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_MspInit+0x5c>)
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_MspInit+0x5c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <HAL_MspInit+0x5c>)
 8002414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_MspInit+0x5c>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_MspInit+0x60>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_MspInit+0x60>)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000

08002454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_SPI_MspInit+0x88>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d12f      	bne.n	80024d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002474:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_SPI_MspInit+0x8c>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_SPI_MspInit+0x8c>)
 800247a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800247e:	6193      	str	r3, [r2, #24]
 8002480:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <HAL_SPI_MspInit+0x8c>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_SPI_MspInit+0x8c>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a13      	ldr	r2, [pc, #76]	; (80024e0 <HAL_SPI_MspInit+0x8c>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_SPI_MspInit+0x8c>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024a4:	23a0      	movs	r3, #160	; 0xa0
 80024a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	480b      	ldr	r0, [pc, #44]	; (80024e4 <HAL_SPI_MspInit+0x90>)
 80024b8:	f000 fa8e 	bl	80029d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024bc:	2340      	movs	r3, #64	; 0x40
 80024be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4619      	mov	r1, r3
 80024ce:	4805      	ldr	r0, [pc, #20]	; (80024e4 <HAL_SPI_MspInit+0x90>)
 80024d0:	f000 fa82 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024d4:	bf00      	nop
 80024d6:	3720      	adds	r7, #32
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40013000 	.word	0x40013000
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40010800 	.word	0x40010800

080024e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a16      	ldr	r2, [pc, #88]	; (800255c <HAL_TIM_Encoder_MspInit+0x74>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d124      	bne.n	8002552 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <HAL_TIM_Encoder_MspInit+0x78>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a14      	ldr	r2, [pc, #80]	; (8002560 <HAL_TIM_Encoder_MspInit+0x78>)
 800250e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b12      	ldr	r3, [pc, #72]	; (8002560 <HAL_TIM_Encoder_MspInit+0x78>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <HAL_TIM_Encoder_MspInit+0x78>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	4a0e      	ldr	r2, [pc, #56]	; (8002560 <HAL_TIM_Encoder_MspInit+0x78>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6193      	str	r3, [r2, #24]
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_TIM_Encoder_MspInit+0x78>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002538:	f44f 7340 	mov.w	r3, #768	; 0x300
 800253c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 0310 	add.w	r3, r7, #16
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <HAL_TIM_Encoder_MspInit+0x7c>)
 800254e:	f000 fa43 	bl	80029d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40021000 	.word	0x40021000
 8002564:	40010800 	.word	0x40010800

08002568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <HardFault_Handler+0x4>

0800257a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <MemManage_Handler+0x4>

08002580 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <BusFault_Handler+0x4>

08002586 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <UsageFault_Handler+0x4>

0800258c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025b4:	f000 f8ee 	bl	8002794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e00a      	b.n	80025e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ce:	f3af 8000 	nop.w
 80025d2:	4601      	mov	r1, r0
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	60ba      	str	r2, [r7, #8]
 80025da:	b2ca      	uxtb	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3301      	adds	r3, #1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	dbf0      	blt.n	80025ce <_read+0x12>
	}

return len;
 80025ec:	687b      	ldr	r3, [r7, #4]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
	return -1;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800261c:	605a      	str	r2, [r3, #4]
	return 0;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <_isatty>:

int _isatty(int file)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
	return 1;
 8002632:	2301      	movs	r3, #1
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
	return 0;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
	...

08002658 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <_sbrk+0x50>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <_sbrk+0x16>
		heap_end = &end;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <_sbrk+0x50>)
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <_sbrk+0x54>)
 800266c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <_sbrk+0x50>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <_sbrk+0x50>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	466a      	mov	r2, sp
 800267e:	4293      	cmp	r3, r2
 8002680:	d907      	bls.n	8002692 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002682:	f001 fb97 	bl	8003db4 <__errno>
 8002686:	4602      	mov	r2, r0
 8002688:	230c      	movs	r3, #12
 800268a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002690:	e006      	b.n	80026a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8002692:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <_sbrk+0x50>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	4a03      	ldr	r2, [pc, #12]	; (80026a8 <_sbrk+0x50>)
 800269c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800269e:	68fb      	ldr	r3, [r7, #12]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000844 	.word	0x20000844
 80026ac:	20000a88 	.word	0x20000a88

080026b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026be:	e003      	b.n	80026c8 <LoopCopyDataInit>

080026c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026c6:	3104      	adds	r1, #4

080026c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026c8:	480a      	ldr	r0, [pc, #40]	; (80026f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026d0:	d3f6      	bcc.n	80026c0 <CopyDataInit>
  ldr r2, =_sbss
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026d4:	e002      	b.n	80026dc <LoopFillZerobss>

080026d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026d8:	f842 3b04 	str.w	r3, [r2], #4

080026dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026dc:	4b08      	ldr	r3, [pc, #32]	; (8002700 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026e0:	d3f9      	bcc.n	80026d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026e2:	f7ff ffe5 	bl	80026b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026e6:	f001 fb6b 	bl	8003dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ea:	f7ff f9d5 	bl	8001a98 <main>
  bx lr
 80026ee:	4770      	bx	lr
  ldr r3, =_sidata
 80026f0:	080078e0 	.word	0x080078e0
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026f8:	20000720 	.word	0x20000720
  ldr r2, =_sbss
 80026fc:	20000720 	.word	0x20000720
  ldr r3, = _ebss
 8002700:	20000a88 	.word	0x20000a88

08002704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC1_2_IRQHandler>
	...

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_Init+0x28>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_Init+0x28>)
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002718:	2003      	movs	r0, #3
 800271a:	f000 f929 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800271e:	2000      	movs	r0, #0
 8002720:	f000 f808 	bl	8002734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002724:	f7ff fe64 	bl	80023f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40022000 	.word	0x40022000

08002734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_InitTick+0x54>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_InitTick+0x58>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800274a:	fbb3 f3f1 	udiv	r3, r3, r1
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f933 	bl	80029be <HAL_SYSTICK_Config>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e00e      	b.n	8002780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0f      	cmp	r3, #15
 8002766:	d80a      	bhi.n	800277e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002768:	2200      	movs	r2, #0
 800276a:	6879      	ldr	r1, [r7, #4]
 800276c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002770:	f000 f909 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002774:	4a06      	ldr	r2, [pc, #24]	; (8002790 <HAL_InitTick+0x5c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000540 	.word	0x20000540
 800278c:	20000548 	.word	0x20000548
 8002790:	20000544 	.word	0x20000544

08002794 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_IncTick+0x1c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_IncTick+0x20>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a03      	ldr	r2, [pc, #12]	; (80027b4 <HAL_IncTick+0x20>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	20000548 	.word	0x20000548
 80027b4:	20000a80 	.word	0x20000a80

080027b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return uwTick;
 80027bc:	4b02      	ldr	r3, [pc, #8]	; (80027c8 <HAL_GetTick+0x10>)
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	20000a80 	.word	0x20000a80

080027cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027d4:	f7ff fff0 	bl	80027b8 <HAL_GetTick>
 80027d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e4:	d005      	beq.n	80027f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_Delay+0x40>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f2:	bf00      	nop
 80027f4:	f7ff ffe0 	bl	80027b8 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	429a      	cmp	r2, r3
 8002802:	d8f7      	bhi.n	80027f4 <HAL_Delay+0x28>
  {
  }
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000548 	.word	0x20000548

08002810 <__NVIC_SetPriorityGrouping>:
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	; (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	; (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_SetPriority>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	; (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	; (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	; 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <SysTick_Config>:
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002950:	f7ff ff90 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	; (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff49 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff5e 	bl	8002858 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff90 	bl	80028c8 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5f 	bl	8002874 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffb0 	bl	800292c <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	b480      	push	{r7}
 80029da:	b08b      	sub	sp, #44	; 0x2c
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ea:	e127      	b.n	8002c3c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029ec:	2201      	movs	r2, #1
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	f040 8116 	bne.w	8002c36 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b12      	cmp	r3, #18
 8002a10:	d034      	beq.n	8002a7c <HAL_GPIO_Init+0xa4>
 8002a12:	2b12      	cmp	r3, #18
 8002a14:	d80d      	bhi.n	8002a32 <HAL_GPIO_Init+0x5a>
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d02b      	beq.n	8002a72 <HAL_GPIO_Init+0x9a>
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d804      	bhi.n	8002a28 <HAL_GPIO_Init+0x50>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d031      	beq.n	8002a86 <HAL_GPIO_Init+0xae>
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d01c      	beq.n	8002a60 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a26:	e048      	b.n	8002aba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d043      	beq.n	8002ab4 <HAL_GPIO_Init+0xdc>
 8002a2c:	2b11      	cmp	r3, #17
 8002a2e:	d01b      	beq.n	8002a68 <HAL_GPIO_Init+0x90>
          break;
 8002a30:	e043      	b.n	8002aba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a32:	4a89      	ldr	r2, [pc, #548]	; (8002c58 <HAL_GPIO_Init+0x280>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d026      	beq.n	8002a86 <HAL_GPIO_Init+0xae>
 8002a38:	4a87      	ldr	r2, [pc, #540]	; (8002c58 <HAL_GPIO_Init+0x280>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d806      	bhi.n	8002a4c <HAL_GPIO_Init+0x74>
 8002a3e:	4a87      	ldr	r2, [pc, #540]	; (8002c5c <HAL_GPIO_Init+0x284>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d020      	beq.n	8002a86 <HAL_GPIO_Init+0xae>
 8002a44:	4a86      	ldr	r2, [pc, #536]	; (8002c60 <HAL_GPIO_Init+0x288>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01d      	beq.n	8002a86 <HAL_GPIO_Init+0xae>
          break;
 8002a4a:	e036      	b.n	8002aba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a4c:	4a85      	ldr	r2, [pc, #532]	; (8002c64 <HAL_GPIO_Init+0x28c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_GPIO_Init+0xae>
 8002a52:	4a85      	ldr	r2, [pc, #532]	; (8002c68 <HAL_GPIO_Init+0x290>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d016      	beq.n	8002a86 <HAL_GPIO_Init+0xae>
 8002a58:	4a84      	ldr	r2, [pc, #528]	; (8002c6c <HAL_GPIO_Init+0x294>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0xae>
          break;
 8002a5e:	e02c      	b.n	8002aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	623b      	str	r3, [r7, #32]
          break;
 8002a66:	e028      	b.n	8002aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	623b      	str	r3, [r7, #32]
          break;
 8002a70:	e023      	b.n	8002aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	3308      	adds	r3, #8
 8002a78:	623b      	str	r3, [r7, #32]
          break;
 8002a7a:	e01e      	b.n	8002aba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	330c      	adds	r3, #12
 8002a82:	623b      	str	r3, [r7, #32]
          break;
 8002a84:	e019      	b.n	8002aba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d102      	bne.n	8002a94 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a8e:	2304      	movs	r3, #4
 8002a90:	623b      	str	r3, [r7, #32]
          break;
 8002a92:	e012      	b.n	8002aba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d105      	bne.n	8002aa8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	611a      	str	r2, [r3, #16]
          break;
 8002aa6:	e008      	b.n	8002aba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	615a      	str	r2, [r3, #20]
          break;
 8002ab2:	e002      	b.n	8002aba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
          break;
 8002ab8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2bff      	cmp	r3, #255	; 0xff
 8002abe:	d801      	bhi.n	8002ac4 <HAL_GPIO_Init+0xec>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	e001      	b.n	8002ac8 <HAL_GPIO_Init+0xf0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2bff      	cmp	r3, #255	; 0xff
 8002ace:	d802      	bhi.n	8002ad6 <HAL_GPIO_Init+0xfe>
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	e002      	b.n	8002adc <HAL_GPIO_Init+0x104>
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	3b08      	subs	r3, #8
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	210f      	movs	r1, #15
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	401a      	ands	r2, r3
 8002aee:	6a39      	ldr	r1, [r7, #32]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	431a      	orrs	r2, r3
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 8096 	beq.w	8002c36 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b0a:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <HAL_GPIO_Init+0x298>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	4a58      	ldr	r2, [pc, #352]	; (8002c70 <HAL_GPIO_Init+0x298>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6193      	str	r3, [r2, #24]
 8002b16:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <HAL_GPIO_Init+0x298>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b22:	4a54      	ldr	r2, [pc, #336]	; (8002c74 <HAL_GPIO_Init+0x29c>)
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	089b      	lsrs	r3, r3, #2
 8002b28:	3302      	adds	r3, #2
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	220f      	movs	r2, #15
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <HAL_GPIO_Init+0x2a0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <HAL_GPIO_Init+0x19e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <HAL_GPIO_Init+0x2a4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00d      	beq.n	8002b72 <HAL_GPIO_Init+0x19a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a49      	ldr	r2, [pc, #292]	; (8002c80 <HAL_GPIO_Init+0x2a8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0x196>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a48      	ldr	r2, [pc, #288]	; (8002c84 <HAL_GPIO_Init+0x2ac>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d101      	bne.n	8002b6a <HAL_GPIO_Init+0x192>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_Init+0x1a0>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_Init+0x1a0>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_Init+0x1a0>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_Init+0x1a0>
 8002b76:	2300      	movs	r3, #0
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	f002 0203 	and.w	r2, r2, #3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4093      	lsls	r3, r2
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b88:	493a      	ldr	r1, [pc, #232]	; (8002c74 <HAL_GPIO_Init+0x29c>)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	089b      	lsrs	r3, r3, #2
 8002b8e:	3302      	adds	r3, #2
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4938      	ldr	r1, [pc, #224]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
 8002bae:	e006      	b.n	8002bbe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bb0:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	4933      	ldr	r1, [pc, #204]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d006      	beq.n	8002bd8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bca:	4b2f      	ldr	r3, [pc, #188]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	492e      	ldr	r1, [pc, #184]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
 8002bd6:	e006      	b.n	8002be6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bd8:	4b2b      	ldr	r3, [pc, #172]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	4929      	ldr	r1, [pc, #164]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bf2:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	4924      	ldr	r1, [pc, #144]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
 8002bfe:	e006      	b.n	8002c0e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	491f      	ldr	r1, [pc, #124]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c1a:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	491a      	ldr	r1, [pc, #104]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60cb      	str	r3, [r1, #12]
 8002c26:	e006      	b.n	8002c36 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c28:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	4915      	ldr	r1, [pc, #84]	; (8002c88 <HAL_GPIO_Init+0x2b0>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	3301      	adds	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f aed0 	bne.w	80029ec <HAL_GPIO_Init+0x14>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	372c      	adds	r7, #44	; 0x2c
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	10210000 	.word	0x10210000
 8002c5c:	10110000 	.word	0x10110000
 8002c60:	10120000 	.word	0x10120000
 8002c64:	10310000 	.word	0x10310000
 8002c68:	10320000 	.word	0x10320000
 8002c6c:	10220000 	.word	0x10220000
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40010800 	.word	0x40010800
 8002c7c:	40010c00 	.word	0x40010c00
 8002c80:	40011000 	.word	0x40011000
 8002c84:	40011400 	.word	0x40011400
 8002c88:	40010400 	.word	0x40010400

08002c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	887b      	ldrh	r3, [r7, #2]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e001      	b.n	8002cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002caa:	2300      	movs	r3, #0
 8002cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	807b      	strh	r3, [r7, #2]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cca:	787b      	ldrb	r3, [r7, #1]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd0:	887a      	ldrh	r2, [r7, #2]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cd6:	e003      	b.n	8002ce0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	041a      	lsls	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e26c      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8087 	beq.w	8002e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d0c:	4b92      	ldr	r3, [pc, #584]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d00c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d18:	4b8f      	ldr	r3, [pc, #572]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d112      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
 8002d24:	4b8c      	ldr	r3, [pc, #560]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d06c      	beq.n	8002e18 <HAL_RCC_OscConfig+0x12c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d168      	bne.n	8002e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e246      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x76>
 8002d54:	4b80      	ldr	r3, [pc, #512]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a7f      	ldr	r2, [pc, #508]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e02e      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7a      	ldr	r2, [pc, #488]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b78      	ldr	r3, [pc, #480]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a77      	ldr	r2, [pc, #476]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e01d      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCC_OscConfig+0xbc>
 8002d8e:	4b72      	ldr	r3, [pc, #456]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a71      	ldr	r2, [pc, #452]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e00b      	b.n	8002dc0 <HAL_RCC_OscConfig+0xd4>
 8002da8:	4b6b      	ldr	r3, [pc, #428]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6a      	ldr	r2, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7ff fcf6 	bl	80027b8 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dd0:	f7ff fcf2 	bl	80027b8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1fa      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe4>
 8002dee:	e014      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7ff fce2 	bl	80027b8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df8:	f7ff fcde 	bl	80027b8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e1e6      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0a:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x10c>
 8002e16:	e000      	b.n	8002e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d063      	beq.n	8002eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e26:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d11c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d116      	bne.n	8002e78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d001      	beq.n	8002e62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e1ba      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	4b3d      	ldr	r3, [pc, #244]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4939      	ldr	r1, [pc, #228]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	e03a      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7ff fc97 	bl	80027b8 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8e:	f7ff fc93 	bl	80027b8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e19b      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4927      	ldr	r1, [pc, #156]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec2:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x270>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7ff fc76 	bl	80027b8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7ff fc72 	bl	80027b8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e17a      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d03a      	beq.n	8002f70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f08:	f7ff fc56 	bl	80027b8 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f10:	f7ff fc52 	bl	80027b8 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e15a      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f000 faa8 	bl	8003484 <RCC_Delay>
 8002f34:	e01c      	b.n	8002f70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7ff fc3c 	bl	80027b8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f42:	e00f      	b.n	8002f64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7ff fc38 	bl	80027b8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e140      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	42420000 	.word	0x42420000
 8002f60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f64:	4b9e      	ldr	r3, [pc, #632]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e9      	bne.n	8002f44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80a6 	beq.w	80030ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b97      	ldr	r3, [pc, #604]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b94      	ldr	r3, [pc, #592]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4a93      	ldr	r2, [pc, #588]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	61d3      	str	r3, [r2, #28]
 8002f9a:	4b91      	ldr	r3, [pc, #580]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002faa:	4b8e      	ldr	r3, [pc, #568]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb6:	4b8b      	ldr	r3, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a8a      	ldr	r2, [pc, #552]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7ff fbf9 	bl	80027b8 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7ff fbf5 	bl	80027b8 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0fd      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b81      	ldr	r3, [pc, #516]	; (80031e4 <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x312>
 8002ff0:	4b7b      	ldr	r3, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	4a7a      	ldr	r2, [pc, #488]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6213      	str	r3, [r2, #32]
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003006:	4b76      	ldr	r3, [pc, #472]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a75      	ldr	r2, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b73      	ldr	r3, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a72      	ldr	r2, [pc, #456]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x356>
 8003028:	4b6d      	ldr	r3, [pc, #436]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a6c      	ldr	r2, [pc, #432]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a69      	ldr	r2, [pc, #420]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x36e>
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a66      	ldr	r2, [pc, #408]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	4b64      	ldr	r3, [pc, #400]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a63      	ldr	r2, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003062:	f7ff fba9 	bl	80027b8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7ff fba5 	bl	80027b8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0ab      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x37e>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7ff fb93 	bl	80027b8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7ff fb8f 	bl	80027b8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e095      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4a47      	ldr	r2, [pc, #284]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8081 	beq.w	80031d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d061      	beq.n	80031a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d146      	bne.n	8003176 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ee:	f7ff fb63 	bl	80027b8 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f6:	f7ff fb5f 	bl	80027b8 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e067      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d108      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	492d      	ldr	r1, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a19      	ldr	r1, [r3, #32]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	430b      	orrs	r3, r1
 8003142:	4927      	ldr	r1, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b27      	ldr	r3, [pc, #156]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7ff fb33 	bl	80027b8 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003156:	f7ff fb2f 	bl	80027b8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e037      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x46a>
 8003174:	e02f      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003176:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <HAL_RCC_OscConfig+0x4fc>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7ff fb1c 	bl	80027b8 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003184:	f7ff fb18 	bl	80027b8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e020      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0x498>
 80031a2:	e018      	b.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e013      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_OscConfig+0x4f4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d106      	bne.n	80031d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d001      	beq.n	80031d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42420060 	.word	0x42420060

080031ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0d0      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003200:	4b6a      	ldr	r3, [pc, #424]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d910      	bls.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f023 0207 	bic.w	r2, r3, #7
 8003216:	4965      	ldr	r1, [pc, #404]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800326a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d040      	beq.n	800330c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d115      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e073      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06b      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f023 0203 	bic.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4936      	ldr	r1, [pc, #216]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032dc:	f7ff fa6c 	bl	80027b8 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7ff fa68 	bl	80027b8 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e053      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fa:	4b2d      	ldr	r3, [pc, #180]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 020c 	and.w	r2, r3, #12
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	429a      	cmp	r2, r3
 800330a:	d1eb      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d210      	bcs.n	800333c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 0207 	bic.w	r2, r3, #7
 8003322:	4922      	ldr	r1, [pc, #136]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4601      	mov	r1, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x1c8>)
 800338c:	5cd3      	ldrb	r3, [r2, r3]
 800338e:	fa21 f303 	lsr.w	r3, r1, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1d0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f9ca 	bl	8002734 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40021000 	.word	0x40021000
 80033b4:	080075bc 	.word	0x080075bc
 80033b8:	20000540 	.word	0x20000540
 80033bc:	20000544 	.word	0x20000544

080033c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b490      	push	{r4, r7}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033c6:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033c8:	1d3c      	adds	r4, r7, #4
 80033ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033d0:	4b28      	ldr	r3, [pc, #160]	; (8003474 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	2300      	movs	r3, #0
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033ea:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d003      	beq.n	8003406 <HAL_RCC_GetSysClockFreq+0x46>
 80033fe:	e02d      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003402:	623b      	str	r3, [r7, #32]
      break;
 8003404:	e02d      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	0c9b      	lsrs	r3, r3, #18
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003412:	4413      	add	r3, r2
 8003414:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003418:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	0c5b      	lsrs	r3, r3, #17
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003432:	4413      	add	r3, r2
 8003434:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003438:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_RCC_GetSysClockFreq+0xbc>)
 800343e:	fb02 f203 	mul.w	r2, r2, r3
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	e004      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	623b      	str	r3, [r7, #32]
      break;
 800345a:	e002      	b.n	8003462 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b07      	ldr	r3, [pc, #28]	; (800347c <HAL_RCC_GetSysClockFreq+0xbc>)
 800345e:	623b      	str	r3, [r7, #32]
      break;
 8003460:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003462:	6a3b      	ldr	r3, [r7, #32]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3728      	adds	r7, #40	; 0x28
 8003468:	46bd      	mov	sp, r7
 800346a:	bc90      	pop	{r4, r7}
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	080075a8 	.word	0x080075a8
 8003474:	080075b8 	.word	0x080075b8
 8003478:	40021000 	.word	0x40021000
 800347c:	007a1200 	.word	0x007a1200
 8003480:	003d0900 	.word	0x003d0900

08003484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <RCC_Delay+0x34>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <RCC_Delay+0x38>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034a0:	bf00      	nop
  }
  while (Delay --);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1e5a      	subs	r2, r3, #1
 80034a6:	60fa      	str	r2, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f9      	bne.n	80034a0 <RCC_Delay+0x1c>
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000540 	.word	0x20000540
 80034bc:	10624dd3 	.word	0x10624dd3

080034c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e076      	b.n	80035c0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e2:	d009      	beq.n	80034f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
 80034ea:	e005      	b.n	80034f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe ff9e 	bl	8002454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800352e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357c:	ea42 0103 	orr.w	r1, r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003584:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	0c1a      	lsrs	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f002 0204 	and.w	r2, r2, #4
 800359e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_SPI_Transmit+0x22>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e126      	b.n	8003838 <HAL_SPI_Transmit+0x270>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f2:	f7ff f8e1 	bl	80027b8 <HAL_GetTick>
 80035f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d002      	beq.n	800360e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003608:	2302      	movs	r3, #2
 800360a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800360c:	e10b      	b.n	8003826 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_SPI_Transmit+0x52>
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800361e:	e102      	b.n	8003826 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2203      	movs	r2, #3
 8003624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003666:	d10f      	bne.n	8003688 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003676:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003686:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	d007      	beq.n	80036a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ae:	d14b      	bne.n	8003748 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_SPI_Transmit+0xf6>
 80036b8:	8afb      	ldrh	r3, [r7, #22]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d13e      	bne.n	800373c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	881a      	ldrh	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	1c9a      	adds	r2, r3, #2
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036e2:	e02b      	b.n	800373c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d112      	bne.n	8003718 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	881a      	ldrh	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	1c9a      	adds	r2, r3, #2
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	86da      	strh	r2, [r3, #54]	; 0x36
 8003716:	e011      	b.n	800373c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003718:	f7ff f84e 	bl	80027b8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d803      	bhi.n	8003730 <HAL_SPI_Transmit+0x168>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800372e:	d102      	bne.n	8003736 <HAL_SPI_Transmit+0x16e>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d102      	bne.n	800373c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	77fb      	strb	r3, [r7, #31]
          goto error;
 800373a:	e074      	b.n	8003826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1ce      	bne.n	80036e4 <HAL_SPI_Transmit+0x11c>
 8003746:	e04c      	b.n	80037e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <HAL_SPI_Transmit+0x18e>
 8003750:	8afb      	ldrh	r3, [r7, #22]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d140      	bne.n	80037d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	330c      	adds	r3, #12
 8003760:	7812      	ldrb	r2, [r2, #0]
 8003762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800377c:	e02c      	b.n	80037d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d113      	bne.n	80037b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80037b2:	e011      	b.n	80037d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037b4:	f7ff f800 	bl	80027b8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d803      	bhi.n	80037cc <HAL_SPI_Transmit+0x204>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ca:	d102      	bne.n	80037d2 <HAL_SPI_Transmit+0x20a>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037d6:	e026      	b.n	8003826 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1cd      	bne.n	800377e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	6839      	ldr	r1, [r7, #0]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f8b2 	bl	8003950 <SPI_EndRxTxTransaction>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10a      	bne.n	8003816 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e000      	b.n	8003826 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003824:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003836:	7ffb      	ldrb	r3, [r7, #31]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003850:	f7fe ffb2 	bl	80027b8 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	4413      	add	r3, r2
 800385e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003860:	f7fe ffaa 	bl	80027b8 <HAL_GetTick>
 8003864:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	015b      	lsls	r3, r3, #5
 800386c:	0d1b      	lsrs	r3, r3, #20
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	fb02 f303 	mul.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003876:	e054      	b.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387e:	d050      	beq.n	8003922 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003880:	f7fe ff9a 	bl	80027b8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	429a      	cmp	r2, r3
 800388e:	d902      	bls.n	8003896 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d13d      	bne.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ae:	d111      	bne.n	80038d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b8:	d004      	beq.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d107      	bne.n	80038d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038dc:	d10f      	bne.n	80038fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e017      	b.n	8003942 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3b01      	subs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	bf0c      	ite	eq
 8003932:	2301      	moveq	r3, #1
 8003934:	2300      	movne	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	429a      	cmp	r2, r3
 800393e:	d19b      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000540 	.word	0x20000540

08003950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2200      	movs	r2, #0
 8003964:	2180      	movs	r1, #128	; 0x80
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f7ff ff6a 	bl	8003840 <SPI_WaitFlagStateUntilTimeout>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e000      	b.n	8003984 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e093      	b.n	8003ac8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fe fd97 	bl	80024e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039d0:	f023 0307 	bic.w	r3, r3, #7
 80039d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	4619      	mov	r1, r3
 80039e0:	4610      	mov	r0, r2
 80039e2:	f000 f903 	bl	8003bec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a2c:	f023 030c 	bic.w	r3, r3, #12
 8003a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	011a      	lsls	r2, r3, #4
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	031b      	lsls	r3, r3, #12
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	4313      	orrs	r3, r2
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ae0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ae8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003af0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003af8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d110      	bne.n	8003b22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d102      	bne.n	8003b0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b06:	7b7b      	ldrb	r3, [r7, #13]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d001      	beq.n	8003b10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e068      	b.n	8003be2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b20:	e031      	b.n	8003b86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d110      	bne.n	8003b4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b28:	7bbb      	ldrb	r3, [r7, #14]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b2e:	7b3b      	ldrb	r3, [r7, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e054      	b.n	8003be2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b48:	e01d      	b.n	8003b86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d108      	bne.n	8003b62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b50:	7bbb      	ldrb	r3, [r7, #14]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d105      	bne.n	8003b62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b56:	7b7b      	ldrb	r3, [r7, #13]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d102      	bne.n	8003b62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b5c:	7b3b      	ldrb	r3, [r7, #12]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d001      	beq.n	8003b66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e03d      	b.n	8003be2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_TIM_Encoder_Start+0xc2>
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d008      	beq.n	8003ba2 <HAL_TIM_Encoder_Start+0xd2>
 8003b90:	e00f      	b.n	8003bb2 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2201      	movs	r2, #1
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f888 	bl	8003cb0 <TIM_CCxChannelCmd>
      break;
 8003ba0:	e016      	b.n	8003bd0 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2104      	movs	r1, #4
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 f880 	bl	8003cb0 <TIM_CCxChannelCmd>
      break;
 8003bb0:	e00e      	b.n	8003bd0 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	2100      	movs	r1, #0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f878 	bl	8003cb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	2104      	movs	r1, #4
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 f871 	bl	8003cb0 <TIM_CCxChannelCmd>
      break;
 8003bce:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f042 0201 	orr.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <TIM_Base_SetConfig+0xb8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x30>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x30>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <TIM_Base_SetConfig+0xbc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x30>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a25      	ldr	r2, [pc, #148]	; (8003cac <TIM_Base_SetConfig+0xc0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <TIM_Base_SetConfig+0xb8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <TIM_Base_SetConfig+0x62>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d007      	beq.n	8003c4e <TIM_Base_SetConfig+0x62>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a19      	ldr	r2, [pc, #100]	; (8003ca8 <TIM_Base_SetConfig+0xbc>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d003      	beq.n	8003c4e <TIM_Base_SetConfig+0x62>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a18      	ldr	r2, [pc, #96]	; (8003cac <TIM_Base_SetConfig+0xc0>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d108      	bne.n	8003c60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a07      	ldr	r2, [pc, #28]	; (8003ca4 <TIM_Base_SetConfig+0xb8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d103      	bne.n	8003c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	615a      	str	r2, [r3, #20]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr
 8003ca4:	40012c00 	.word	0x40012c00
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800

08003cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e046      	b.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10c      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800

08003db4 <__errno>:
 8003db4:	4b01      	ldr	r3, [pc, #4]	; (8003dbc <__errno+0x8>)
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	2000054c 	.word	0x2000054c

08003dc0 <__libc_init_array>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	4e0c      	ldr	r6, [pc, #48]	; (8003df8 <__libc_init_array+0x38>)
 8003dc6:	4c0d      	ldr	r4, [pc, #52]	; (8003dfc <__libc_init_array+0x3c>)
 8003dc8:	1ba4      	subs	r4, r4, r6
 8003dca:	10a4      	asrs	r4, r4, #2
 8003dcc:	42a5      	cmp	r5, r4
 8003dce:	d109      	bne.n	8003de4 <__libc_init_array+0x24>
 8003dd0:	f003 fbd2 	bl	8007578 <_init>
 8003dd4:	2500      	movs	r5, #0
 8003dd6:	4e0a      	ldr	r6, [pc, #40]	; (8003e00 <__libc_init_array+0x40>)
 8003dd8:	4c0a      	ldr	r4, [pc, #40]	; (8003e04 <__libc_init_array+0x44>)
 8003dda:	1ba4      	subs	r4, r4, r6
 8003ddc:	10a4      	asrs	r4, r4, #2
 8003dde:	42a5      	cmp	r5, r4
 8003de0:	d105      	bne.n	8003dee <__libc_init_array+0x2e>
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
 8003de4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de8:	4798      	blx	r3
 8003dea:	3501      	adds	r5, #1
 8003dec:	e7ee      	b.n	8003dcc <__libc_init_array+0xc>
 8003dee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003df2:	4798      	blx	r3
 8003df4:	3501      	adds	r5, #1
 8003df6:	e7f2      	b.n	8003dde <__libc_init_array+0x1e>
 8003df8:	080078d8 	.word	0x080078d8
 8003dfc:	080078d8 	.word	0x080078d8
 8003e00:	080078d8 	.word	0x080078d8
 8003e04:	080078dc 	.word	0x080078dc

08003e08 <malloc>:
 8003e08:	4b02      	ldr	r3, [pc, #8]	; (8003e14 <malloc+0xc>)
 8003e0a:	4601      	mov	r1, r0
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	f000 b857 	b.w	8003ec0 <_malloc_r>
 8003e12:	bf00      	nop
 8003e14:	2000054c 	.word	0x2000054c

08003e18 <memset>:
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4402      	add	r2, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <_free_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d043      	beq.n	8003eb8 <_free_r+0x90>
 8003e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e34:	1f0c      	subs	r4, r1, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfb8      	it	lt
 8003e3a:	18e4      	addlt	r4, r4, r3
 8003e3c:	f001 fe7d 	bl	8005b3a <__malloc_lock>
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <_free_r+0x94>)
 8003e42:	6813      	ldr	r3, [r2, #0]
 8003e44:	4610      	mov	r0, r2
 8003e46:	b933      	cbnz	r3, 8003e56 <_free_r+0x2e>
 8003e48:	6063      	str	r3, [r4, #4]
 8003e4a:	6014      	str	r4, [r2, #0]
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e52:	f001 be73 	b.w	8005b3c <__malloc_unlock>
 8003e56:	42a3      	cmp	r3, r4
 8003e58:	d90b      	bls.n	8003e72 <_free_r+0x4a>
 8003e5a:	6821      	ldr	r1, [r4, #0]
 8003e5c:	1862      	adds	r2, r4, r1
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bf01      	itttt	eq
 8003e62:	681a      	ldreq	r2, [r3, #0]
 8003e64:	685b      	ldreq	r3, [r3, #4]
 8003e66:	1852      	addeq	r2, r2, r1
 8003e68:	6022      	streq	r2, [r4, #0]
 8003e6a:	6063      	str	r3, [r4, #4]
 8003e6c:	6004      	str	r4, [r0, #0]
 8003e6e:	e7ed      	b.n	8003e4c <_free_r+0x24>
 8003e70:	4613      	mov	r3, r2
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	b10a      	cbz	r2, 8003e7a <_free_r+0x52>
 8003e76:	42a2      	cmp	r2, r4
 8003e78:	d9fa      	bls.n	8003e70 <_free_r+0x48>
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	1858      	adds	r0, r3, r1
 8003e7e:	42a0      	cmp	r0, r4
 8003e80:	d10b      	bne.n	8003e9a <_free_r+0x72>
 8003e82:	6820      	ldr	r0, [r4, #0]
 8003e84:	4401      	add	r1, r0
 8003e86:	1858      	adds	r0, r3, r1
 8003e88:	4282      	cmp	r2, r0
 8003e8a:	6019      	str	r1, [r3, #0]
 8003e8c:	d1de      	bne.n	8003e4c <_free_r+0x24>
 8003e8e:	6810      	ldr	r0, [r2, #0]
 8003e90:	6852      	ldr	r2, [r2, #4]
 8003e92:	4401      	add	r1, r0
 8003e94:	6019      	str	r1, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	e7d8      	b.n	8003e4c <_free_r+0x24>
 8003e9a:	d902      	bls.n	8003ea2 <_free_r+0x7a>
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	e7d4      	b.n	8003e4c <_free_r+0x24>
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1821      	adds	r1, r4, r0
 8003ea6:	428a      	cmp	r2, r1
 8003ea8:	bf01      	itttt	eq
 8003eaa:	6811      	ldreq	r1, [r2, #0]
 8003eac:	6852      	ldreq	r2, [r2, #4]
 8003eae:	1809      	addeq	r1, r1, r0
 8003eb0:	6021      	streq	r1, [r4, #0]
 8003eb2:	6062      	str	r2, [r4, #4]
 8003eb4:	605c      	str	r4, [r3, #4]
 8003eb6:	e7c9      	b.n	8003e4c <_free_r+0x24>
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000848 	.word	0x20000848

08003ec0 <_malloc_r>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	1ccd      	adds	r5, r1, #3
 8003ec4:	f025 0503 	bic.w	r5, r5, #3
 8003ec8:	3508      	adds	r5, #8
 8003eca:	2d0c      	cmp	r5, #12
 8003ecc:	bf38      	it	cc
 8003ece:	250c      	movcc	r5, #12
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	db01      	blt.n	8003eda <_malloc_r+0x1a>
 8003ed6:	42a9      	cmp	r1, r5
 8003ed8:	d903      	bls.n	8003ee2 <_malloc_r+0x22>
 8003eda:	230c      	movs	r3, #12
 8003edc:	6033      	str	r3, [r6, #0]
 8003ede:	2000      	movs	r0, #0
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
 8003ee2:	f001 fe2a 	bl	8005b3a <__malloc_lock>
 8003ee6:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <_malloc_r+0xac>)
 8003ee8:	6814      	ldr	r4, [r2, #0]
 8003eea:	4621      	mov	r1, r4
 8003eec:	b991      	cbnz	r1, 8003f14 <_malloc_r+0x54>
 8003eee:	4c20      	ldr	r4, [pc, #128]	; (8003f70 <_malloc_r+0xb0>)
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	b91b      	cbnz	r3, 8003efc <_malloc_r+0x3c>
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 fd09 	bl	800490c <_sbrk_r>
 8003efa:	6020      	str	r0, [r4, #0]
 8003efc:	4629      	mov	r1, r5
 8003efe:	4630      	mov	r0, r6
 8003f00:	f000 fd04 	bl	800490c <_sbrk_r>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d124      	bne.n	8003f52 <_malloc_r+0x92>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	f001 fe15 	bl	8005b3c <__malloc_unlock>
 8003f12:	e7e4      	b.n	8003ede <_malloc_r+0x1e>
 8003f14:	680b      	ldr	r3, [r1, #0]
 8003f16:	1b5b      	subs	r3, r3, r5
 8003f18:	d418      	bmi.n	8003f4c <_malloc_r+0x8c>
 8003f1a:	2b0b      	cmp	r3, #11
 8003f1c:	d90f      	bls.n	8003f3e <_malloc_r+0x7e>
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	18cc      	adds	r4, r1, r3
 8003f22:	50cd      	str	r5, [r1, r3]
 8003f24:	4630      	mov	r0, r6
 8003f26:	f001 fe09 	bl	8005b3c <__malloc_unlock>
 8003f2a:	f104 000b 	add.w	r0, r4, #11
 8003f2e:	1d23      	adds	r3, r4, #4
 8003f30:	f020 0007 	bic.w	r0, r0, #7
 8003f34:	1ac3      	subs	r3, r0, r3
 8003f36:	d0d3      	beq.n	8003ee0 <_malloc_r+0x20>
 8003f38:	425a      	negs	r2, r3
 8003f3a:	50e2      	str	r2, [r4, r3]
 8003f3c:	e7d0      	b.n	8003ee0 <_malloc_r+0x20>
 8003f3e:	684b      	ldr	r3, [r1, #4]
 8003f40:	428c      	cmp	r4, r1
 8003f42:	bf16      	itet	ne
 8003f44:	6063      	strne	r3, [r4, #4]
 8003f46:	6013      	streq	r3, [r2, #0]
 8003f48:	460c      	movne	r4, r1
 8003f4a:	e7eb      	b.n	8003f24 <_malloc_r+0x64>
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	6849      	ldr	r1, [r1, #4]
 8003f50:	e7cc      	b.n	8003eec <_malloc_r+0x2c>
 8003f52:	1cc4      	adds	r4, r0, #3
 8003f54:	f024 0403 	bic.w	r4, r4, #3
 8003f58:	42a0      	cmp	r0, r4
 8003f5a:	d005      	beq.n	8003f68 <_malloc_r+0xa8>
 8003f5c:	1a21      	subs	r1, r4, r0
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f000 fcd4 	bl	800490c <_sbrk_r>
 8003f64:	3001      	adds	r0, #1
 8003f66:	d0cf      	beq.n	8003f08 <_malloc_r+0x48>
 8003f68:	6025      	str	r5, [r4, #0]
 8003f6a:	e7db      	b.n	8003f24 <_malloc_r+0x64>
 8003f6c:	20000848 	.word	0x20000848
 8003f70:	2000084c 	.word	0x2000084c

08003f74 <__cvt>:
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7a:	461e      	mov	r6, r3
 8003f7c:	bfbb      	ittet	lt
 8003f7e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f82:	461e      	movlt	r6, r3
 8003f84:	2300      	movge	r3, #0
 8003f86:	232d      	movlt	r3, #45	; 0x2d
 8003f88:	b088      	sub	sp, #32
 8003f8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f8c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003f90:	f027 0720 	bic.w	r7, r7, #32
 8003f94:	2f46      	cmp	r7, #70	; 0x46
 8003f96:	4614      	mov	r4, r2
 8003f98:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f9a:	700b      	strb	r3, [r1, #0]
 8003f9c:	d004      	beq.n	8003fa8 <__cvt+0x34>
 8003f9e:	2f45      	cmp	r7, #69	; 0x45
 8003fa0:	d100      	bne.n	8003fa4 <__cvt+0x30>
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e000      	b.n	8003faa <__cvt+0x36>
 8003fa8:	2303      	movs	r3, #3
 8003faa:	aa07      	add	r2, sp, #28
 8003fac:	9204      	str	r2, [sp, #16]
 8003fae:	aa06      	add	r2, sp, #24
 8003fb0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003fb4:	e9cd 3500 	strd	r3, r5, [sp]
 8003fb8:	4622      	mov	r2, r4
 8003fba:	4633      	mov	r3, r6
 8003fbc:	f000 fe04 	bl	8004bc8 <_dtoa_r>
 8003fc0:	2f47      	cmp	r7, #71	; 0x47
 8003fc2:	4680      	mov	r8, r0
 8003fc4:	d102      	bne.n	8003fcc <__cvt+0x58>
 8003fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fc8:	07db      	lsls	r3, r3, #31
 8003fca:	d526      	bpl.n	800401a <__cvt+0xa6>
 8003fcc:	2f46      	cmp	r7, #70	; 0x46
 8003fce:	eb08 0905 	add.w	r9, r8, r5
 8003fd2:	d111      	bne.n	8003ff8 <__cvt+0x84>
 8003fd4:	f898 3000 	ldrb.w	r3, [r8]
 8003fd8:	2b30      	cmp	r3, #48	; 0x30
 8003fda:	d10a      	bne.n	8003ff2 <__cvt+0x7e>
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	f7fc fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8003fe8:	b918      	cbnz	r0, 8003ff2 <__cvt+0x7e>
 8003fea:	f1c5 0501 	rsb	r5, r5, #1
 8003fee:	f8ca 5000 	str.w	r5, [sl]
 8003ff2:	f8da 3000 	ldr.w	r3, [sl]
 8003ff6:	4499      	add	r9, r3
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	4631      	mov	r1, r6
 8004000:	f7fc fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8004004:	b938      	cbnz	r0, 8004016 <__cvt+0xa2>
 8004006:	2230      	movs	r2, #48	; 0x30
 8004008:	9b07      	ldr	r3, [sp, #28]
 800400a:	454b      	cmp	r3, r9
 800400c:	d205      	bcs.n	800401a <__cvt+0xa6>
 800400e:	1c59      	adds	r1, r3, #1
 8004010:	9107      	str	r1, [sp, #28]
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e7f8      	b.n	8004008 <__cvt+0x94>
 8004016:	f8cd 901c 	str.w	r9, [sp, #28]
 800401a:	4640      	mov	r0, r8
 800401c:	9b07      	ldr	r3, [sp, #28]
 800401e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004020:	eba3 0308 	sub.w	r3, r3, r8
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	b008      	add	sp, #32
 8004028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800402c <__exponent>:
 800402c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800402e:	2900      	cmp	r1, #0
 8004030:	bfb4      	ite	lt
 8004032:	232d      	movlt	r3, #45	; 0x2d
 8004034:	232b      	movge	r3, #43	; 0x2b
 8004036:	4604      	mov	r4, r0
 8004038:	bfb8      	it	lt
 800403a:	4249      	neglt	r1, r1
 800403c:	2909      	cmp	r1, #9
 800403e:	f804 2b02 	strb.w	r2, [r4], #2
 8004042:	7043      	strb	r3, [r0, #1]
 8004044:	dd21      	ble.n	800408a <__exponent+0x5e>
 8004046:	f10d 0307 	add.w	r3, sp, #7
 800404a:	461f      	mov	r7, r3
 800404c:	260a      	movs	r6, #10
 800404e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004052:	fb06 1115 	mls	r1, r6, r5, r1
 8004056:	2d09      	cmp	r5, #9
 8004058:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800405c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004060:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004064:	4629      	mov	r1, r5
 8004066:	dc09      	bgt.n	800407c <__exponent+0x50>
 8004068:	3130      	adds	r1, #48	; 0x30
 800406a:	3b02      	subs	r3, #2
 800406c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004070:	42bb      	cmp	r3, r7
 8004072:	4622      	mov	r2, r4
 8004074:	d304      	bcc.n	8004080 <__exponent+0x54>
 8004076:	1a10      	subs	r0, r2, r0
 8004078:	b003      	add	sp, #12
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407c:	4613      	mov	r3, r2
 800407e:	e7e6      	b.n	800404e <__exponent+0x22>
 8004080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004084:	f804 2b01 	strb.w	r2, [r4], #1
 8004088:	e7f2      	b.n	8004070 <__exponent+0x44>
 800408a:	2330      	movs	r3, #48	; 0x30
 800408c:	4419      	add	r1, r3
 800408e:	7083      	strb	r3, [r0, #2]
 8004090:	1d02      	adds	r2, r0, #4
 8004092:	70c1      	strb	r1, [r0, #3]
 8004094:	e7ef      	b.n	8004076 <__exponent+0x4a>
	...

08004098 <_printf_float>:
 8004098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409c:	b091      	sub	sp, #68	; 0x44
 800409e:	460c      	mov	r4, r1
 80040a0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80040a2:	4693      	mov	fp, r2
 80040a4:	461e      	mov	r6, r3
 80040a6:	4605      	mov	r5, r0
 80040a8:	f001 fcbc 	bl	8005a24 <_localeconv_r>
 80040ac:	6803      	ldr	r3, [r0, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	9309      	str	r3, [sp, #36]	; 0x24
 80040b2:	f7fc f84d 	bl	8000150 <strlen>
 80040b6:	2300      	movs	r3, #0
 80040b8:	930e      	str	r3, [sp, #56]	; 0x38
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	900a      	str	r0, [sp, #40]	; 0x28
 80040be:	3307      	adds	r3, #7
 80040c0:	f023 0307 	bic.w	r3, r3, #7
 80040c4:	f103 0208 	add.w	r2, r3, #8
 80040c8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80040cc:	f8d4 a000 	ldr.w	sl, [r4]
 80040d0:	603a      	str	r2, [r7, #0]
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040da:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80040de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80040e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040e8:	4ba6      	ldr	r3, [pc, #664]	; (8004384 <_printf_float+0x2ec>)
 80040ea:	4638      	mov	r0, r7
 80040ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040ee:	f7fc fc8d 	bl	8000a0c <__aeabi_dcmpun>
 80040f2:	bb68      	cbnz	r0, 8004150 <_printf_float+0xb8>
 80040f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040f8:	4ba2      	ldr	r3, [pc, #648]	; (8004384 <_printf_float+0x2ec>)
 80040fa:	4638      	mov	r0, r7
 80040fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040fe:	f7fc fc67 	bl	80009d0 <__aeabi_dcmple>
 8004102:	bb28      	cbnz	r0, 8004150 <_printf_float+0xb8>
 8004104:	2200      	movs	r2, #0
 8004106:	2300      	movs	r3, #0
 8004108:	4638      	mov	r0, r7
 800410a:	4649      	mov	r1, r9
 800410c:	f7fc fc56 	bl	80009bc <__aeabi_dcmplt>
 8004110:	b110      	cbz	r0, 8004118 <_printf_float+0x80>
 8004112:	232d      	movs	r3, #45	; 0x2d
 8004114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004118:	4f9b      	ldr	r7, [pc, #620]	; (8004388 <_printf_float+0x2f0>)
 800411a:	4b9c      	ldr	r3, [pc, #624]	; (800438c <_printf_float+0x2f4>)
 800411c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004120:	bf98      	it	ls
 8004122:	461f      	movls	r7, r3
 8004124:	2303      	movs	r3, #3
 8004126:	f04f 0900 	mov.w	r9, #0
 800412a:	6123      	str	r3, [r4, #16]
 800412c:	f02a 0304 	bic.w	r3, sl, #4
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	9600      	str	r6, [sp, #0]
 8004134:	465b      	mov	r3, fp
 8004136:	aa0f      	add	r2, sp, #60	; 0x3c
 8004138:	4621      	mov	r1, r4
 800413a:	4628      	mov	r0, r5
 800413c:	f000 f9e2 	bl	8004504 <_printf_common>
 8004140:	3001      	adds	r0, #1
 8004142:	f040 8090 	bne.w	8004266 <_printf_float+0x1ce>
 8004146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800414a:	b011      	add	sp, #68	; 0x44
 800414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004150:	463a      	mov	r2, r7
 8004152:	464b      	mov	r3, r9
 8004154:	4638      	mov	r0, r7
 8004156:	4649      	mov	r1, r9
 8004158:	f7fc fc58 	bl	8000a0c <__aeabi_dcmpun>
 800415c:	b110      	cbz	r0, 8004164 <_printf_float+0xcc>
 800415e:	4f8c      	ldr	r7, [pc, #560]	; (8004390 <_printf_float+0x2f8>)
 8004160:	4b8c      	ldr	r3, [pc, #560]	; (8004394 <_printf_float+0x2fc>)
 8004162:	e7db      	b.n	800411c <_printf_float+0x84>
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800416a:	1c59      	adds	r1, r3, #1
 800416c:	a80d      	add	r0, sp, #52	; 0x34
 800416e:	a90e      	add	r1, sp, #56	; 0x38
 8004170:	d140      	bne.n	80041f4 <_printf_float+0x15c>
 8004172:	2306      	movs	r3, #6
 8004174:	6063      	str	r3, [r4, #4]
 8004176:	f04f 0c00 	mov.w	ip, #0
 800417a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800417e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004182:	6863      	ldr	r3, [r4, #4]
 8004184:	6022      	str	r2, [r4, #0]
 8004186:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	463a      	mov	r2, r7
 800418e:	464b      	mov	r3, r9
 8004190:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004194:	4628      	mov	r0, r5
 8004196:	f7ff feed 	bl	8003f74 <__cvt>
 800419a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800419e:	2b47      	cmp	r3, #71	; 0x47
 80041a0:	4607      	mov	r7, r0
 80041a2:	d109      	bne.n	80041b8 <_printf_float+0x120>
 80041a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041a6:	1cd8      	adds	r0, r3, #3
 80041a8:	db02      	blt.n	80041b0 <_printf_float+0x118>
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	4293      	cmp	r3, r2
 80041ae:	dd47      	ble.n	8004240 <_printf_float+0x1a8>
 80041b0:	f1a8 0802 	sub.w	r8, r8, #2
 80041b4:	fa5f f888 	uxtb.w	r8, r8
 80041b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80041bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041be:	d824      	bhi.n	800420a <_printf_float+0x172>
 80041c0:	3901      	subs	r1, #1
 80041c2:	4642      	mov	r2, r8
 80041c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041c8:	910d      	str	r1, [sp, #52]	; 0x34
 80041ca:	f7ff ff2f 	bl	800402c <__exponent>
 80041ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041d0:	4681      	mov	r9, r0
 80041d2:	1813      	adds	r3, r2, r0
 80041d4:	2a01      	cmp	r2, #1
 80041d6:	6123      	str	r3, [r4, #16]
 80041d8:	dc02      	bgt.n	80041e0 <_printf_float+0x148>
 80041da:	6822      	ldr	r2, [r4, #0]
 80041dc:	07d1      	lsls	r1, r2, #31
 80041de:	d501      	bpl.n	80041e4 <_printf_float+0x14c>
 80041e0:	3301      	adds	r3, #1
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0a2      	beq.n	8004132 <_printf_float+0x9a>
 80041ec:	232d      	movs	r3, #45	; 0x2d
 80041ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041f2:	e79e      	b.n	8004132 <_printf_float+0x9a>
 80041f4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80041f8:	f000 816e 	beq.w	80044d8 <_printf_float+0x440>
 80041fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004200:	d1b9      	bne.n	8004176 <_printf_float+0xde>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1b7      	bne.n	8004176 <_printf_float+0xde>
 8004206:	2301      	movs	r3, #1
 8004208:	e7b4      	b.n	8004174 <_printf_float+0xdc>
 800420a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800420e:	d119      	bne.n	8004244 <_printf_float+0x1ac>
 8004210:	2900      	cmp	r1, #0
 8004212:	6863      	ldr	r3, [r4, #4]
 8004214:	dd0c      	ble.n	8004230 <_printf_float+0x198>
 8004216:	6121      	str	r1, [r4, #16]
 8004218:	b913      	cbnz	r3, 8004220 <_printf_float+0x188>
 800421a:	6822      	ldr	r2, [r4, #0]
 800421c:	07d2      	lsls	r2, r2, #31
 800421e:	d502      	bpl.n	8004226 <_printf_float+0x18e>
 8004220:	3301      	adds	r3, #1
 8004222:	440b      	add	r3, r1
 8004224:	6123      	str	r3, [r4, #16]
 8004226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004228:	f04f 0900 	mov.w	r9, #0
 800422c:	65a3      	str	r3, [r4, #88]	; 0x58
 800422e:	e7d9      	b.n	80041e4 <_printf_float+0x14c>
 8004230:	b913      	cbnz	r3, 8004238 <_printf_float+0x1a0>
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	07d0      	lsls	r0, r2, #31
 8004236:	d501      	bpl.n	800423c <_printf_float+0x1a4>
 8004238:	3302      	adds	r3, #2
 800423a:	e7f3      	b.n	8004224 <_printf_float+0x18c>
 800423c:	2301      	movs	r3, #1
 800423e:	e7f1      	b.n	8004224 <_printf_float+0x18c>
 8004240:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004244:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004248:	4293      	cmp	r3, r2
 800424a:	db05      	blt.n	8004258 <_printf_float+0x1c0>
 800424c:	6822      	ldr	r2, [r4, #0]
 800424e:	6123      	str	r3, [r4, #16]
 8004250:	07d1      	lsls	r1, r2, #31
 8004252:	d5e8      	bpl.n	8004226 <_printf_float+0x18e>
 8004254:	3301      	adds	r3, #1
 8004256:	e7e5      	b.n	8004224 <_printf_float+0x18c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	bfcc      	ite	gt
 800425c:	2301      	movgt	r3, #1
 800425e:	f1c3 0302 	rsble	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	e7de      	b.n	8004224 <_printf_float+0x18c>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	055a      	lsls	r2, r3, #21
 800426a:	d407      	bmi.n	800427c <_printf_float+0x1e4>
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	463a      	mov	r2, r7
 8004270:	4659      	mov	r1, fp
 8004272:	4628      	mov	r0, r5
 8004274:	47b0      	blx	r6
 8004276:	3001      	adds	r0, #1
 8004278:	d129      	bne.n	80042ce <_printf_float+0x236>
 800427a:	e764      	b.n	8004146 <_printf_float+0xae>
 800427c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004280:	f240 80d7 	bls.w	8004432 <_printf_float+0x39a>
 8004284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004288:	2200      	movs	r2, #0
 800428a:	2300      	movs	r3, #0
 800428c:	f7fc fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8004290:	b388      	cbz	r0, 80042f6 <_printf_float+0x25e>
 8004292:	2301      	movs	r3, #1
 8004294:	4a40      	ldr	r2, [pc, #256]	; (8004398 <_printf_float+0x300>)
 8004296:	4659      	mov	r1, fp
 8004298:	4628      	mov	r0, r5
 800429a:	47b0      	blx	r6
 800429c:	3001      	adds	r0, #1
 800429e:	f43f af52 	beq.w	8004146 <_printf_float+0xae>
 80042a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042a6:	429a      	cmp	r2, r3
 80042a8:	db02      	blt.n	80042b0 <_printf_float+0x218>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	07d8      	lsls	r0, r3, #31
 80042ae:	d50e      	bpl.n	80042ce <_printf_float+0x236>
 80042b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042b4:	4659      	mov	r1, fp
 80042b6:	4628      	mov	r0, r5
 80042b8:	47b0      	blx	r6
 80042ba:	3001      	adds	r0, #1
 80042bc:	f43f af43 	beq.w	8004146 <_printf_float+0xae>
 80042c0:	2700      	movs	r7, #0
 80042c2:	f104 081a 	add.w	r8, r4, #26
 80042c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042c8:	3b01      	subs	r3, #1
 80042ca:	42bb      	cmp	r3, r7
 80042cc:	dc09      	bgt.n	80042e2 <_printf_float+0x24a>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	079f      	lsls	r7, r3, #30
 80042d2:	f100 80fd 	bmi.w	80044d0 <_printf_float+0x438>
 80042d6:	68e0      	ldr	r0, [r4, #12]
 80042d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042da:	4298      	cmp	r0, r3
 80042dc:	bfb8      	it	lt
 80042de:	4618      	movlt	r0, r3
 80042e0:	e733      	b.n	800414a <_printf_float+0xb2>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4642      	mov	r2, r8
 80042e6:	4659      	mov	r1, fp
 80042e8:	4628      	mov	r0, r5
 80042ea:	47b0      	blx	r6
 80042ec:	3001      	adds	r0, #1
 80042ee:	f43f af2a 	beq.w	8004146 <_printf_float+0xae>
 80042f2:	3701      	adds	r7, #1
 80042f4:	e7e7      	b.n	80042c6 <_printf_float+0x22e>
 80042f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dc2b      	bgt.n	8004354 <_printf_float+0x2bc>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4a26      	ldr	r2, [pc, #152]	; (8004398 <_printf_float+0x300>)
 8004300:	4659      	mov	r1, fp
 8004302:	4628      	mov	r0, r5
 8004304:	47b0      	blx	r6
 8004306:	3001      	adds	r0, #1
 8004308:	f43f af1d 	beq.w	8004146 <_printf_float+0xae>
 800430c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800430e:	b923      	cbnz	r3, 800431a <_printf_float+0x282>
 8004310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004312:	b913      	cbnz	r3, 800431a <_printf_float+0x282>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	07d9      	lsls	r1, r3, #31
 8004318:	d5d9      	bpl.n	80042ce <_printf_float+0x236>
 800431a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800431e:	4659      	mov	r1, fp
 8004320:	4628      	mov	r0, r5
 8004322:	47b0      	blx	r6
 8004324:	3001      	adds	r0, #1
 8004326:	f43f af0e 	beq.w	8004146 <_printf_float+0xae>
 800432a:	f04f 0800 	mov.w	r8, #0
 800432e:	f104 091a 	add.w	r9, r4, #26
 8004332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004334:	425b      	negs	r3, r3
 8004336:	4543      	cmp	r3, r8
 8004338:	dc01      	bgt.n	800433e <_printf_float+0x2a6>
 800433a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800433c:	e797      	b.n	800426e <_printf_float+0x1d6>
 800433e:	2301      	movs	r3, #1
 8004340:	464a      	mov	r2, r9
 8004342:	4659      	mov	r1, fp
 8004344:	4628      	mov	r0, r5
 8004346:	47b0      	blx	r6
 8004348:	3001      	adds	r0, #1
 800434a:	f43f aefc 	beq.w	8004146 <_printf_float+0xae>
 800434e:	f108 0801 	add.w	r8, r8, #1
 8004352:	e7ee      	b.n	8004332 <_printf_float+0x29a>
 8004354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004358:	429a      	cmp	r2, r3
 800435a:	bfa8      	it	ge
 800435c:	461a      	movge	r2, r3
 800435e:	2a00      	cmp	r2, #0
 8004360:	4690      	mov	r8, r2
 8004362:	dd07      	ble.n	8004374 <_printf_float+0x2dc>
 8004364:	4613      	mov	r3, r2
 8004366:	4659      	mov	r1, fp
 8004368:	463a      	mov	r2, r7
 800436a:	4628      	mov	r0, r5
 800436c:	47b0      	blx	r6
 800436e:	3001      	adds	r0, #1
 8004370:	f43f aee9 	beq.w	8004146 <_printf_float+0xae>
 8004374:	f104 031a 	add.w	r3, r4, #26
 8004378:	f04f 0a00 	mov.w	sl, #0
 800437c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004380:	930b      	str	r3, [sp, #44]	; 0x2c
 8004382:	e015      	b.n	80043b0 <_printf_float+0x318>
 8004384:	7fefffff 	.word	0x7fefffff
 8004388:	080075d4 	.word	0x080075d4
 800438c:	080075d0 	.word	0x080075d0
 8004390:	080075dc 	.word	0x080075dc
 8004394:	080075d8 	.word	0x080075d8
 8004398:	080075e0 	.word	0x080075e0
 800439c:	2301      	movs	r3, #1
 800439e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043a0:	4659      	mov	r1, fp
 80043a2:	4628      	mov	r0, r5
 80043a4:	47b0      	blx	r6
 80043a6:	3001      	adds	r0, #1
 80043a8:	f43f aecd 	beq.w	8004146 <_printf_float+0xae>
 80043ac:	f10a 0a01 	add.w	sl, sl, #1
 80043b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80043b4:	eba9 0308 	sub.w	r3, r9, r8
 80043b8:	4553      	cmp	r3, sl
 80043ba:	dcef      	bgt.n	800439c <_printf_float+0x304>
 80043bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043c0:	429a      	cmp	r2, r3
 80043c2:	444f      	add	r7, r9
 80043c4:	db14      	blt.n	80043f0 <_printf_float+0x358>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07da      	lsls	r2, r3, #31
 80043ca:	d411      	bmi.n	80043f0 <_printf_float+0x358>
 80043cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043d0:	eba3 0209 	sub.w	r2, r3, r9
 80043d4:	eba3 0901 	sub.w	r9, r3, r1
 80043d8:	4591      	cmp	r9, r2
 80043da:	bfa8      	it	ge
 80043dc:	4691      	movge	r9, r2
 80043de:	f1b9 0f00 	cmp.w	r9, #0
 80043e2:	dc0d      	bgt.n	8004400 <_printf_float+0x368>
 80043e4:	2700      	movs	r7, #0
 80043e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043ea:	f104 081a 	add.w	r8, r4, #26
 80043ee:	e018      	b.n	8004422 <_printf_float+0x38a>
 80043f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043f4:	4659      	mov	r1, fp
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b0      	blx	r6
 80043fa:	3001      	adds	r0, #1
 80043fc:	d1e6      	bne.n	80043cc <_printf_float+0x334>
 80043fe:	e6a2      	b.n	8004146 <_printf_float+0xae>
 8004400:	464b      	mov	r3, r9
 8004402:	463a      	mov	r2, r7
 8004404:	4659      	mov	r1, fp
 8004406:	4628      	mov	r0, r5
 8004408:	47b0      	blx	r6
 800440a:	3001      	adds	r0, #1
 800440c:	d1ea      	bne.n	80043e4 <_printf_float+0x34c>
 800440e:	e69a      	b.n	8004146 <_printf_float+0xae>
 8004410:	2301      	movs	r3, #1
 8004412:	4642      	mov	r2, r8
 8004414:	4659      	mov	r1, fp
 8004416:	4628      	mov	r0, r5
 8004418:	47b0      	blx	r6
 800441a:	3001      	adds	r0, #1
 800441c:	f43f ae93 	beq.w	8004146 <_printf_float+0xae>
 8004420:	3701      	adds	r7, #1
 8004422:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004426:	1a9b      	subs	r3, r3, r2
 8004428:	eba3 0309 	sub.w	r3, r3, r9
 800442c:	42bb      	cmp	r3, r7
 800442e:	dcef      	bgt.n	8004410 <_printf_float+0x378>
 8004430:	e74d      	b.n	80042ce <_printf_float+0x236>
 8004432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004434:	2a01      	cmp	r2, #1
 8004436:	dc01      	bgt.n	800443c <_printf_float+0x3a4>
 8004438:	07db      	lsls	r3, r3, #31
 800443a:	d538      	bpl.n	80044ae <_printf_float+0x416>
 800443c:	2301      	movs	r3, #1
 800443e:	463a      	mov	r2, r7
 8004440:	4659      	mov	r1, fp
 8004442:	4628      	mov	r0, r5
 8004444:	47b0      	blx	r6
 8004446:	3001      	adds	r0, #1
 8004448:	f43f ae7d 	beq.w	8004146 <_printf_float+0xae>
 800444c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004450:	4659      	mov	r1, fp
 8004452:	4628      	mov	r0, r5
 8004454:	47b0      	blx	r6
 8004456:	3001      	adds	r0, #1
 8004458:	f107 0701 	add.w	r7, r7, #1
 800445c:	f43f ae73 	beq.w	8004146 <_printf_float+0xae>
 8004460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004464:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004466:	2200      	movs	r2, #0
 8004468:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800446c:	2300      	movs	r3, #0
 800446e:	f7fc fa9b 	bl	80009a8 <__aeabi_dcmpeq>
 8004472:	b9c0      	cbnz	r0, 80044a6 <_printf_float+0x40e>
 8004474:	4643      	mov	r3, r8
 8004476:	463a      	mov	r2, r7
 8004478:	4659      	mov	r1, fp
 800447a:	4628      	mov	r0, r5
 800447c:	47b0      	blx	r6
 800447e:	3001      	adds	r0, #1
 8004480:	d10d      	bne.n	800449e <_printf_float+0x406>
 8004482:	e660      	b.n	8004146 <_printf_float+0xae>
 8004484:	2301      	movs	r3, #1
 8004486:	4642      	mov	r2, r8
 8004488:	4659      	mov	r1, fp
 800448a:	4628      	mov	r0, r5
 800448c:	47b0      	blx	r6
 800448e:	3001      	adds	r0, #1
 8004490:	f43f ae59 	beq.w	8004146 <_printf_float+0xae>
 8004494:	3701      	adds	r7, #1
 8004496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004498:	3b01      	subs	r3, #1
 800449a:	42bb      	cmp	r3, r7
 800449c:	dcf2      	bgt.n	8004484 <_printf_float+0x3ec>
 800449e:	464b      	mov	r3, r9
 80044a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80044a4:	e6e4      	b.n	8004270 <_printf_float+0x1d8>
 80044a6:	2700      	movs	r7, #0
 80044a8:	f104 081a 	add.w	r8, r4, #26
 80044ac:	e7f3      	b.n	8004496 <_printf_float+0x3fe>
 80044ae:	2301      	movs	r3, #1
 80044b0:	e7e1      	b.n	8004476 <_printf_float+0x3de>
 80044b2:	2301      	movs	r3, #1
 80044b4:	4642      	mov	r2, r8
 80044b6:	4659      	mov	r1, fp
 80044b8:	4628      	mov	r0, r5
 80044ba:	47b0      	blx	r6
 80044bc:	3001      	adds	r0, #1
 80044be:	f43f ae42 	beq.w	8004146 <_printf_float+0xae>
 80044c2:	3701      	adds	r7, #1
 80044c4:	68e3      	ldr	r3, [r4, #12]
 80044c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044c8:	1a9b      	subs	r3, r3, r2
 80044ca:	42bb      	cmp	r3, r7
 80044cc:	dcf1      	bgt.n	80044b2 <_printf_float+0x41a>
 80044ce:	e702      	b.n	80042d6 <_printf_float+0x23e>
 80044d0:	2700      	movs	r7, #0
 80044d2:	f104 0819 	add.w	r8, r4, #25
 80044d6:	e7f5      	b.n	80044c4 <_printf_float+0x42c>
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f43f ae94 	beq.w	8004206 <_printf_float+0x16e>
 80044de:	f04f 0c00 	mov.w	ip, #0
 80044e2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80044e6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80044ea:	6022      	str	r2, [r4, #0]
 80044ec:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80044f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	463a      	mov	r2, r7
 80044f8:	464b      	mov	r3, r9
 80044fa:	4628      	mov	r0, r5
 80044fc:	f7ff fd3a 	bl	8003f74 <__cvt>
 8004500:	4607      	mov	r7, r0
 8004502:	e64f      	b.n	80041a4 <_printf_float+0x10c>

08004504 <_printf_common>:
 8004504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004508:	4691      	mov	r9, r2
 800450a:	461f      	mov	r7, r3
 800450c:	688a      	ldr	r2, [r1, #8]
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	4606      	mov	r6, r0
 8004512:	4293      	cmp	r3, r2
 8004514:	bfb8      	it	lt
 8004516:	4613      	movlt	r3, r2
 8004518:	f8c9 3000 	str.w	r3, [r9]
 800451c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004520:	460c      	mov	r4, r1
 8004522:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004526:	b112      	cbz	r2, 800452e <_printf_common+0x2a>
 8004528:	3301      	adds	r3, #1
 800452a:	f8c9 3000 	str.w	r3, [r9]
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	0699      	lsls	r1, r3, #26
 8004532:	bf42      	ittt	mi
 8004534:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004538:	3302      	addmi	r3, #2
 800453a:	f8c9 3000 	strmi.w	r3, [r9]
 800453e:	6825      	ldr	r5, [r4, #0]
 8004540:	f015 0506 	ands.w	r5, r5, #6
 8004544:	d107      	bne.n	8004556 <_printf_common+0x52>
 8004546:	f104 0a19 	add.w	sl, r4, #25
 800454a:	68e3      	ldr	r3, [r4, #12]
 800454c:	f8d9 2000 	ldr.w	r2, [r9]
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	42ab      	cmp	r3, r5
 8004554:	dc29      	bgt.n	80045aa <_printf_common+0xa6>
 8004556:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800455a:	6822      	ldr	r2, [r4, #0]
 800455c:	3300      	adds	r3, #0
 800455e:	bf18      	it	ne
 8004560:	2301      	movne	r3, #1
 8004562:	0692      	lsls	r2, r2, #26
 8004564:	d42e      	bmi.n	80045c4 <_printf_common+0xc0>
 8004566:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800456a:	4639      	mov	r1, r7
 800456c:	4630      	mov	r0, r6
 800456e:	47c0      	blx	r8
 8004570:	3001      	adds	r0, #1
 8004572:	d021      	beq.n	80045b8 <_printf_common+0xb4>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	68e5      	ldr	r5, [r4, #12]
 8004578:	f003 0306 	and.w	r3, r3, #6
 800457c:	2b04      	cmp	r3, #4
 800457e:	bf18      	it	ne
 8004580:	2500      	movne	r5, #0
 8004582:	f8d9 2000 	ldr.w	r2, [r9]
 8004586:	f04f 0900 	mov.w	r9, #0
 800458a:	bf08      	it	eq
 800458c:	1aad      	subeq	r5, r5, r2
 800458e:	68a3      	ldr	r3, [r4, #8]
 8004590:	6922      	ldr	r2, [r4, #16]
 8004592:	bf08      	it	eq
 8004594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004598:	4293      	cmp	r3, r2
 800459a:	bfc4      	itt	gt
 800459c:	1a9b      	subgt	r3, r3, r2
 800459e:	18ed      	addgt	r5, r5, r3
 80045a0:	341a      	adds	r4, #26
 80045a2:	454d      	cmp	r5, r9
 80045a4:	d11a      	bne.n	80045dc <_printf_common+0xd8>
 80045a6:	2000      	movs	r0, #0
 80045a8:	e008      	b.n	80045bc <_printf_common+0xb8>
 80045aa:	2301      	movs	r3, #1
 80045ac:	4652      	mov	r2, sl
 80045ae:	4639      	mov	r1, r7
 80045b0:	4630      	mov	r0, r6
 80045b2:	47c0      	blx	r8
 80045b4:	3001      	adds	r0, #1
 80045b6:	d103      	bne.n	80045c0 <_printf_common+0xbc>
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c0:	3501      	adds	r5, #1
 80045c2:	e7c2      	b.n	800454a <_printf_common+0x46>
 80045c4:	2030      	movs	r0, #48	; 0x30
 80045c6:	18e1      	adds	r1, r4, r3
 80045c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045d2:	4422      	add	r2, r4
 80045d4:	3302      	adds	r3, #2
 80045d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045da:	e7c4      	b.n	8004566 <_printf_common+0x62>
 80045dc:	2301      	movs	r3, #1
 80045de:	4622      	mov	r2, r4
 80045e0:	4639      	mov	r1, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	47c0      	blx	r8
 80045e6:	3001      	adds	r0, #1
 80045e8:	d0e6      	beq.n	80045b8 <_printf_common+0xb4>
 80045ea:	f109 0901 	add.w	r9, r9, #1
 80045ee:	e7d8      	b.n	80045a2 <_printf_common+0x9e>

080045f0 <_printf_i>:
 80045f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045f8:	460c      	mov	r4, r1
 80045fa:	7e09      	ldrb	r1, [r1, #24]
 80045fc:	b085      	sub	sp, #20
 80045fe:	296e      	cmp	r1, #110	; 0x6e
 8004600:	4617      	mov	r7, r2
 8004602:	4606      	mov	r6, r0
 8004604:	4698      	mov	r8, r3
 8004606:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004608:	f000 80b3 	beq.w	8004772 <_printf_i+0x182>
 800460c:	d822      	bhi.n	8004654 <_printf_i+0x64>
 800460e:	2963      	cmp	r1, #99	; 0x63
 8004610:	d036      	beq.n	8004680 <_printf_i+0x90>
 8004612:	d80a      	bhi.n	800462a <_printf_i+0x3a>
 8004614:	2900      	cmp	r1, #0
 8004616:	f000 80b9 	beq.w	800478c <_printf_i+0x19c>
 800461a:	2958      	cmp	r1, #88	; 0x58
 800461c:	f000 8083 	beq.w	8004726 <_printf_i+0x136>
 8004620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004624:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004628:	e032      	b.n	8004690 <_printf_i+0xa0>
 800462a:	2964      	cmp	r1, #100	; 0x64
 800462c:	d001      	beq.n	8004632 <_printf_i+0x42>
 800462e:	2969      	cmp	r1, #105	; 0x69
 8004630:	d1f6      	bne.n	8004620 <_printf_i+0x30>
 8004632:	6820      	ldr	r0, [r4, #0]
 8004634:	6813      	ldr	r3, [r2, #0]
 8004636:	0605      	lsls	r5, r0, #24
 8004638:	f103 0104 	add.w	r1, r3, #4
 800463c:	d52a      	bpl.n	8004694 <_printf_i+0xa4>
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	da03      	bge.n	800464e <_printf_i+0x5e>
 8004646:	222d      	movs	r2, #45	; 0x2d
 8004648:	425b      	negs	r3, r3
 800464a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800464e:	486f      	ldr	r0, [pc, #444]	; (800480c <_printf_i+0x21c>)
 8004650:	220a      	movs	r2, #10
 8004652:	e039      	b.n	80046c8 <_printf_i+0xd8>
 8004654:	2973      	cmp	r1, #115	; 0x73
 8004656:	f000 809d 	beq.w	8004794 <_printf_i+0x1a4>
 800465a:	d808      	bhi.n	800466e <_printf_i+0x7e>
 800465c:	296f      	cmp	r1, #111	; 0x6f
 800465e:	d020      	beq.n	80046a2 <_printf_i+0xb2>
 8004660:	2970      	cmp	r1, #112	; 0x70
 8004662:	d1dd      	bne.n	8004620 <_printf_i+0x30>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	f043 0320 	orr.w	r3, r3, #32
 800466a:	6023      	str	r3, [r4, #0]
 800466c:	e003      	b.n	8004676 <_printf_i+0x86>
 800466e:	2975      	cmp	r1, #117	; 0x75
 8004670:	d017      	beq.n	80046a2 <_printf_i+0xb2>
 8004672:	2978      	cmp	r1, #120	; 0x78
 8004674:	d1d4      	bne.n	8004620 <_printf_i+0x30>
 8004676:	2378      	movs	r3, #120	; 0x78
 8004678:	4865      	ldr	r0, [pc, #404]	; (8004810 <_printf_i+0x220>)
 800467a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800467e:	e055      	b.n	800472c <_printf_i+0x13c>
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004686:	1d19      	adds	r1, r3, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6011      	str	r1, [r2, #0]
 800468c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004690:	2301      	movs	r3, #1
 8004692:	e08c      	b.n	80047ae <_printf_i+0x1be>
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f010 0f40 	tst.w	r0, #64	; 0x40
 800469a:	6011      	str	r1, [r2, #0]
 800469c:	bf18      	it	ne
 800469e:	b21b      	sxthne	r3, r3
 80046a0:	e7cf      	b.n	8004642 <_printf_i+0x52>
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	6825      	ldr	r5, [r4, #0]
 80046a6:	1d18      	adds	r0, r3, #4
 80046a8:	6010      	str	r0, [r2, #0]
 80046aa:	0628      	lsls	r0, r5, #24
 80046ac:	d501      	bpl.n	80046b2 <_printf_i+0xc2>
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	e002      	b.n	80046b8 <_printf_i+0xc8>
 80046b2:	0668      	lsls	r0, r5, #25
 80046b4:	d5fb      	bpl.n	80046ae <_printf_i+0xbe>
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	296f      	cmp	r1, #111	; 0x6f
 80046ba:	bf14      	ite	ne
 80046bc:	220a      	movne	r2, #10
 80046be:	2208      	moveq	r2, #8
 80046c0:	4852      	ldr	r0, [pc, #328]	; (800480c <_printf_i+0x21c>)
 80046c2:	2100      	movs	r1, #0
 80046c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046c8:	6865      	ldr	r5, [r4, #4]
 80046ca:	2d00      	cmp	r5, #0
 80046cc:	60a5      	str	r5, [r4, #8]
 80046ce:	f2c0 8095 	blt.w	80047fc <_printf_i+0x20c>
 80046d2:	6821      	ldr	r1, [r4, #0]
 80046d4:	f021 0104 	bic.w	r1, r1, #4
 80046d8:	6021      	str	r1, [r4, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d13d      	bne.n	800475a <_printf_i+0x16a>
 80046de:	2d00      	cmp	r5, #0
 80046e0:	f040 808e 	bne.w	8004800 <_printf_i+0x210>
 80046e4:	4665      	mov	r5, ip
 80046e6:	2a08      	cmp	r2, #8
 80046e8:	d10b      	bne.n	8004702 <_printf_i+0x112>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	07db      	lsls	r3, r3, #31
 80046ee:	d508      	bpl.n	8004702 <_printf_i+0x112>
 80046f0:	6923      	ldr	r3, [r4, #16]
 80046f2:	6862      	ldr	r2, [r4, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	bfde      	ittt	le
 80046f8:	2330      	movle	r3, #48	; 0x30
 80046fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004702:	ebac 0305 	sub.w	r3, ip, r5
 8004706:	6123      	str	r3, [r4, #16]
 8004708:	f8cd 8000 	str.w	r8, [sp]
 800470c:	463b      	mov	r3, r7
 800470e:	aa03      	add	r2, sp, #12
 8004710:	4621      	mov	r1, r4
 8004712:	4630      	mov	r0, r6
 8004714:	f7ff fef6 	bl	8004504 <_printf_common>
 8004718:	3001      	adds	r0, #1
 800471a:	d14d      	bne.n	80047b8 <_printf_i+0x1c8>
 800471c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004720:	b005      	add	sp, #20
 8004722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004726:	4839      	ldr	r0, [pc, #228]	; (800480c <_printf_i+0x21c>)
 8004728:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800472c:	6813      	ldr	r3, [r2, #0]
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	1d1d      	adds	r5, r3, #4
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6015      	str	r5, [r2, #0]
 8004736:	060a      	lsls	r2, r1, #24
 8004738:	d50b      	bpl.n	8004752 <_printf_i+0x162>
 800473a:	07ca      	lsls	r2, r1, #31
 800473c:	bf44      	itt	mi
 800473e:	f041 0120 	orrmi.w	r1, r1, #32
 8004742:	6021      	strmi	r1, [r4, #0]
 8004744:	b91b      	cbnz	r3, 800474e <_printf_i+0x15e>
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	f022 0220 	bic.w	r2, r2, #32
 800474c:	6022      	str	r2, [r4, #0]
 800474e:	2210      	movs	r2, #16
 8004750:	e7b7      	b.n	80046c2 <_printf_i+0xd2>
 8004752:	064d      	lsls	r5, r1, #25
 8004754:	bf48      	it	mi
 8004756:	b29b      	uxthmi	r3, r3
 8004758:	e7ef      	b.n	800473a <_printf_i+0x14a>
 800475a:	4665      	mov	r5, ip
 800475c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004760:	fb02 3311 	mls	r3, r2, r1, r3
 8004764:	5cc3      	ldrb	r3, [r0, r3]
 8004766:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800476a:	460b      	mov	r3, r1
 800476c:	2900      	cmp	r1, #0
 800476e:	d1f5      	bne.n	800475c <_printf_i+0x16c>
 8004770:	e7b9      	b.n	80046e6 <_printf_i+0xf6>
 8004772:	6813      	ldr	r3, [r2, #0]
 8004774:	6825      	ldr	r5, [r4, #0]
 8004776:	1d18      	adds	r0, r3, #4
 8004778:	6961      	ldr	r1, [r4, #20]
 800477a:	6010      	str	r0, [r2, #0]
 800477c:	0628      	lsls	r0, r5, #24
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	d501      	bpl.n	8004786 <_printf_i+0x196>
 8004782:	6019      	str	r1, [r3, #0]
 8004784:	e002      	b.n	800478c <_printf_i+0x19c>
 8004786:	066a      	lsls	r2, r5, #25
 8004788:	d5fb      	bpl.n	8004782 <_printf_i+0x192>
 800478a:	8019      	strh	r1, [r3, #0]
 800478c:	2300      	movs	r3, #0
 800478e:	4665      	mov	r5, ip
 8004790:	6123      	str	r3, [r4, #16]
 8004792:	e7b9      	b.n	8004708 <_printf_i+0x118>
 8004794:	6813      	ldr	r3, [r2, #0]
 8004796:	1d19      	adds	r1, r3, #4
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	681d      	ldr	r5, [r3, #0]
 800479c:	6862      	ldr	r2, [r4, #4]
 800479e:	2100      	movs	r1, #0
 80047a0:	4628      	mov	r0, r5
 80047a2:	f001 f9b1 	bl	8005b08 <memchr>
 80047a6:	b108      	cbz	r0, 80047ac <_printf_i+0x1bc>
 80047a8:	1b40      	subs	r0, r0, r5
 80047aa:	6060      	str	r0, [r4, #4]
 80047ac:	6863      	ldr	r3, [r4, #4]
 80047ae:	6123      	str	r3, [r4, #16]
 80047b0:	2300      	movs	r3, #0
 80047b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047b6:	e7a7      	b.n	8004708 <_printf_i+0x118>
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	462a      	mov	r2, r5
 80047bc:	4639      	mov	r1, r7
 80047be:	4630      	mov	r0, r6
 80047c0:	47c0      	blx	r8
 80047c2:	3001      	adds	r0, #1
 80047c4:	d0aa      	beq.n	800471c <_printf_i+0x12c>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	079b      	lsls	r3, r3, #30
 80047ca:	d413      	bmi.n	80047f4 <_printf_i+0x204>
 80047cc:	68e0      	ldr	r0, [r4, #12]
 80047ce:	9b03      	ldr	r3, [sp, #12]
 80047d0:	4298      	cmp	r0, r3
 80047d2:	bfb8      	it	lt
 80047d4:	4618      	movlt	r0, r3
 80047d6:	e7a3      	b.n	8004720 <_printf_i+0x130>
 80047d8:	2301      	movs	r3, #1
 80047da:	464a      	mov	r2, r9
 80047dc:	4639      	mov	r1, r7
 80047de:	4630      	mov	r0, r6
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d09a      	beq.n	800471c <_printf_i+0x12c>
 80047e6:	3501      	adds	r5, #1
 80047e8:	68e3      	ldr	r3, [r4, #12]
 80047ea:	9a03      	ldr	r2, [sp, #12]
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	42ab      	cmp	r3, r5
 80047f0:	dcf2      	bgt.n	80047d8 <_printf_i+0x1e8>
 80047f2:	e7eb      	b.n	80047cc <_printf_i+0x1dc>
 80047f4:	2500      	movs	r5, #0
 80047f6:	f104 0919 	add.w	r9, r4, #25
 80047fa:	e7f5      	b.n	80047e8 <_printf_i+0x1f8>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ac      	bne.n	800475a <_printf_i+0x16a>
 8004800:	7803      	ldrb	r3, [r0, #0]
 8004802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004806:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800480a:	e76c      	b.n	80046e6 <_printf_i+0xf6>
 800480c:	080075e2 	.word	0x080075e2
 8004810:	080075f3 	.word	0x080075f3

08004814 <iprintf>:
 8004814:	b40f      	push	{r0, r1, r2, r3}
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <iprintf+0x2c>)
 8004818:	b513      	push	{r0, r1, r4, lr}
 800481a:	681c      	ldr	r4, [r3, #0]
 800481c:	b124      	cbz	r4, 8004828 <iprintf+0x14>
 800481e:	69a3      	ldr	r3, [r4, #24]
 8004820:	b913      	cbnz	r3, 8004828 <iprintf+0x14>
 8004822:	4620      	mov	r0, r4
 8004824:	f001 f874 	bl	8005910 <__sinit>
 8004828:	ab05      	add	r3, sp, #20
 800482a:	9a04      	ldr	r2, [sp, #16]
 800482c:	68a1      	ldr	r1, [r4, #8]
 800482e:	4620      	mov	r0, r4
 8004830:	9301      	str	r3, [sp, #4]
 8004832:	f001 fc95 	bl	8006160 <_vfiprintf_r>
 8004836:	b002      	add	sp, #8
 8004838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800483c:	b004      	add	sp, #16
 800483e:	4770      	bx	lr
 8004840:	2000054c 	.word	0x2000054c

08004844 <_puts_r>:
 8004844:	b570      	push	{r4, r5, r6, lr}
 8004846:	460e      	mov	r6, r1
 8004848:	4605      	mov	r5, r0
 800484a:	b118      	cbz	r0, 8004854 <_puts_r+0x10>
 800484c:	6983      	ldr	r3, [r0, #24]
 800484e:	b90b      	cbnz	r3, 8004854 <_puts_r+0x10>
 8004850:	f001 f85e 	bl	8005910 <__sinit>
 8004854:	69ab      	ldr	r3, [r5, #24]
 8004856:	68ac      	ldr	r4, [r5, #8]
 8004858:	b913      	cbnz	r3, 8004860 <_puts_r+0x1c>
 800485a:	4628      	mov	r0, r5
 800485c:	f001 f858 	bl	8005910 <__sinit>
 8004860:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <_puts_r+0xac>)
 8004862:	429c      	cmp	r4, r3
 8004864:	d117      	bne.n	8004896 <_puts_r+0x52>
 8004866:	686c      	ldr	r4, [r5, #4]
 8004868:	89a3      	ldrh	r3, [r4, #12]
 800486a:	071b      	lsls	r3, r3, #28
 800486c:	d51d      	bpl.n	80048aa <_puts_r+0x66>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	b1db      	cbz	r3, 80048aa <_puts_r+0x66>
 8004872:	3e01      	subs	r6, #1
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800487a:	3b01      	subs	r3, #1
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	b9e9      	cbnz	r1, 80048bc <_puts_r+0x78>
 8004880:	2b00      	cmp	r3, #0
 8004882:	da2e      	bge.n	80048e2 <_puts_r+0x9e>
 8004884:	4622      	mov	r2, r4
 8004886:	210a      	movs	r1, #10
 8004888:	4628      	mov	r0, r5
 800488a:	f000 f84f 	bl	800492c <__swbuf_r>
 800488e:	3001      	adds	r0, #1
 8004890:	d011      	beq.n	80048b6 <_puts_r+0x72>
 8004892:	200a      	movs	r0, #10
 8004894:	e011      	b.n	80048ba <_puts_r+0x76>
 8004896:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <_puts_r+0xb0>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d101      	bne.n	80048a0 <_puts_r+0x5c>
 800489c:	68ac      	ldr	r4, [r5, #8]
 800489e:	e7e3      	b.n	8004868 <_puts_r+0x24>
 80048a0:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <_puts_r+0xb4>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	bf08      	it	eq
 80048a6:	68ec      	ldreq	r4, [r5, #12]
 80048a8:	e7de      	b.n	8004868 <_puts_r+0x24>
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f88f 	bl	80049d0 <__swsetup_r>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0dd      	beq.n	8004872 <_puts_r+0x2e>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da04      	bge.n	80048ca <_puts_r+0x86>
 80048c0:	69a2      	ldr	r2, [r4, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	dc06      	bgt.n	80048d4 <_puts_r+0x90>
 80048c6:	290a      	cmp	r1, #10
 80048c8:	d004      	beq.n	80048d4 <_puts_r+0x90>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	6022      	str	r2, [r4, #0]
 80048d0:	7019      	strb	r1, [r3, #0]
 80048d2:	e7cf      	b.n	8004874 <_puts_r+0x30>
 80048d4:	4622      	mov	r2, r4
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f828 	bl	800492c <__swbuf_r>
 80048dc:	3001      	adds	r0, #1
 80048de:	d1c9      	bne.n	8004874 <_puts_r+0x30>
 80048e0:	e7e9      	b.n	80048b6 <_puts_r+0x72>
 80048e2:	200a      	movs	r0, #10
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	7018      	strb	r0, [r3, #0]
 80048ec:	e7e5      	b.n	80048ba <_puts_r+0x76>
 80048ee:	bf00      	nop
 80048f0:	08007634 	.word	0x08007634
 80048f4:	08007654 	.word	0x08007654
 80048f8:	08007614 	.word	0x08007614

080048fc <puts>:
 80048fc:	4b02      	ldr	r3, [pc, #8]	; (8004908 <puts+0xc>)
 80048fe:	4601      	mov	r1, r0
 8004900:	6818      	ldr	r0, [r3, #0]
 8004902:	f7ff bf9f 	b.w	8004844 <_puts_r>
 8004906:	bf00      	nop
 8004908:	2000054c 	.word	0x2000054c

0800490c <_sbrk_r>:
 800490c:	b538      	push	{r3, r4, r5, lr}
 800490e:	2300      	movs	r3, #0
 8004910:	4c05      	ldr	r4, [pc, #20]	; (8004928 <_sbrk_r+0x1c>)
 8004912:	4605      	mov	r5, r0
 8004914:	4608      	mov	r0, r1
 8004916:	6023      	str	r3, [r4, #0]
 8004918:	f7fd fe9e 	bl	8002658 <_sbrk>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_sbrk_r+0x1a>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	b103      	cbz	r3, 8004926 <_sbrk_r+0x1a>
 8004924:	602b      	str	r3, [r5, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	20000a84 	.word	0x20000a84

0800492c <__swbuf_r>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	460e      	mov	r6, r1
 8004930:	4614      	mov	r4, r2
 8004932:	4605      	mov	r5, r0
 8004934:	b118      	cbz	r0, 800493e <__swbuf_r+0x12>
 8004936:	6983      	ldr	r3, [r0, #24]
 8004938:	b90b      	cbnz	r3, 800493e <__swbuf_r+0x12>
 800493a:	f000 ffe9 	bl	8005910 <__sinit>
 800493e:	4b21      	ldr	r3, [pc, #132]	; (80049c4 <__swbuf_r+0x98>)
 8004940:	429c      	cmp	r4, r3
 8004942:	d12a      	bne.n	800499a <__swbuf_r+0x6e>
 8004944:	686c      	ldr	r4, [r5, #4]
 8004946:	69a3      	ldr	r3, [r4, #24]
 8004948:	60a3      	str	r3, [r4, #8]
 800494a:	89a3      	ldrh	r3, [r4, #12]
 800494c:	071a      	lsls	r2, r3, #28
 800494e:	d52e      	bpl.n	80049ae <__swbuf_r+0x82>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	b363      	cbz	r3, 80049ae <__swbuf_r+0x82>
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	6820      	ldr	r0, [r4, #0]
 8004958:	b2f6      	uxtb	r6, r6
 800495a:	1ac0      	subs	r0, r0, r3
 800495c:	6963      	ldr	r3, [r4, #20]
 800495e:	4637      	mov	r7, r6
 8004960:	4283      	cmp	r3, r0
 8004962:	dc04      	bgt.n	800496e <__swbuf_r+0x42>
 8004964:	4621      	mov	r1, r4
 8004966:	4628      	mov	r0, r5
 8004968:	f000 ff68 	bl	800583c <_fflush_r>
 800496c:	bb28      	cbnz	r0, 80049ba <__swbuf_r+0x8e>
 800496e:	68a3      	ldr	r3, [r4, #8]
 8004970:	3001      	adds	r0, #1
 8004972:	3b01      	subs	r3, #1
 8004974:	60a3      	str	r3, [r4, #8]
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	6022      	str	r2, [r4, #0]
 800497c:	701e      	strb	r6, [r3, #0]
 800497e:	6963      	ldr	r3, [r4, #20]
 8004980:	4283      	cmp	r3, r0
 8004982:	d004      	beq.n	800498e <__swbuf_r+0x62>
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	07db      	lsls	r3, r3, #31
 8004988:	d519      	bpl.n	80049be <__swbuf_r+0x92>
 800498a:	2e0a      	cmp	r6, #10
 800498c:	d117      	bne.n	80049be <__swbuf_r+0x92>
 800498e:	4621      	mov	r1, r4
 8004990:	4628      	mov	r0, r5
 8004992:	f000 ff53 	bl	800583c <_fflush_r>
 8004996:	b190      	cbz	r0, 80049be <__swbuf_r+0x92>
 8004998:	e00f      	b.n	80049ba <__swbuf_r+0x8e>
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <__swbuf_r+0x9c>)
 800499c:	429c      	cmp	r4, r3
 800499e:	d101      	bne.n	80049a4 <__swbuf_r+0x78>
 80049a0:	68ac      	ldr	r4, [r5, #8]
 80049a2:	e7d0      	b.n	8004946 <__swbuf_r+0x1a>
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <__swbuf_r+0xa0>)
 80049a6:	429c      	cmp	r4, r3
 80049a8:	bf08      	it	eq
 80049aa:	68ec      	ldreq	r4, [r5, #12]
 80049ac:	e7cb      	b.n	8004946 <__swbuf_r+0x1a>
 80049ae:	4621      	mov	r1, r4
 80049b0:	4628      	mov	r0, r5
 80049b2:	f000 f80d 	bl	80049d0 <__swsetup_r>
 80049b6:	2800      	cmp	r0, #0
 80049b8:	d0cc      	beq.n	8004954 <__swbuf_r+0x28>
 80049ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80049be:	4638      	mov	r0, r7
 80049c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	08007634 	.word	0x08007634
 80049c8:	08007654 	.word	0x08007654
 80049cc:	08007614 	.word	0x08007614

080049d0 <__swsetup_r>:
 80049d0:	4b32      	ldr	r3, [pc, #200]	; (8004a9c <__swsetup_r+0xcc>)
 80049d2:	b570      	push	{r4, r5, r6, lr}
 80049d4:	681d      	ldr	r5, [r3, #0]
 80049d6:	4606      	mov	r6, r0
 80049d8:	460c      	mov	r4, r1
 80049da:	b125      	cbz	r5, 80049e6 <__swsetup_r+0x16>
 80049dc:	69ab      	ldr	r3, [r5, #24]
 80049de:	b913      	cbnz	r3, 80049e6 <__swsetup_r+0x16>
 80049e0:	4628      	mov	r0, r5
 80049e2:	f000 ff95 	bl	8005910 <__sinit>
 80049e6:	4b2e      	ldr	r3, [pc, #184]	; (8004aa0 <__swsetup_r+0xd0>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	d10f      	bne.n	8004a0c <__swsetup_r+0x3c>
 80049ec:	686c      	ldr	r4, [r5, #4]
 80049ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	0715      	lsls	r5, r2, #28
 80049f6:	d42c      	bmi.n	8004a52 <__swsetup_r+0x82>
 80049f8:	06d0      	lsls	r0, r2, #27
 80049fa:	d411      	bmi.n	8004a20 <__swsetup_r+0x50>
 80049fc:	2209      	movs	r2, #9
 80049fe:	6032      	str	r2, [r6, #0]
 8004a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a04:	81a3      	strh	r3, [r4, #12]
 8004a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a0a:	e03e      	b.n	8004a8a <__swsetup_r+0xba>
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <__swsetup_r+0xd4>)
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	d101      	bne.n	8004a16 <__swsetup_r+0x46>
 8004a12:	68ac      	ldr	r4, [r5, #8]
 8004a14:	e7eb      	b.n	80049ee <__swsetup_r+0x1e>
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <__swsetup_r+0xd8>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	bf08      	it	eq
 8004a1c:	68ec      	ldreq	r4, [r5, #12]
 8004a1e:	e7e6      	b.n	80049ee <__swsetup_r+0x1e>
 8004a20:	0751      	lsls	r1, r2, #29
 8004a22:	d512      	bpl.n	8004a4a <__swsetup_r+0x7a>
 8004a24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a26:	b141      	cbz	r1, 8004a3a <__swsetup_r+0x6a>
 8004a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a2c:	4299      	cmp	r1, r3
 8004a2e:	d002      	beq.n	8004a36 <__swsetup_r+0x66>
 8004a30:	4630      	mov	r0, r6
 8004a32:	f7ff f9f9 	bl	8003e28 <_free_r>
 8004a36:	2300      	movs	r3, #0
 8004a38:	6363      	str	r3, [r4, #52]	; 0x34
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a40:	81a3      	strh	r3, [r4, #12]
 8004a42:	2300      	movs	r3, #0
 8004a44:	6063      	str	r3, [r4, #4]
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f043 0308 	orr.w	r3, r3, #8
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	6923      	ldr	r3, [r4, #16]
 8004a54:	b94b      	cbnz	r3, 8004a6a <__swsetup_r+0x9a>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a60:	d003      	beq.n	8004a6a <__swsetup_r+0x9a>
 8004a62:	4621      	mov	r1, r4
 8004a64:	4630      	mov	r0, r6
 8004a66:	f001 f80f 	bl	8005a88 <__smakebuf_r>
 8004a6a:	89a2      	ldrh	r2, [r4, #12]
 8004a6c:	f012 0301 	ands.w	r3, r2, #1
 8004a70:	d00c      	beq.n	8004a8c <__swsetup_r+0xbc>
 8004a72:	2300      	movs	r3, #0
 8004a74:	60a3      	str	r3, [r4, #8]
 8004a76:	6963      	ldr	r3, [r4, #20]
 8004a78:	425b      	negs	r3, r3
 8004a7a:	61a3      	str	r3, [r4, #24]
 8004a7c:	6923      	ldr	r3, [r4, #16]
 8004a7e:	b953      	cbnz	r3, 8004a96 <__swsetup_r+0xc6>
 8004a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a84:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004a88:	d1ba      	bne.n	8004a00 <__swsetup_r+0x30>
 8004a8a:	bd70      	pop	{r4, r5, r6, pc}
 8004a8c:	0792      	lsls	r2, r2, #30
 8004a8e:	bf58      	it	pl
 8004a90:	6963      	ldrpl	r3, [r4, #20]
 8004a92:	60a3      	str	r3, [r4, #8]
 8004a94:	e7f2      	b.n	8004a7c <__swsetup_r+0xac>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e7f7      	b.n	8004a8a <__swsetup_r+0xba>
 8004a9a:	bf00      	nop
 8004a9c:	2000054c 	.word	0x2000054c
 8004aa0:	08007634 	.word	0x08007634
 8004aa4:	08007654 	.word	0x08007654
 8004aa8:	08007614 	.word	0x08007614

08004aac <quorem>:
 8004aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab0:	6903      	ldr	r3, [r0, #16]
 8004ab2:	690c      	ldr	r4, [r1, #16]
 8004ab4:	4680      	mov	r8, r0
 8004ab6:	42a3      	cmp	r3, r4
 8004ab8:	f2c0 8084 	blt.w	8004bc4 <quorem+0x118>
 8004abc:	3c01      	subs	r4, #1
 8004abe:	f101 0714 	add.w	r7, r1, #20
 8004ac2:	f100 0614 	add.w	r6, r0, #20
 8004ac6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004aca:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004ace:	3501      	adds	r5, #1
 8004ad0:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ad4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004ad8:	eb06 030c 	add.w	r3, r6, ip
 8004adc:	eb07 090c 	add.w	r9, r7, ip
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	b39d      	cbz	r5, 8004b4c <quorem+0xa0>
 8004ae4:	f04f 0a00 	mov.w	sl, #0
 8004ae8:	4638      	mov	r0, r7
 8004aea:	46b6      	mov	lr, r6
 8004aec:	46d3      	mov	fp, sl
 8004aee:	f850 2b04 	ldr.w	r2, [r0], #4
 8004af2:	b293      	uxth	r3, r2
 8004af4:	fb05 a303 	mla	r3, r5, r3, sl
 8004af8:	0c12      	lsrs	r2, r2, #16
 8004afa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004afe:	fb05 a202 	mla	r2, r5, r2, sl
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	ebab 0303 	sub.w	r3, fp, r3
 8004b08:	f8de b000 	ldr.w	fp, [lr]
 8004b0c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b10:	fa1f fb8b 	uxth.w	fp, fp
 8004b14:	445b      	add	r3, fp
 8004b16:	fa1f fb82 	uxth.w	fp, r2
 8004b1a:	f8de 2000 	ldr.w	r2, [lr]
 8004b1e:	4581      	cmp	r9, r0
 8004b20:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b2e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b32:	f84e 3b04 	str.w	r3, [lr], #4
 8004b36:	d2da      	bcs.n	8004aee <quorem+0x42>
 8004b38:	f856 300c 	ldr.w	r3, [r6, ip]
 8004b3c:	b933      	cbnz	r3, 8004b4c <quorem+0xa0>
 8004b3e:	9b01      	ldr	r3, [sp, #4]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	429e      	cmp	r6, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	d331      	bcc.n	8004bac <quorem+0x100>
 8004b48:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	f001 fa0b 	bl	8005f68 <__mcmp>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	db26      	blt.n	8004ba4 <quorem+0xf8>
 8004b56:	4630      	mov	r0, r6
 8004b58:	f04f 0c00 	mov.w	ip, #0
 8004b5c:	3501      	adds	r5, #1
 8004b5e:	f857 1b04 	ldr.w	r1, [r7], #4
 8004b62:	f8d0 e000 	ldr.w	lr, [r0]
 8004b66:	b28b      	uxth	r3, r1
 8004b68:	ebac 0303 	sub.w	r3, ip, r3
 8004b6c:	fa1f f28e 	uxth.w	r2, lr
 8004b70:	4413      	add	r3, r2
 8004b72:	0c0a      	lsrs	r2, r1, #16
 8004b74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b82:	45b9      	cmp	r9, r7
 8004b84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b88:	f840 3b04 	str.w	r3, [r0], #4
 8004b8c:	d2e7      	bcs.n	8004b5e <quorem+0xb2>
 8004b8e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b92:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b96:	b92a      	cbnz	r2, 8004ba4 <quorem+0xf8>
 8004b98:	3b04      	subs	r3, #4
 8004b9a:	429e      	cmp	r6, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	d30b      	bcc.n	8004bb8 <quorem+0x10c>
 8004ba0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	b003      	add	sp, #12
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	3b04      	subs	r3, #4
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	d1c9      	bne.n	8004b48 <quorem+0x9c>
 8004bb4:	3c01      	subs	r4, #1
 8004bb6:	e7c4      	b.n	8004b42 <quorem+0x96>
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	3b04      	subs	r3, #4
 8004bbc:	2a00      	cmp	r2, #0
 8004bbe:	d1ef      	bne.n	8004ba0 <quorem+0xf4>
 8004bc0:	3c01      	subs	r4, #1
 8004bc2:	e7ea      	b.n	8004b9a <quorem+0xee>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e7ee      	b.n	8004ba6 <quorem+0xfa>

08004bc8 <_dtoa_r>:
 8004bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bcc:	4616      	mov	r6, r2
 8004bce:	461f      	mov	r7, r3
 8004bd0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004bd2:	b095      	sub	sp, #84	; 0x54
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004bda:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004bde:	b93d      	cbnz	r5, 8004bf0 <_dtoa_r+0x28>
 8004be0:	2010      	movs	r0, #16
 8004be2:	f7ff f911 	bl	8003e08 <malloc>
 8004be6:	6260      	str	r0, [r4, #36]	; 0x24
 8004be8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004bec:	6005      	str	r5, [r0, #0]
 8004bee:	60c5      	str	r5, [r0, #12]
 8004bf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bf2:	6819      	ldr	r1, [r3, #0]
 8004bf4:	b151      	cbz	r1, 8004c0c <_dtoa_r+0x44>
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	4093      	lsls	r3, r2
 8004bfc:	604a      	str	r2, [r1, #4]
 8004bfe:	608b      	str	r3, [r1, #8]
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 ffd0 	bl	8005ba6 <_Bfree>
 8004c06:	2200      	movs	r2, #0
 8004c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	1e3b      	subs	r3, r7, #0
 8004c0e:	bfaf      	iteee	ge
 8004c10:	2300      	movge	r3, #0
 8004c12:	2201      	movlt	r2, #1
 8004c14:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c18:	9303      	strlt	r3, [sp, #12]
 8004c1a:	bfac      	ite	ge
 8004c1c:	f8c8 3000 	strge.w	r3, [r8]
 8004c20:	f8c8 2000 	strlt.w	r2, [r8]
 8004c24:	4bae      	ldr	r3, [pc, #696]	; (8004ee0 <_dtoa_r+0x318>)
 8004c26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c2a:	ea33 0308 	bics.w	r3, r3, r8
 8004c2e:	d11b      	bne.n	8004c68 <_dtoa_r+0xa0>
 8004c30:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	9b02      	ldr	r3, [sp, #8]
 8004c3a:	b923      	cbnz	r3, 8004c46 <_dtoa_r+0x7e>
 8004c3c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004c40:	2800      	cmp	r0, #0
 8004c42:	f000 8545 	beq.w	80056d0 <_dtoa_r+0xb08>
 8004c46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c48:	b953      	cbnz	r3, 8004c60 <_dtoa_r+0x98>
 8004c4a:	4ba6      	ldr	r3, [pc, #664]	; (8004ee4 <_dtoa_r+0x31c>)
 8004c4c:	e021      	b.n	8004c92 <_dtoa_r+0xca>
 8004c4e:	4ba6      	ldr	r3, [pc, #664]	; (8004ee8 <_dtoa_r+0x320>)
 8004c50:	9306      	str	r3, [sp, #24]
 8004c52:	3308      	adds	r3, #8
 8004c54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	9806      	ldr	r0, [sp, #24]
 8004c5a:	b015      	add	sp, #84	; 0x54
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	4ba0      	ldr	r3, [pc, #640]	; (8004ee4 <_dtoa_r+0x31c>)
 8004c62:	9306      	str	r3, [sp, #24]
 8004c64:	3303      	adds	r3, #3
 8004c66:	e7f5      	b.n	8004c54 <_dtoa_r+0x8c>
 8004c68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2300      	movs	r3, #0
 8004c70:	4630      	mov	r0, r6
 8004c72:	4639      	mov	r1, r7
 8004c74:	f7fb fe98 	bl	80009a8 <__aeabi_dcmpeq>
 8004c78:	4682      	mov	sl, r0
 8004c7a:	b160      	cbz	r0, 8004c96 <_dtoa_r+0xce>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8520 	beq.w	80056ca <_dtoa_r+0xb02>
 8004c8a:	4b98      	ldr	r3, [pc, #608]	; (8004eec <_dtoa_r+0x324>)
 8004c8c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	9306      	str	r3, [sp, #24]
 8004c94:	e7e0      	b.n	8004c58 <_dtoa_r+0x90>
 8004c96:	ab12      	add	r3, sp, #72	; 0x48
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	ab13      	add	r3, sp, #76	; 0x4c
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	4632      	mov	r2, r6
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f001 f9d8 	bl	8006058 <__d2b>
 8004ca8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004cac:	4683      	mov	fp, r0
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	d07d      	beq.n	8004dae <_dtoa_r+0x1e6>
 8004cb2:	46b0      	mov	r8, r6
 8004cb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cb8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004cbc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004cc0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004cc4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004cc8:	2200      	movs	r2, #0
 8004cca:	4b89      	ldr	r3, [pc, #548]	; (8004ef0 <_dtoa_r+0x328>)
 8004ccc:	4640      	mov	r0, r8
 8004cce:	4649      	mov	r1, r9
 8004cd0:	f7fb fa4a 	bl	8000168 <__aeabi_dsub>
 8004cd4:	a37c      	add	r3, pc, #496	; (adr r3, 8004ec8 <_dtoa_r+0x300>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fbfd 	bl	80004d8 <__aeabi_dmul>
 8004cde:	a37c      	add	r3, pc, #496	; (adr r3, 8004ed0 <_dtoa_r+0x308>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fa42 	bl	800016c <__adddf3>
 8004ce8:	4606      	mov	r6, r0
 8004cea:	4628      	mov	r0, r5
 8004cec:	460f      	mov	r7, r1
 8004cee:	f7fb fb89 	bl	8000404 <__aeabi_i2d>
 8004cf2:	a379      	add	r3, pc, #484	; (adr r3, 8004ed8 <_dtoa_r+0x310>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fbee 	bl	80004d8 <__aeabi_dmul>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4630      	mov	r0, r6
 8004d02:	4639      	mov	r1, r7
 8004d04:	f7fb fa32 	bl	800016c <__adddf3>
 8004d08:	4606      	mov	r6, r0
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	f7fb fe94 	bl	8000a38 <__aeabi_d2iz>
 8004d10:	2200      	movs	r2, #0
 8004d12:	4682      	mov	sl, r0
 8004d14:	2300      	movs	r3, #0
 8004d16:	4630      	mov	r0, r6
 8004d18:	4639      	mov	r1, r7
 8004d1a:	f7fb fe4f 	bl	80009bc <__aeabi_dcmplt>
 8004d1e:	b148      	cbz	r0, 8004d34 <_dtoa_r+0x16c>
 8004d20:	4650      	mov	r0, sl
 8004d22:	f7fb fb6f 	bl	8000404 <__aeabi_i2d>
 8004d26:	4632      	mov	r2, r6
 8004d28:	463b      	mov	r3, r7
 8004d2a:	f7fb fe3d 	bl	80009a8 <__aeabi_dcmpeq>
 8004d2e:	b908      	cbnz	r0, 8004d34 <_dtoa_r+0x16c>
 8004d30:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d34:	f1ba 0f16 	cmp.w	sl, #22
 8004d38:	d85a      	bhi.n	8004df0 <_dtoa_r+0x228>
 8004d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d3e:	496d      	ldr	r1, [pc, #436]	; (8004ef4 <_dtoa_r+0x32c>)
 8004d40:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d48:	f7fb fe56 	bl	80009f8 <__aeabi_dcmpgt>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d051      	beq.n	8004df4 <_dtoa_r+0x22c>
 8004d50:	2300      	movs	r3, #0
 8004d52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d56:	930d      	str	r3, [sp, #52]	; 0x34
 8004d58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d5a:	1b5d      	subs	r5, r3, r5
 8004d5c:	1e6b      	subs	r3, r5, #1
 8004d5e:	9307      	str	r3, [sp, #28]
 8004d60:	bf43      	ittte	mi
 8004d62:	2300      	movmi	r3, #0
 8004d64:	f1c5 0901 	rsbmi	r9, r5, #1
 8004d68:	9307      	strmi	r3, [sp, #28]
 8004d6a:	f04f 0900 	movpl.w	r9, #0
 8004d6e:	f1ba 0f00 	cmp.w	sl, #0
 8004d72:	db41      	blt.n	8004df8 <_dtoa_r+0x230>
 8004d74:	9b07      	ldr	r3, [sp, #28]
 8004d76:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004d7a:	4453      	add	r3, sl
 8004d7c:	9307      	str	r3, [sp, #28]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	9308      	str	r3, [sp, #32]
 8004d82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d84:	2b09      	cmp	r3, #9
 8004d86:	f200 808f 	bhi.w	8004ea8 <_dtoa_r+0x2e0>
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	bfc4      	itt	gt
 8004d8e:	3b04      	subgt	r3, #4
 8004d90:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004d92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d94:	bfc8      	it	gt
 8004d96:	2500      	movgt	r5, #0
 8004d98:	f1a3 0302 	sub.w	r3, r3, #2
 8004d9c:	bfd8      	it	le
 8004d9e:	2501      	movle	r5, #1
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	f200 808d 	bhi.w	8004ec0 <_dtoa_r+0x2f8>
 8004da6:	e8df f003 	tbb	[pc, r3]
 8004daa:	7d7b      	.short	0x7d7b
 8004dac:	6f2f      	.short	0x6f2f
 8004dae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004db2:	441d      	add	r5, r3
 8004db4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004db8:	2820      	cmp	r0, #32
 8004dba:	dd13      	ble.n	8004de4 <_dtoa_r+0x21c>
 8004dbc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004dc0:	9b02      	ldr	r3, [sp, #8]
 8004dc2:	fa08 f800 	lsl.w	r8, r8, r0
 8004dc6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004dca:	fa23 f000 	lsr.w	r0, r3, r0
 8004dce:	ea48 0000 	orr.w	r0, r8, r0
 8004dd2:	f7fb fb07 	bl	80003e4 <__aeabi_ui2d>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4680      	mov	r8, r0
 8004dda:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004dde:	3d01      	subs	r5, #1
 8004de0:	9310      	str	r3, [sp, #64]	; 0x40
 8004de2:	e771      	b.n	8004cc8 <_dtoa_r+0x100>
 8004de4:	9b02      	ldr	r3, [sp, #8]
 8004de6:	f1c0 0020 	rsb	r0, r0, #32
 8004dea:	fa03 f000 	lsl.w	r0, r3, r0
 8004dee:	e7f0      	b.n	8004dd2 <_dtoa_r+0x20a>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e7b0      	b.n	8004d56 <_dtoa_r+0x18e>
 8004df4:	900d      	str	r0, [sp, #52]	; 0x34
 8004df6:	e7af      	b.n	8004d58 <_dtoa_r+0x190>
 8004df8:	f1ca 0300 	rsb	r3, sl, #0
 8004dfc:	9308      	str	r3, [sp, #32]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	eba9 090a 	sub.w	r9, r9, sl
 8004e04:	930c      	str	r3, [sp, #48]	; 0x30
 8004e06:	e7bc      	b.n	8004d82 <_dtoa_r+0x1ba>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	dd74      	ble.n	8004efc <_dtoa_r+0x334>
 8004e12:	4698      	mov	r8, r3
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	2200      	movs	r2, #0
 8004e18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e1a:	6072      	str	r2, [r6, #4]
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	f102 0014 	add.w	r0, r2, #20
 8004e22:	4298      	cmp	r0, r3
 8004e24:	6871      	ldr	r1, [r6, #4]
 8004e26:	d96e      	bls.n	8004f06 <_dtoa_r+0x33e>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f000 fe88 	bl	8005b3e <_Balloc>
 8004e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e30:	6030      	str	r0, [r6, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1b8 0f0e 	cmp.w	r8, #14
 8004e38:	9306      	str	r3, [sp, #24]
 8004e3a:	f200 80ed 	bhi.w	8005018 <_dtoa_r+0x450>
 8004e3e:	2d00      	cmp	r5, #0
 8004e40:	f000 80ea 	beq.w	8005018 <_dtoa_r+0x450>
 8004e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e48:	f1ba 0f00 	cmp.w	sl, #0
 8004e4c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004e50:	dd77      	ble.n	8004f42 <_dtoa_r+0x37a>
 8004e52:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <_dtoa_r+0x32c>)
 8004e54:	f00a 030f 	and.w	r3, sl, #15
 8004e58:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004e5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e60:	06f0      	lsls	r0, r6, #27
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e6a:	d568      	bpl.n	8004f3e <_dtoa_r+0x376>
 8004e6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e70:	4b21      	ldr	r3, [pc, #132]	; (8004ef8 <_dtoa_r+0x330>)
 8004e72:	2503      	movs	r5, #3
 8004e74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e78:	f7fb fc58 	bl	800072c <__aeabi_ddiv>
 8004e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e80:	f006 060f 	and.w	r6, r6, #15
 8004e84:	4f1c      	ldr	r7, [pc, #112]	; (8004ef8 <_dtoa_r+0x330>)
 8004e86:	e04f      	b.n	8004f28 <_dtoa_r+0x360>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e8e:	4453      	add	r3, sl
 8004e90:	f103 0801 	add.w	r8, r3, #1
 8004e94:	9304      	str	r3, [sp, #16]
 8004e96:	4643      	mov	r3, r8
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bfb8      	it	lt
 8004e9c:	2301      	movlt	r3, #1
 8004e9e:	e7ba      	b.n	8004e16 <_dtoa_r+0x24e>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e7b2      	b.n	8004e0a <_dtoa_r+0x242>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	e7f0      	b.n	8004e8a <_dtoa_r+0x2c2>
 8004ea8:	2501      	movs	r5, #1
 8004eaa:	2300      	movs	r3, #0
 8004eac:	9509      	str	r5, [sp, #36]	; 0x24
 8004eae:	931e      	str	r3, [sp, #120]	; 0x78
 8004eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	9304      	str	r3, [sp, #16]
 8004eb8:	4698      	mov	r8, r3
 8004eba:	2312      	movs	r3, #18
 8004ebc:	921f      	str	r2, [sp, #124]	; 0x7c
 8004ebe:	e7aa      	b.n	8004e16 <_dtoa_r+0x24e>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ec4:	e7f4      	b.n	8004eb0 <_dtoa_r+0x2e8>
 8004ec6:	bf00      	nop
 8004ec8:	636f4361 	.word	0x636f4361
 8004ecc:	3fd287a7 	.word	0x3fd287a7
 8004ed0:	8b60c8b3 	.word	0x8b60c8b3
 8004ed4:	3fc68a28 	.word	0x3fc68a28
 8004ed8:	509f79fb 	.word	0x509f79fb
 8004edc:	3fd34413 	.word	0x3fd34413
 8004ee0:	7ff00000 	.word	0x7ff00000
 8004ee4:	0800760d 	.word	0x0800760d
 8004ee8:	08007604 	.word	0x08007604
 8004eec:	080075e1 	.word	0x080075e1
 8004ef0:	3ff80000 	.word	0x3ff80000
 8004ef4:	080076a0 	.word	0x080076a0
 8004ef8:	08007678 	.word	0x08007678
 8004efc:	2301      	movs	r3, #1
 8004efe:	9304      	str	r3, [sp, #16]
 8004f00:	4698      	mov	r8, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	e7da      	b.n	8004ebc <_dtoa_r+0x2f4>
 8004f06:	3101      	adds	r1, #1
 8004f08:	6071      	str	r1, [r6, #4]
 8004f0a:	0052      	lsls	r2, r2, #1
 8004f0c:	e787      	b.n	8004e1e <_dtoa_r+0x256>
 8004f0e:	07f1      	lsls	r1, r6, #31
 8004f10:	d508      	bpl.n	8004f24 <_dtoa_r+0x35c>
 8004f12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1a:	f7fb fadd 	bl	80004d8 <__aeabi_dmul>
 8004f1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f22:	3501      	adds	r5, #1
 8004f24:	1076      	asrs	r6, r6, #1
 8004f26:	3708      	adds	r7, #8
 8004f28:	2e00      	cmp	r6, #0
 8004f2a:	d1f0      	bne.n	8004f0e <_dtoa_r+0x346>
 8004f2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f34:	f7fb fbfa 	bl	800072c <__aeabi_ddiv>
 8004f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f3c:	e01b      	b.n	8004f76 <_dtoa_r+0x3ae>
 8004f3e:	2502      	movs	r5, #2
 8004f40:	e7a0      	b.n	8004e84 <_dtoa_r+0x2bc>
 8004f42:	f000 80a4 	beq.w	800508e <_dtoa_r+0x4c6>
 8004f46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f4a:	f1ca 0600 	rsb	r6, sl, #0
 8004f4e:	4ba0      	ldr	r3, [pc, #640]	; (80051d0 <_dtoa_r+0x608>)
 8004f50:	f006 020f 	and.w	r2, r6, #15
 8004f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb fabc 	bl	80004d8 <__aeabi_dmul>
 8004f60:	2502      	movs	r5, #2
 8004f62:	2300      	movs	r3, #0
 8004f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f68:	4f9a      	ldr	r7, [pc, #616]	; (80051d4 <_dtoa_r+0x60c>)
 8004f6a:	1136      	asrs	r6, r6, #4
 8004f6c:	2e00      	cmp	r6, #0
 8004f6e:	f040 8083 	bne.w	8005078 <_dtoa_r+0x4b0>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e0      	bne.n	8004f38 <_dtoa_r+0x370>
 8004f76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 808a 	beq.w	8005092 <_dtoa_r+0x4ca>
 8004f7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4b92      	ldr	r3, [pc, #584]	; (80051d8 <_dtoa_r+0x610>)
 8004f8e:	f7fb fd15 	bl	80009bc <__aeabi_dcmplt>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d07d      	beq.n	8005092 <_dtoa_r+0x4ca>
 8004f96:	f1b8 0f00 	cmp.w	r8, #0
 8004f9a:	d07a      	beq.n	8005092 <_dtoa_r+0x4ca>
 8004f9c:	9b04      	ldr	r3, [sp, #16]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	dd36      	ble.n	8005010 <_dtoa_r+0x448>
 8004fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	4b8c      	ldr	r3, [pc, #560]	; (80051dc <_dtoa_r+0x614>)
 8004faa:	f7fb fa95 	bl	80004d8 <__aeabi_dmul>
 8004fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fb2:	9e04      	ldr	r6, [sp, #16]
 8004fb4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004fb8:	3501      	adds	r5, #1
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f7fb fa22 	bl	8000404 <__aeabi_i2d>
 8004fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fc4:	f7fb fa88 	bl	80004d8 <__aeabi_dmul>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4b85      	ldr	r3, [pc, #532]	; (80051e0 <_dtoa_r+0x618>)
 8004fcc:	f7fb f8ce 	bl	800016c <__adddf3>
 8004fd0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004fd4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fd8:	950b      	str	r5, [sp, #44]	; 0x2c
 8004fda:	2e00      	cmp	r6, #0
 8004fdc:	d15c      	bne.n	8005098 <_dtoa_r+0x4d0>
 8004fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4b7f      	ldr	r3, [pc, #508]	; (80051e4 <_dtoa_r+0x61c>)
 8004fe6:	f7fb f8bf 	bl	8000168 <__aeabi_dsub>
 8004fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fec:	462b      	mov	r3, r5
 8004fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ff2:	f7fb fd01 	bl	80009f8 <__aeabi_dcmpgt>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	f040 8281 	bne.w	80054fe <_dtoa_r+0x936>
 8004ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005002:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005006:	f7fb fcd9 	bl	80009bc <__aeabi_dcmplt>
 800500a:	2800      	cmp	r0, #0
 800500c:	f040 8275 	bne.w	80054fa <_dtoa_r+0x932>
 8005010:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005014:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005018:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800501a:	2b00      	cmp	r3, #0
 800501c:	f2c0 814b 	blt.w	80052b6 <_dtoa_r+0x6ee>
 8005020:	f1ba 0f0e 	cmp.w	sl, #14
 8005024:	f300 8147 	bgt.w	80052b6 <_dtoa_r+0x6ee>
 8005028:	4b69      	ldr	r3, [pc, #420]	; (80051d0 <_dtoa_r+0x608>)
 800502a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005036:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005038:	2b00      	cmp	r3, #0
 800503a:	f280 80d7 	bge.w	80051ec <_dtoa_r+0x624>
 800503e:	f1b8 0f00 	cmp.w	r8, #0
 8005042:	f300 80d3 	bgt.w	80051ec <_dtoa_r+0x624>
 8005046:	f040 8257 	bne.w	80054f8 <_dtoa_r+0x930>
 800504a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800504e:	2200      	movs	r2, #0
 8005050:	4b64      	ldr	r3, [pc, #400]	; (80051e4 <_dtoa_r+0x61c>)
 8005052:	f7fb fa41 	bl	80004d8 <__aeabi_dmul>
 8005056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800505a:	f7fb fcc3 	bl	80009e4 <__aeabi_dcmpge>
 800505e:	4646      	mov	r6, r8
 8005060:	4647      	mov	r7, r8
 8005062:	2800      	cmp	r0, #0
 8005064:	f040 822d 	bne.w	80054c2 <_dtoa_r+0x8fa>
 8005068:	9b06      	ldr	r3, [sp, #24]
 800506a:	9a06      	ldr	r2, [sp, #24]
 800506c:	1c5d      	adds	r5, r3, #1
 800506e:	2331      	movs	r3, #49	; 0x31
 8005070:	f10a 0a01 	add.w	sl, sl, #1
 8005074:	7013      	strb	r3, [r2, #0]
 8005076:	e228      	b.n	80054ca <_dtoa_r+0x902>
 8005078:	07f2      	lsls	r2, r6, #31
 800507a:	d505      	bpl.n	8005088 <_dtoa_r+0x4c0>
 800507c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005080:	f7fb fa2a 	bl	80004d8 <__aeabi_dmul>
 8005084:	2301      	movs	r3, #1
 8005086:	3501      	adds	r5, #1
 8005088:	1076      	asrs	r6, r6, #1
 800508a:	3708      	adds	r7, #8
 800508c:	e76e      	b.n	8004f6c <_dtoa_r+0x3a4>
 800508e:	2502      	movs	r5, #2
 8005090:	e771      	b.n	8004f76 <_dtoa_r+0x3ae>
 8005092:	4657      	mov	r7, sl
 8005094:	4646      	mov	r6, r8
 8005096:	e790      	b.n	8004fba <_dtoa_r+0x3f2>
 8005098:	4b4d      	ldr	r3, [pc, #308]	; (80051d0 <_dtoa_r+0x608>)
 800509a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800509e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80050a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d048      	beq.n	800513a <_dtoa_r+0x572>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	2000      	movs	r0, #0
 80050ae:	494e      	ldr	r1, [pc, #312]	; (80051e8 <_dtoa_r+0x620>)
 80050b0:	f7fb fb3c 	bl	800072c <__aeabi_ddiv>
 80050b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050b8:	f7fb f856 	bl	8000168 <__aeabi_dsub>
 80050bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050c0:	9d06      	ldr	r5, [sp, #24]
 80050c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050c6:	f7fb fcb7 	bl	8000a38 <__aeabi_d2iz>
 80050ca:	9011      	str	r0, [sp, #68]	; 0x44
 80050cc:	f7fb f99a 	bl	8000404 <__aeabi_i2d>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d8:	f7fb f846 	bl	8000168 <__aeabi_dsub>
 80050dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050e2:	3330      	adds	r3, #48	; 0x30
 80050e4:	f805 3b01 	strb.w	r3, [r5], #1
 80050e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050ec:	f7fb fc66 	bl	80009bc <__aeabi_dcmplt>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d163      	bne.n	80051bc <_dtoa_r+0x5f4>
 80050f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050f8:	2000      	movs	r0, #0
 80050fa:	4937      	ldr	r1, [pc, #220]	; (80051d8 <_dtoa_r+0x610>)
 80050fc:	f7fb f834 	bl	8000168 <__aeabi_dsub>
 8005100:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005104:	f7fb fc5a 	bl	80009bc <__aeabi_dcmplt>
 8005108:	2800      	cmp	r0, #0
 800510a:	f040 80b5 	bne.w	8005278 <_dtoa_r+0x6b0>
 800510e:	9b06      	ldr	r3, [sp, #24]
 8005110:	1aeb      	subs	r3, r5, r3
 8005112:	429e      	cmp	r6, r3
 8005114:	f77f af7c 	ble.w	8005010 <_dtoa_r+0x448>
 8005118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800511c:	2200      	movs	r2, #0
 800511e:	4b2f      	ldr	r3, [pc, #188]	; (80051dc <_dtoa_r+0x614>)
 8005120:	f7fb f9da 	bl	80004d8 <__aeabi_dmul>
 8005124:	2200      	movs	r2, #0
 8005126:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800512a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800512e:	4b2b      	ldr	r3, [pc, #172]	; (80051dc <_dtoa_r+0x614>)
 8005130:	f7fb f9d2 	bl	80004d8 <__aeabi_dmul>
 8005134:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005138:	e7c3      	b.n	80050c2 <_dtoa_r+0x4fa>
 800513a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800513e:	f7fb f9cb 	bl	80004d8 <__aeabi_dmul>
 8005142:	9b06      	ldr	r3, [sp, #24]
 8005144:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005148:	199d      	adds	r5, r3, r6
 800514a:	461e      	mov	r6, r3
 800514c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005150:	f7fb fc72 	bl	8000a38 <__aeabi_d2iz>
 8005154:	9011      	str	r0, [sp, #68]	; 0x44
 8005156:	f7fb f955 	bl	8000404 <__aeabi_i2d>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005162:	f7fb f801 	bl	8000168 <__aeabi_dsub>
 8005166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800516c:	3330      	adds	r3, #48	; 0x30
 800516e:	f806 3b01 	strb.w	r3, [r6], #1
 8005172:	42ae      	cmp	r6, r5
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	d124      	bne.n	80051c4 <_dtoa_r+0x5fc>
 800517a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800517e:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <_dtoa_r+0x620>)
 8005180:	f7fa fff4 	bl	800016c <__adddf3>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800518c:	f7fb fc34 	bl	80009f8 <__aeabi_dcmpgt>
 8005190:	2800      	cmp	r0, #0
 8005192:	d171      	bne.n	8005278 <_dtoa_r+0x6b0>
 8005194:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005198:	2000      	movs	r0, #0
 800519a:	4913      	ldr	r1, [pc, #76]	; (80051e8 <_dtoa_r+0x620>)
 800519c:	f7fa ffe4 	bl	8000168 <__aeabi_dsub>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a8:	f7fb fc08 	bl	80009bc <__aeabi_dcmplt>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	f43f af2f 	beq.w	8005010 <_dtoa_r+0x448>
 80051b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051b6:	1e6a      	subs	r2, r5, #1
 80051b8:	2b30      	cmp	r3, #48	; 0x30
 80051ba:	d001      	beq.n	80051c0 <_dtoa_r+0x5f8>
 80051bc:	46ba      	mov	sl, r7
 80051be:	e04a      	b.n	8005256 <_dtoa_r+0x68e>
 80051c0:	4615      	mov	r5, r2
 80051c2:	e7f6      	b.n	80051b2 <_dtoa_r+0x5ea>
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <_dtoa_r+0x614>)
 80051c6:	f7fb f987 	bl	80004d8 <__aeabi_dmul>
 80051ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ce:	e7bd      	b.n	800514c <_dtoa_r+0x584>
 80051d0:	080076a0 	.word	0x080076a0
 80051d4:	08007678 	.word	0x08007678
 80051d8:	3ff00000 	.word	0x3ff00000
 80051dc:	40240000 	.word	0x40240000
 80051e0:	401c0000 	.word	0x401c0000
 80051e4:	40140000 	.word	0x40140000
 80051e8:	3fe00000 	.word	0x3fe00000
 80051ec:	9d06      	ldr	r5, [sp, #24]
 80051ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fb fa97 	bl	800072c <__aeabi_ddiv>
 80051fe:	f7fb fc1b 	bl	8000a38 <__aeabi_d2iz>
 8005202:	4681      	mov	r9, r0
 8005204:	f7fb f8fe 	bl	8000404 <__aeabi_i2d>
 8005208:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800520c:	f7fb f964 	bl	80004d8 <__aeabi_dmul>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4630      	mov	r0, r6
 8005216:	4639      	mov	r1, r7
 8005218:	f7fa ffa6 	bl	8000168 <__aeabi_dsub>
 800521c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005220:	f805 6b01 	strb.w	r6, [r5], #1
 8005224:	9e06      	ldr	r6, [sp, #24]
 8005226:	4602      	mov	r2, r0
 8005228:	1bae      	subs	r6, r5, r6
 800522a:	45b0      	cmp	r8, r6
 800522c:	460b      	mov	r3, r1
 800522e:	d135      	bne.n	800529c <_dtoa_r+0x6d4>
 8005230:	f7fa ff9c 	bl	800016c <__adddf3>
 8005234:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005238:	4606      	mov	r6, r0
 800523a:	460f      	mov	r7, r1
 800523c:	f7fb fbdc 	bl	80009f8 <__aeabi_dcmpgt>
 8005240:	b9c8      	cbnz	r0, 8005276 <_dtoa_r+0x6ae>
 8005242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005246:	4630      	mov	r0, r6
 8005248:	4639      	mov	r1, r7
 800524a:	f7fb fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800524e:	b110      	cbz	r0, 8005256 <_dtoa_r+0x68e>
 8005250:	f019 0f01 	tst.w	r9, #1
 8005254:	d10f      	bne.n	8005276 <_dtoa_r+0x6ae>
 8005256:	4659      	mov	r1, fp
 8005258:	4620      	mov	r0, r4
 800525a:	f000 fca4 	bl	8005ba6 <_Bfree>
 800525e:	2300      	movs	r3, #0
 8005260:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005262:	702b      	strb	r3, [r5, #0]
 8005264:	f10a 0301 	add.w	r3, sl, #1
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800526c:	2b00      	cmp	r3, #0
 800526e:	f43f acf3 	beq.w	8004c58 <_dtoa_r+0x90>
 8005272:	601d      	str	r5, [r3, #0]
 8005274:	e4f0      	b.n	8004c58 <_dtoa_r+0x90>
 8005276:	4657      	mov	r7, sl
 8005278:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800527c:	1e6b      	subs	r3, r5, #1
 800527e:	2a39      	cmp	r2, #57	; 0x39
 8005280:	d106      	bne.n	8005290 <_dtoa_r+0x6c8>
 8005282:	9a06      	ldr	r2, [sp, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	d107      	bne.n	8005298 <_dtoa_r+0x6d0>
 8005288:	2330      	movs	r3, #48	; 0x30
 800528a:	7013      	strb	r3, [r2, #0]
 800528c:	4613      	mov	r3, r2
 800528e:	3701      	adds	r7, #1
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	3201      	adds	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e791      	b.n	80051bc <_dtoa_r+0x5f4>
 8005298:	461d      	mov	r5, r3
 800529a:	e7ed      	b.n	8005278 <_dtoa_r+0x6b0>
 800529c:	2200      	movs	r2, #0
 800529e:	4b99      	ldr	r3, [pc, #612]	; (8005504 <_dtoa_r+0x93c>)
 80052a0:	f7fb f91a 	bl	80004d8 <__aeabi_dmul>
 80052a4:	2200      	movs	r2, #0
 80052a6:	2300      	movs	r3, #0
 80052a8:	4606      	mov	r6, r0
 80052aa:	460f      	mov	r7, r1
 80052ac:	f7fb fb7c 	bl	80009a8 <__aeabi_dcmpeq>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d09e      	beq.n	80051f2 <_dtoa_r+0x62a>
 80052b4:	e7cf      	b.n	8005256 <_dtoa_r+0x68e>
 80052b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b8:	2a00      	cmp	r2, #0
 80052ba:	f000 8088 	beq.w	80053ce <_dtoa_r+0x806>
 80052be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052c0:	2a01      	cmp	r2, #1
 80052c2:	dc6d      	bgt.n	80053a0 <_dtoa_r+0x7d8>
 80052c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052c6:	2a00      	cmp	r2, #0
 80052c8:	d066      	beq.n	8005398 <_dtoa_r+0x7d0>
 80052ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052ce:	464d      	mov	r5, r9
 80052d0:	9e08      	ldr	r6, [sp, #32]
 80052d2:	9a07      	ldr	r2, [sp, #28]
 80052d4:	2101      	movs	r1, #1
 80052d6:	441a      	add	r2, r3
 80052d8:	4620      	mov	r0, r4
 80052da:	4499      	add	r9, r3
 80052dc:	9207      	str	r2, [sp, #28]
 80052de:	f000 fd02 	bl	8005ce6 <__i2b>
 80052e2:	4607      	mov	r7, r0
 80052e4:	2d00      	cmp	r5, #0
 80052e6:	dd0b      	ble.n	8005300 <_dtoa_r+0x738>
 80052e8:	9b07      	ldr	r3, [sp, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dd08      	ble.n	8005300 <_dtoa_r+0x738>
 80052ee:	42ab      	cmp	r3, r5
 80052f0:	bfa8      	it	ge
 80052f2:	462b      	movge	r3, r5
 80052f4:	9a07      	ldr	r2, [sp, #28]
 80052f6:	eba9 0903 	sub.w	r9, r9, r3
 80052fa:	1aed      	subs	r5, r5, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	9307      	str	r3, [sp, #28]
 8005300:	9b08      	ldr	r3, [sp, #32]
 8005302:	b1eb      	cbz	r3, 8005340 <_dtoa_r+0x778>
 8005304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005306:	2b00      	cmp	r3, #0
 8005308:	d065      	beq.n	80053d6 <_dtoa_r+0x80e>
 800530a:	b18e      	cbz	r6, 8005330 <_dtoa_r+0x768>
 800530c:	4639      	mov	r1, r7
 800530e:	4632      	mov	r2, r6
 8005310:	4620      	mov	r0, r4
 8005312:	f000 fd87 	bl	8005e24 <__pow5mult>
 8005316:	465a      	mov	r2, fp
 8005318:	4601      	mov	r1, r0
 800531a:	4607      	mov	r7, r0
 800531c:	4620      	mov	r0, r4
 800531e:	f000 fceb 	bl	8005cf8 <__multiply>
 8005322:	4659      	mov	r1, fp
 8005324:	900a      	str	r0, [sp, #40]	; 0x28
 8005326:	4620      	mov	r0, r4
 8005328:	f000 fc3d 	bl	8005ba6 <_Bfree>
 800532c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800532e:	469b      	mov	fp, r3
 8005330:	9b08      	ldr	r3, [sp, #32]
 8005332:	1b9a      	subs	r2, r3, r6
 8005334:	d004      	beq.n	8005340 <_dtoa_r+0x778>
 8005336:	4659      	mov	r1, fp
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fd73 	bl	8005e24 <__pow5mult>
 800533e:	4683      	mov	fp, r0
 8005340:	2101      	movs	r1, #1
 8005342:	4620      	mov	r0, r4
 8005344:	f000 fccf 	bl	8005ce6 <__i2b>
 8005348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800534a:	4606      	mov	r6, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 81c6 	beq.w	80056de <_dtoa_r+0xb16>
 8005352:	461a      	mov	r2, r3
 8005354:	4601      	mov	r1, r0
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fd64 	bl	8005e24 <__pow5mult>
 800535c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800535e:	4606      	mov	r6, r0
 8005360:	2b01      	cmp	r3, #1
 8005362:	dc3e      	bgt.n	80053e2 <_dtoa_r+0x81a>
 8005364:	9b02      	ldr	r3, [sp, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d137      	bne.n	80053da <_dtoa_r+0x812>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005370:	2b00      	cmp	r3, #0
 8005372:	d134      	bne.n	80053de <_dtoa_r+0x816>
 8005374:	9b03      	ldr	r3, [sp, #12]
 8005376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800537a:	0d1b      	lsrs	r3, r3, #20
 800537c:	051b      	lsls	r3, r3, #20
 800537e:	b12b      	cbz	r3, 800538c <_dtoa_r+0x7c4>
 8005380:	9b07      	ldr	r3, [sp, #28]
 8005382:	f109 0901 	add.w	r9, r9, #1
 8005386:	3301      	adds	r3, #1
 8005388:	9307      	str	r3, [sp, #28]
 800538a:	2301      	movs	r3, #1
 800538c:	9308      	str	r3, [sp, #32]
 800538e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005390:	2b00      	cmp	r3, #0
 8005392:	d128      	bne.n	80053e6 <_dtoa_r+0x81e>
 8005394:	2001      	movs	r0, #1
 8005396:	e02e      	b.n	80053f6 <_dtoa_r+0x82e>
 8005398:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800539a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800539e:	e796      	b.n	80052ce <_dtoa_r+0x706>
 80053a0:	9b08      	ldr	r3, [sp, #32]
 80053a2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80053a6:	42b3      	cmp	r3, r6
 80053a8:	bfb7      	itett	lt
 80053aa:	9b08      	ldrlt	r3, [sp, #32]
 80053ac:	1b9e      	subge	r6, r3, r6
 80053ae:	1af2      	sublt	r2, r6, r3
 80053b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80053b2:	bfbf      	itttt	lt
 80053b4:	9608      	strlt	r6, [sp, #32]
 80053b6:	189b      	addlt	r3, r3, r2
 80053b8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80053ba:	2600      	movlt	r6, #0
 80053bc:	f1b8 0f00 	cmp.w	r8, #0
 80053c0:	bfb9      	ittee	lt
 80053c2:	eba9 0508 	sublt.w	r5, r9, r8
 80053c6:	2300      	movlt	r3, #0
 80053c8:	464d      	movge	r5, r9
 80053ca:	4643      	movge	r3, r8
 80053cc:	e781      	b.n	80052d2 <_dtoa_r+0x70a>
 80053ce:	9e08      	ldr	r6, [sp, #32]
 80053d0:	464d      	mov	r5, r9
 80053d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80053d4:	e786      	b.n	80052e4 <_dtoa_r+0x71c>
 80053d6:	9a08      	ldr	r2, [sp, #32]
 80053d8:	e7ad      	b.n	8005336 <_dtoa_r+0x76e>
 80053da:	2300      	movs	r3, #0
 80053dc:	e7d6      	b.n	800538c <_dtoa_r+0x7c4>
 80053de:	9b02      	ldr	r3, [sp, #8]
 80053e0:	e7d4      	b.n	800538c <_dtoa_r+0x7c4>
 80053e2:	2300      	movs	r3, #0
 80053e4:	9308      	str	r3, [sp, #32]
 80053e6:	6933      	ldr	r3, [r6, #16]
 80053e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053ec:	6918      	ldr	r0, [r3, #16]
 80053ee:	f000 fc2c 	bl	8005c4a <__hi0bits>
 80053f2:	f1c0 0020 	rsb	r0, r0, #32
 80053f6:	9b07      	ldr	r3, [sp, #28]
 80053f8:	4418      	add	r0, r3
 80053fa:	f010 001f 	ands.w	r0, r0, #31
 80053fe:	d047      	beq.n	8005490 <_dtoa_r+0x8c8>
 8005400:	f1c0 0320 	rsb	r3, r0, #32
 8005404:	2b04      	cmp	r3, #4
 8005406:	dd3b      	ble.n	8005480 <_dtoa_r+0x8b8>
 8005408:	9b07      	ldr	r3, [sp, #28]
 800540a:	f1c0 001c 	rsb	r0, r0, #28
 800540e:	4481      	add	r9, r0
 8005410:	4405      	add	r5, r0
 8005412:	4403      	add	r3, r0
 8005414:	9307      	str	r3, [sp, #28]
 8005416:	f1b9 0f00 	cmp.w	r9, #0
 800541a:	dd05      	ble.n	8005428 <_dtoa_r+0x860>
 800541c:	4659      	mov	r1, fp
 800541e:	464a      	mov	r2, r9
 8005420:	4620      	mov	r0, r4
 8005422:	f000 fd4d 	bl	8005ec0 <__lshift>
 8005426:	4683      	mov	fp, r0
 8005428:	9b07      	ldr	r3, [sp, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	dd05      	ble.n	800543a <_dtoa_r+0x872>
 800542e:	4631      	mov	r1, r6
 8005430:	461a      	mov	r2, r3
 8005432:	4620      	mov	r0, r4
 8005434:	f000 fd44 	bl	8005ec0 <__lshift>
 8005438:	4606      	mov	r6, r0
 800543a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800543c:	b353      	cbz	r3, 8005494 <_dtoa_r+0x8cc>
 800543e:	4631      	mov	r1, r6
 8005440:	4658      	mov	r0, fp
 8005442:	f000 fd91 	bl	8005f68 <__mcmp>
 8005446:	2800      	cmp	r0, #0
 8005448:	da24      	bge.n	8005494 <_dtoa_r+0x8cc>
 800544a:	2300      	movs	r3, #0
 800544c:	4659      	mov	r1, fp
 800544e:	220a      	movs	r2, #10
 8005450:	4620      	mov	r0, r4
 8005452:	f000 fbbf 	bl	8005bd4 <__multadd>
 8005456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005458:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800545c:	4683      	mov	fp, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8144 	beq.w	80056ec <_dtoa_r+0xb24>
 8005464:	2300      	movs	r3, #0
 8005466:	4639      	mov	r1, r7
 8005468:	220a      	movs	r2, #10
 800546a:	4620      	mov	r0, r4
 800546c:	f000 fbb2 	bl	8005bd4 <__multadd>
 8005470:	9b04      	ldr	r3, [sp, #16]
 8005472:	4607      	mov	r7, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	dc4d      	bgt.n	8005514 <_dtoa_r+0x94c>
 8005478:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800547a:	2b02      	cmp	r3, #2
 800547c:	dd4a      	ble.n	8005514 <_dtoa_r+0x94c>
 800547e:	e011      	b.n	80054a4 <_dtoa_r+0x8dc>
 8005480:	d0c9      	beq.n	8005416 <_dtoa_r+0x84e>
 8005482:	9a07      	ldr	r2, [sp, #28]
 8005484:	331c      	adds	r3, #28
 8005486:	441a      	add	r2, r3
 8005488:	4499      	add	r9, r3
 800548a:	441d      	add	r5, r3
 800548c:	4613      	mov	r3, r2
 800548e:	e7c1      	b.n	8005414 <_dtoa_r+0x84c>
 8005490:	4603      	mov	r3, r0
 8005492:	e7f6      	b.n	8005482 <_dtoa_r+0x8ba>
 8005494:	f1b8 0f00 	cmp.w	r8, #0
 8005498:	dc36      	bgt.n	8005508 <_dtoa_r+0x940>
 800549a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800549c:	2b02      	cmp	r3, #2
 800549e:	dd33      	ble.n	8005508 <_dtoa_r+0x940>
 80054a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80054a4:	9b04      	ldr	r3, [sp, #16]
 80054a6:	b963      	cbnz	r3, 80054c2 <_dtoa_r+0x8fa>
 80054a8:	4631      	mov	r1, r6
 80054aa:	2205      	movs	r2, #5
 80054ac:	4620      	mov	r0, r4
 80054ae:	f000 fb91 	bl	8005bd4 <__multadd>
 80054b2:	4601      	mov	r1, r0
 80054b4:	4606      	mov	r6, r0
 80054b6:	4658      	mov	r0, fp
 80054b8:	f000 fd56 	bl	8005f68 <__mcmp>
 80054bc:	2800      	cmp	r0, #0
 80054be:	f73f add3 	bgt.w	8005068 <_dtoa_r+0x4a0>
 80054c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054c4:	9d06      	ldr	r5, [sp, #24]
 80054c6:	ea6f 0a03 	mvn.w	sl, r3
 80054ca:	f04f 0900 	mov.w	r9, #0
 80054ce:	4631      	mov	r1, r6
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fb68 	bl	8005ba6 <_Bfree>
 80054d6:	2f00      	cmp	r7, #0
 80054d8:	f43f aebd 	beq.w	8005256 <_dtoa_r+0x68e>
 80054dc:	f1b9 0f00 	cmp.w	r9, #0
 80054e0:	d005      	beq.n	80054ee <_dtoa_r+0x926>
 80054e2:	45b9      	cmp	r9, r7
 80054e4:	d003      	beq.n	80054ee <_dtoa_r+0x926>
 80054e6:	4649      	mov	r1, r9
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 fb5c 	bl	8005ba6 <_Bfree>
 80054ee:	4639      	mov	r1, r7
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 fb58 	bl	8005ba6 <_Bfree>
 80054f6:	e6ae      	b.n	8005256 <_dtoa_r+0x68e>
 80054f8:	2600      	movs	r6, #0
 80054fa:	4637      	mov	r7, r6
 80054fc:	e7e1      	b.n	80054c2 <_dtoa_r+0x8fa>
 80054fe:	46ba      	mov	sl, r7
 8005500:	4637      	mov	r7, r6
 8005502:	e5b1      	b.n	8005068 <_dtoa_r+0x4a0>
 8005504:	40240000 	.word	0x40240000
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	f8cd 8010 	str.w	r8, [sp, #16]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80f3 	beq.w	80056fa <_dtoa_r+0xb32>
 8005514:	2d00      	cmp	r5, #0
 8005516:	dd05      	ble.n	8005524 <_dtoa_r+0x95c>
 8005518:	4639      	mov	r1, r7
 800551a:	462a      	mov	r2, r5
 800551c:	4620      	mov	r0, r4
 800551e:	f000 fccf 	bl	8005ec0 <__lshift>
 8005522:	4607      	mov	r7, r0
 8005524:	9b08      	ldr	r3, [sp, #32]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04c      	beq.n	80055c4 <_dtoa_r+0x9fc>
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fb06 	bl	8005b3e <_Balloc>
 8005532:	4605      	mov	r5, r0
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	f107 010c 	add.w	r1, r7, #12
 800553a:	3202      	adds	r2, #2
 800553c:	0092      	lsls	r2, r2, #2
 800553e:	300c      	adds	r0, #12
 8005540:	f000 faf0 	bl	8005b24 <memcpy>
 8005544:	2201      	movs	r2, #1
 8005546:	4629      	mov	r1, r5
 8005548:	4620      	mov	r0, r4
 800554a:	f000 fcb9 	bl	8005ec0 <__lshift>
 800554e:	46b9      	mov	r9, r7
 8005550:	4607      	mov	r7, r0
 8005552:	9b06      	ldr	r3, [sp, #24]
 8005554:	9307      	str	r3, [sp, #28]
 8005556:	9b02      	ldr	r3, [sp, #8]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	9308      	str	r3, [sp, #32]
 800555e:	4631      	mov	r1, r6
 8005560:	4658      	mov	r0, fp
 8005562:	f7ff faa3 	bl	8004aac <quorem>
 8005566:	4649      	mov	r1, r9
 8005568:	4605      	mov	r5, r0
 800556a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800556e:	4658      	mov	r0, fp
 8005570:	f000 fcfa 	bl	8005f68 <__mcmp>
 8005574:	463a      	mov	r2, r7
 8005576:	9002      	str	r0, [sp, #8]
 8005578:	4631      	mov	r1, r6
 800557a:	4620      	mov	r0, r4
 800557c:	f000 fd0e 	bl	8005f9c <__mdiff>
 8005580:	68c3      	ldr	r3, [r0, #12]
 8005582:	4602      	mov	r2, r0
 8005584:	bb03      	cbnz	r3, 80055c8 <_dtoa_r+0xa00>
 8005586:	4601      	mov	r1, r0
 8005588:	9009      	str	r0, [sp, #36]	; 0x24
 800558a:	4658      	mov	r0, fp
 800558c:	f000 fcec 	bl	8005f68 <__mcmp>
 8005590:	4603      	mov	r3, r0
 8005592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005594:	4611      	mov	r1, r2
 8005596:	4620      	mov	r0, r4
 8005598:	9309      	str	r3, [sp, #36]	; 0x24
 800559a:	f000 fb04 	bl	8005ba6 <_Bfree>
 800559e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a0:	b9a3      	cbnz	r3, 80055cc <_dtoa_r+0xa04>
 80055a2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055a4:	b992      	cbnz	r2, 80055cc <_dtoa_r+0xa04>
 80055a6:	9a08      	ldr	r2, [sp, #32]
 80055a8:	b982      	cbnz	r2, 80055cc <_dtoa_r+0xa04>
 80055aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055ae:	d029      	beq.n	8005604 <_dtoa_r+0xa3c>
 80055b0:	9b02      	ldr	r3, [sp, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	dd01      	ble.n	80055ba <_dtoa_r+0x9f2>
 80055b6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80055ba:	9b07      	ldr	r3, [sp, #28]
 80055bc:	1c5d      	adds	r5, r3, #1
 80055be:	f883 8000 	strb.w	r8, [r3]
 80055c2:	e784      	b.n	80054ce <_dtoa_r+0x906>
 80055c4:	4638      	mov	r0, r7
 80055c6:	e7c2      	b.n	800554e <_dtoa_r+0x986>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e7e3      	b.n	8005594 <_dtoa_r+0x9cc>
 80055cc:	9a02      	ldr	r2, [sp, #8]
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	db04      	blt.n	80055dc <_dtoa_r+0xa14>
 80055d2:	d123      	bne.n	800561c <_dtoa_r+0xa54>
 80055d4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055d6:	bb0a      	cbnz	r2, 800561c <_dtoa_r+0xa54>
 80055d8:	9a08      	ldr	r2, [sp, #32]
 80055da:	b9fa      	cbnz	r2, 800561c <_dtoa_r+0xa54>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	ddec      	ble.n	80055ba <_dtoa_r+0x9f2>
 80055e0:	4659      	mov	r1, fp
 80055e2:	2201      	movs	r2, #1
 80055e4:	4620      	mov	r0, r4
 80055e6:	f000 fc6b 	bl	8005ec0 <__lshift>
 80055ea:	4631      	mov	r1, r6
 80055ec:	4683      	mov	fp, r0
 80055ee:	f000 fcbb 	bl	8005f68 <__mcmp>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	dc03      	bgt.n	80055fe <_dtoa_r+0xa36>
 80055f6:	d1e0      	bne.n	80055ba <_dtoa_r+0x9f2>
 80055f8:	f018 0f01 	tst.w	r8, #1
 80055fc:	d0dd      	beq.n	80055ba <_dtoa_r+0x9f2>
 80055fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005602:	d1d8      	bne.n	80055b6 <_dtoa_r+0x9ee>
 8005604:	9b07      	ldr	r3, [sp, #28]
 8005606:	9a07      	ldr	r2, [sp, #28]
 8005608:	1c5d      	adds	r5, r3, #1
 800560a:	2339      	movs	r3, #57	; 0x39
 800560c:	7013      	strb	r3, [r2, #0]
 800560e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005612:	1e6a      	subs	r2, r5, #1
 8005614:	2b39      	cmp	r3, #57	; 0x39
 8005616:	d04d      	beq.n	80056b4 <_dtoa_r+0xaec>
 8005618:	3301      	adds	r3, #1
 800561a:	e052      	b.n	80056c2 <_dtoa_r+0xafa>
 800561c:	9a07      	ldr	r2, [sp, #28]
 800561e:	2b00      	cmp	r3, #0
 8005620:	f102 0501 	add.w	r5, r2, #1
 8005624:	dd06      	ble.n	8005634 <_dtoa_r+0xa6c>
 8005626:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800562a:	d0eb      	beq.n	8005604 <_dtoa_r+0xa3c>
 800562c:	f108 0801 	add.w	r8, r8, #1
 8005630:	9b07      	ldr	r3, [sp, #28]
 8005632:	e7c4      	b.n	80055be <_dtoa_r+0x9f6>
 8005634:	9b06      	ldr	r3, [sp, #24]
 8005636:	9a04      	ldr	r2, [sp, #16]
 8005638:	1aeb      	subs	r3, r5, r3
 800563a:	4293      	cmp	r3, r2
 800563c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005640:	d021      	beq.n	8005686 <_dtoa_r+0xabe>
 8005642:	4659      	mov	r1, fp
 8005644:	2300      	movs	r3, #0
 8005646:	220a      	movs	r2, #10
 8005648:	4620      	mov	r0, r4
 800564a:	f000 fac3 	bl	8005bd4 <__multadd>
 800564e:	45b9      	cmp	r9, r7
 8005650:	4683      	mov	fp, r0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	f04f 020a 	mov.w	r2, #10
 800565a:	4649      	mov	r1, r9
 800565c:	4620      	mov	r0, r4
 800565e:	d105      	bne.n	800566c <_dtoa_r+0xaa4>
 8005660:	f000 fab8 	bl	8005bd4 <__multadd>
 8005664:	4681      	mov	r9, r0
 8005666:	4607      	mov	r7, r0
 8005668:	9507      	str	r5, [sp, #28]
 800566a:	e778      	b.n	800555e <_dtoa_r+0x996>
 800566c:	f000 fab2 	bl	8005bd4 <__multadd>
 8005670:	4639      	mov	r1, r7
 8005672:	4681      	mov	r9, r0
 8005674:	2300      	movs	r3, #0
 8005676:	220a      	movs	r2, #10
 8005678:	4620      	mov	r0, r4
 800567a:	f000 faab 	bl	8005bd4 <__multadd>
 800567e:	4607      	mov	r7, r0
 8005680:	e7f2      	b.n	8005668 <_dtoa_r+0xaa0>
 8005682:	f04f 0900 	mov.w	r9, #0
 8005686:	4659      	mov	r1, fp
 8005688:	2201      	movs	r2, #1
 800568a:	4620      	mov	r0, r4
 800568c:	f000 fc18 	bl	8005ec0 <__lshift>
 8005690:	4631      	mov	r1, r6
 8005692:	4683      	mov	fp, r0
 8005694:	f000 fc68 	bl	8005f68 <__mcmp>
 8005698:	2800      	cmp	r0, #0
 800569a:	dcb8      	bgt.n	800560e <_dtoa_r+0xa46>
 800569c:	d102      	bne.n	80056a4 <_dtoa_r+0xadc>
 800569e:	f018 0f01 	tst.w	r8, #1
 80056a2:	d1b4      	bne.n	800560e <_dtoa_r+0xa46>
 80056a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056a8:	1e6a      	subs	r2, r5, #1
 80056aa:	2b30      	cmp	r3, #48	; 0x30
 80056ac:	f47f af0f 	bne.w	80054ce <_dtoa_r+0x906>
 80056b0:	4615      	mov	r5, r2
 80056b2:	e7f7      	b.n	80056a4 <_dtoa_r+0xadc>
 80056b4:	9b06      	ldr	r3, [sp, #24]
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d105      	bne.n	80056c6 <_dtoa_r+0xafe>
 80056ba:	2331      	movs	r3, #49	; 0x31
 80056bc:	9a06      	ldr	r2, [sp, #24]
 80056be:	f10a 0a01 	add.w	sl, sl, #1
 80056c2:	7013      	strb	r3, [r2, #0]
 80056c4:	e703      	b.n	80054ce <_dtoa_r+0x906>
 80056c6:	4615      	mov	r5, r2
 80056c8:	e7a1      	b.n	800560e <_dtoa_r+0xa46>
 80056ca:	4b17      	ldr	r3, [pc, #92]	; (8005728 <_dtoa_r+0xb60>)
 80056cc:	f7ff bae1 	b.w	8004c92 <_dtoa_r+0xca>
 80056d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f47f aabb 	bne.w	8004c4e <_dtoa_r+0x86>
 80056d8:	4b14      	ldr	r3, [pc, #80]	; (800572c <_dtoa_r+0xb64>)
 80056da:	f7ff bada 	b.w	8004c92 <_dtoa_r+0xca>
 80056de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	f77f ae3f 	ble.w	8005364 <_dtoa_r+0x79c>
 80056e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056e8:	9308      	str	r3, [sp, #32]
 80056ea:	e653      	b.n	8005394 <_dtoa_r+0x7cc>
 80056ec:	9b04      	ldr	r3, [sp, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dc03      	bgt.n	80056fa <_dtoa_r+0xb32>
 80056f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	f73f aed5 	bgt.w	80054a4 <_dtoa_r+0x8dc>
 80056fa:	9d06      	ldr	r5, [sp, #24]
 80056fc:	4631      	mov	r1, r6
 80056fe:	4658      	mov	r0, fp
 8005700:	f7ff f9d4 	bl	8004aac <quorem>
 8005704:	9b06      	ldr	r3, [sp, #24]
 8005706:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800570a:	f805 8b01 	strb.w	r8, [r5], #1
 800570e:	9a04      	ldr	r2, [sp, #16]
 8005710:	1aeb      	subs	r3, r5, r3
 8005712:	429a      	cmp	r2, r3
 8005714:	ddb5      	ble.n	8005682 <_dtoa_r+0xaba>
 8005716:	4659      	mov	r1, fp
 8005718:	2300      	movs	r3, #0
 800571a:	220a      	movs	r2, #10
 800571c:	4620      	mov	r0, r4
 800571e:	f000 fa59 	bl	8005bd4 <__multadd>
 8005722:	4683      	mov	fp, r0
 8005724:	e7ea      	b.n	80056fc <_dtoa_r+0xb34>
 8005726:	bf00      	nop
 8005728:	080075e0 	.word	0x080075e0
 800572c:	08007604 	.word	0x08007604

08005730 <__sflush_r>:
 8005730:	898a      	ldrh	r2, [r1, #12]
 8005732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	4605      	mov	r5, r0
 8005738:	0710      	lsls	r0, r2, #28
 800573a:	460c      	mov	r4, r1
 800573c:	d458      	bmi.n	80057f0 <__sflush_r+0xc0>
 800573e:	684b      	ldr	r3, [r1, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	dc05      	bgt.n	8005750 <__sflush_r+0x20>
 8005744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	dc02      	bgt.n	8005750 <__sflush_r+0x20>
 800574a:	2000      	movs	r0, #0
 800574c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005752:	2e00      	cmp	r6, #0
 8005754:	d0f9      	beq.n	800574a <__sflush_r+0x1a>
 8005756:	2300      	movs	r3, #0
 8005758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800575c:	682f      	ldr	r7, [r5, #0]
 800575e:	6a21      	ldr	r1, [r4, #32]
 8005760:	602b      	str	r3, [r5, #0]
 8005762:	d032      	beq.n	80057ca <__sflush_r+0x9a>
 8005764:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	075a      	lsls	r2, r3, #29
 800576a:	d505      	bpl.n	8005778 <__sflush_r+0x48>
 800576c:	6863      	ldr	r3, [r4, #4]
 800576e:	1ac0      	subs	r0, r0, r3
 8005770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005772:	b10b      	cbz	r3, 8005778 <__sflush_r+0x48>
 8005774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005776:	1ac0      	subs	r0, r0, r3
 8005778:	2300      	movs	r3, #0
 800577a:	4602      	mov	r2, r0
 800577c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800577e:	6a21      	ldr	r1, [r4, #32]
 8005780:	4628      	mov	r0, r5
 8005782:	47b0      	blx	r6
 8005784:	1c43      	adds	r3, r0, #1
 8005786:	89a3      	ldrh	r3, [r4, #12]
 8005788:	d106      	bne.n	8005798 <__sflush_r+0x68>
 800578a:	6829      	ldr	r1, [r5, #0]
 800578c:	291d      	cmp	r1, #29
 800578e:	d848      	bhi.n	8005822 <__sflush_r+0xf2>
 8005790:	4a29      	ldr	r2, [pc, #164]	; (8005838 <__sflush_r+0x108>)
 8005792:	40ca      	lsrs	r2, r1
 8005794:	07d6      	lsls	r6, r2, #31
 8005796:	d544      	bpl.n	8005822 <__sflush_r+0xf2>
 8005798:	2200      	movs	r2, #0
 800579a:	6062      	str	r2, [r4, #4]
 800579c:	6922      	ldr	r2, [r4, #16]
 800579e:	04d9      	lsls	r1, r3, #19
 80057a0:	6022      	str	r2, [r4, #0]
 80057a2:	d504      	bpl.n	80057ae <__sflush_r+0x7e>
 80057a4:	1c42      	adds	r2, r0, #1
 80057a6:	d101      	bne.n	80057ac <__sflush_r+0x7c>
 80057a8:	682b      	ldr	r3, [r5, #0]
 80057aa:	b903      	cbnz	r3, 80057ae <__sflush_r+0x7e>
 80057ac:	6560      	str	r0, [r4, #84]	; 0x54
 80057ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057b0:	602f      	str	r7, [r5, #0]
 80057b2:	2900      	cmp	r1, #0
 80057b4:	d0c9      	beq.n	800574a <__sflush_r+0x1a>
 80057b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057ba:	4299      	cmp	r1, r3
 80057bc:	d002      	beq.n	80057c4 <__sflush_r+0x94>
 80057be:	4628      	mov	r0, r5
 80057c0:	f7fe fb32 	bl	8003e28 <_free_r>
 80057c4:	2000      	movs	r0, #0
 80057c6:	6360      	str	r0, [r4, #52]	; 0x34
 80057c8:	e7c0      	b.n	800574c <__sflush_r+0x1c>
 80057ca:	2301      	movs	r3, #1
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b0      	blx	r6
 80057d0:	1c41      	adds	r1, r0, #1
 80057d2:	d1c8      	bne.n	8005766 <__sflush_r+0x36>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0c5      	beq.n	8005766 <__sflush_r+0x36>
 80057da:	2b1d      	cmp	r3, #29
 80057dc:	d001      	beq.n	80057e2 <__sflush_r+0xb2>
 80057de:	2b16      	cmp	r3, #22
 80057e0:	d101      	bne.n	80057e6 <__sflush_r+0xb6>
 80057e2:	602f      	str	r7, [r5, #0]
 80057e4:	e7b1      	b.n	800574a <__sflush_r+0x1a>
 80057e6:	89a3      	ldrh	r3, [r4, #12]
 80057e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ec:	81a3      	strh	r3, [r4, #12]
 80057ee:	e7ad      	b.n	800574c <__sflush_r+0x1c>
 80057f0:	690f      	ldr	r7, [r1, #16]
 80057f2:	2f00      	cmp	r7, #0
 80057f4:	d0a9      	beq.n	800574a <__sflush_r+0x1a>
 80057f6:	0793      	lsls	r3, r2, #30
 80057f8:	bf18      	it	ne
 80057fa:	2300      	movne	r3, #0
 80057fc:	680e      	ldr	r6, [r1, #0]
 80057fe:	bf08      	it	eq
 8005800:	694b      	ldreq	r3, [r1, #20]
 8005802:	eba6 0807 	sub.w	r8, r6, r7
 8005806:	600f      	str	r7, [r1, #0]
 8005808:	608b      	str	r3, [r1, #8]
 800580a:	f1b8 0f00 	cmp.w	r8, #0
 800580e:	dd9c      	ble.n	800574a <__sflush_r+0x1a>
 8005810:	4643      	mov	r3, r8
 8005812:	463a      	mov	r2, r7
 8005814:	6a21      	ldr	r1, [r4, #32]
 8005816:	4628      	mov	r0, r5
 8005818:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800581a:	47b0      	blx	r6
 800581c:	2800      	cmp	r0, #0
 800581e:	dc06      	bgt.n	800582e <__sflush_r+0xfe>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005826:	81a3      	strh	r3, [r4, #12]
 8005828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800582c:	e78e      	b.n	800574c <__sflush_r+0x1c>
 800582e:	4407      	add	r7, r0
 8005830:	eba8 0800 	sub.w	r8, r8, r0
 8005834:	e7e9      	b.n	800580a <__sflush_r+0xda>
 8005836:	bf00      	nop
 8005838:	20400001 	.word	0x20400001

0800583c <_fflush_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	690b      	ldr	r3, [r1, #16]
 8005840:	4605      	mov	r5, r0
 8005842:	460c      	mov	r4, r1
 8005844:	b1db      	cbz	r3, 800587e <_fflush_r+0x42>
 8005846:	b118      	cbz	r0, 8005850 <_fflush_r+0x14>
 8005848:	6983      	ldr	r3, [r0, #24]
 800584a:	b90b      	cbnz	r3, 8005850 <_fflush_r+0x14>
 800584c:	f000 f860 	bl	8005910 <__sinit>
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <_fflush_r+0x48>)
 8005852:	429c      	cmp	r4, r3
 8005854:	d109      	bne.n	800586a <_fflush_r+0x2e>
 8005856:	686c      	ldr	r4, [r5, #4]
 8005858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800585c:	b17b      	cbz	r3, 800587e <_fflush_r+0x42>
 800585e:	4621      	mov	r1, r4
 8005860:	4628      	mov	r0, r5
 8005862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005866:	f7ff bf63 	b.w	8005730 <__sflush_r>
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <_fflush_r+0x4c>)
 800586c:	429c      	cmp	r4, r3
 800586e:	d101      	bne.n	8005874 <_fflush_r+0x38>
 8005870:	68ac      	ldr	r4, [r5, #8]
 8005872:	e7f1      	b.n	8005858 <_fflush_r+0x1c>
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <_fflush_r+0x50>)
 8005876:	429c      	cmp	r4, r3
 8005878:	bf08      	it	eq
 800587a:	68ec      	ldreq	r4, [r5, #12]
 800587c:	e7ec      	b.n	8005858 <_fflush_r+0x1c>
 800587e:	2000      	movs	r0, #0
 8005880:	bd38      	pop	{r3, r4, r5, pc}
 8005882:	bf00      	nop
 8005884:	08007634 	.word	0x08007634
 8005888:	08007654 	.word	0x08007654
 800588c:	08007614 	.word	0x08007614

08005890 <std>:
 8005890:	2300      	movs	r3, #0
 8005892:	b510      	push	{r4, lr}
 8005894:	4604      	mov	r4, r0
 8005896:	e9c0 3300 	strd	r3, r3, [r0]
 800589a:	6083      	str	r3, [r0, #8]
 800589c:	8181      	strh	r1, [r0, #12]
 800589e:	6643      	str	r3, [r0, #100]	; 0x64
 80058a0:	81c2      	strh	r2, [r0, #14]
 80058a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a6:	6183      	str	r3, [r0, #24]
 80058a8:	4619      	mov	r1, r3
 80058aa:	2208      	movs	r2, #8
 80058ac:	305c      	adds	r0, #92	; 0x5c
 80058ae:	f7fe fab3 	bl	8003e18 <memset>
 80058b2:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <std+0x38>)
 80058b4:	6224      	str	r4, [r4, #32]
 80058b6:	6263      	str	r3, [r4, #36]	; 0x24
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <std+0x3c>)
 80058ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <std+0x40>)
 80058be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <std+0x44>)
 80058c2:	6323      	str	r3, [r4, #48]	; 0x30
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	bf00      	nop
 80058c8:	0800638d 	.word	0x0800638d
 80058cc:	080063af 	.word	0x080063af
 80058d0:	080063e7 	.word	0x080063e7
 80058d4:	0800640b 	.word	0x0800640b

080058d8 <_cleanup_r>:
 80058d8:	4901      	ldr	r1, [pc, #4]	; (80058e0 <_cleanup_r+0x8>)
 80058da:	f000 b885 	b.w	80059e8 <_fwalk_reent>
 80058de:	bf00      	nop
 80058e0:	0800583d 	.word	0x0800583d

080058e4 <__sfmoreglue>:
 80058e4:	b570      	push	{r4, r5, r6, lr}
 80058e6:	2568      	movs	r5, #104	; 0x68
 80058e8:	1e4a      	subs	r2, r1, #1
 80058ea:	4355      	muls	r5, r2
 80058ec:	460e      	mov	r6, r1
 80058ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058f2:	f7fe fae5 	bl	8003ec0 <_malloc_r>
 80058f6:	4604      	mov	r4, r0
 80058f8:	b140      	cbz	r0, 800590c <__sfmoreglue+0x28>
 80058fa:	2100      	movs	r1, #0
 80058fc:	e9c0 1600 	strd	r1, r6, [r0]
 8005900:	300c      	adds	r0, #12
 8005902:	60a0      	str	r0, [r4, #8]
 8005904:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005908:	f7fe fa86 	bl	8003e18 <memset>
 800590c:	4620      	mov	r0, r4
 800590e:	bd70      	pop	{r4, r5, r6, pc}

08005910 <__sinit>:
 8005910:	6983      	ldr	r3, [r0, #24]
 8005912:	b510      	push	{r4, lr}
 8005914:	4604      	mov	r4, r0
 8005916:	bb33      	cbnz	r3, 8005966 <__sinit+0x56>
 8005918:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800591c:	6503      	str	r3, [r0, #80]	; 0x50
 800591e:	4b12      	ldr	r3, [pc, #72]	; (8005968 <__sinit+0x58>)
 8005920:	4a12      	ldr	r2, [pc, #72]	; (800596c <__sinit+0x5c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6282      	str	r2, [r0, #40]	; 0x28
 8005926:	4298      	cmp	r0, r3
 8005928:	bf04      	itt	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	6183      	streq	r3, [r0, #24]
 800592e:	f000 f81f 	bl	8005970 <__sfp>
 8005932:	6060      	str	r0, [r4, #4]
 8005934:	4620      	mov	r0, r4
 8005936:	f000 f81b 	bl	8005970 <__sfp>
 800593a:	60a0      	str	r0, [r4, #8]
 800593c:	4620      	mov	r0, r4
 800593e:	f000 f817 	bl	8005970 <__sfp>
 8005942:	2200      	movs	r2, #0
 8005944:	60e0      	str	r0, [r4, #12]
 8005946:	2104      	movs	r1, #4
 8005948:	6860      	ldr	r0, [r4, #4]
 800594a:	f7ff ffa1 	bl	8005890 <std>
 800594e:	2201      	movs	r2, #1
 8005950:	2109      	movs	r1, #9
 8005952:	68a0      	ldr	r0, [r4, #8]
 8005954:	f7ff ff9c 	bl	8005890 <std>
 8005958:	2202      	movs	r2, #2
 800595a:	2112      	movs	r1, #18
 800595c:	68e0      	ldr	r0, [r4, #12]
 800595e:	f7ff ff97 	bl	8005890 <std>
 8005962:	2301      	movs	r3, #1
 8005964:	61a3      	str	r3, [r4, #24]
 8005966:	bd10      	pop	{r4, pc}
 8005968:	080075cc 	.word	0x080075cc
 800596c:	080058d9 	.word	0x080058d9

08005970 <__sfp>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	4b1b      	ldr	r3, [pc, #108]	; (80059e0 <__sfp+0x70>)
 8005974:	4607      	mov	r7, r0
 8005976:	681e      	ldr	r6, [r3, #0]
 8005978:	69b3      	ldr	r3, [r6, #24]
 800597a:	b913      	cbnz	r3, 8005982 <__sfp+0x12>
 800597c:	4630      	mov	r0, r6
 800597e:	f7ff ffc7 	bl	8005910 <__sinit>
 8005982:	3648      	adds	r6, #72	; 0x48
 8005984:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005988:	3b01      	subs	r3, #1
 800598a:	d503      	bpl.n	8005994 <__sfp+0x24>
 800598c:	6833      	ldr	r3, [r6, #0]
 800598e:	b133      	cbz	r3, 800599e <__sfp+0x2e>
 8005990:	6836      	ldr	r6, [r6, #0]
 8005992:	e7f7      	b.n	8005984 <__sfp+0x14>
 8005994:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005998:	b16d      	cbz	r5, 80059b6 <__sfp+0x46>
 800599a:	3468      	adds	r4, #104	; 0x68
 800599c:	e7f4      	b.n	8005988 <__sfp+0x18>
 800599e:	2104      	movs	r1, #4
 80059a0:	4638      	mov	r0, r7
 80059a2:	f7ff ff9f 	bl	80058e4 <__sfmoreglue>
 80059a6:	6030      	str	r0, [r6, #0]
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d1f1      	bne.n	8005990 <__sfp+0x20>
 80059ac:	230c      	movs	r3, #12
 80059ae:	4604      	mov	r4, r0
 80059b0:	603b      	str	r3, [r7, #0]
 80059b2:	4620      	mov	r0, r4
 80059b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b6:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <__sfp+0x74>)
 80059b8:	6665      	str	r5, [r4, #100]	; 0x64
 80059ba:	e9c4 5500 	strd	r5, r5, [r4]
 80059be:	60a5      	str	r5, [r4, #8]
 80059c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80059c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80059c8:	2208      	movs	r2, #8
 80059ca:	4629      	mov	r1, r5
 80059cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059d0:	f7fe fa22 	bl	8003e18 <memset>
 80059d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059dc:	e7e9      	b.n	80059b2 <__sfp+0x42>
 80059de:	bf00      	nop
 80059e0:	080075cc 	.word	0x080075cc
 80059e4:	ffff0001 	.word	0xffff0001

080059e8 <_fwalk_reent>:
 80059e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059ec:	4680      	mov	r8, r0
 80059ee:	4689      	mov	r9, r1
 80059f0:	2600      	movs	r6, #0
 80059f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059f6:	b914      	cbnz	r4, 80059fe <_fwalk_reent+0x16>
 80059f8:	4630      	mov	r0, r6
 80059fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005a02:	3f01      	subs	r7, #1
 8005a04:	d501      	bpl.n	8005a0a <_fwalk_reent+0x22>
 8005a06:	6824      	ldr	r4, [r4, #0]
 8005a08:	e7f5      	b.n	80059f6 <_fwalk_reent+0xe>
 8005a0a:	89ab      	ldrh	r3, [r5, #12]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d907      	bls.n	8005a20 <_fwalk_reent+0x38>
 8005a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a14:	3301      	adds	r3, #1
 8005a16:	d003      	beq.n	8005a20 <_fwalk_reent+0x38>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4640      	mov	r0, r8
 8005a1c:	47c8      	blx	r9
 8005a1e:	4306      	orrs	r6, r0
 8005a20:	3568      	adds	r5, #104	; 0x68
 8005a22:	e7ee      	b.n	8005a02 <_fwalk_reent+0x1a>

08005a24 <_localeconv_r>:
 8005a24:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <_localeconv_r+0x14>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6a18      	ldr	r0, [r3, #32]
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <_localeconv_r+0x18>)
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	bf08      	it	eq
 8005a30:	4618      	moveq	r0, r3
 8005a32:	30f0      	adds	r0, #240	; 0xf0
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	2000054c 	.word	0x2000054c
 8005a3c:	200005b0 	.word	0x200005b0

08005a40 <__swhatbuf_r>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	460e      	mov	r6, r1
 8005a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a48:	b096      	sub	sp, #88	; 0x58
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	4614      	mov	r4, r2
 8005a4e:	461d      	mov	r5, r3
 8005a50:	da07      	bge.n	8005a62 <__swhatbuf_r+0x22>
 8005a52:	2300      	movs	r3, #0
 8005a54:	602b      	str	r3, [r5, #0]
 8005a56:	89b3      	ldrh	r3, [r6, #12]
 8005a58:	061a      	lsls	r2, r3, #24
 8005a5a:	d410      	bmi.n	8005a7e <__swhatbuf_r+0x3e>
 8005a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a60:	e00e      	b.n	8005a80 <__swhatbuf_r+0x40>
 8005a62:	466a      	mov	r2, sp
 8005a64:	f000 fcf8 	bl	8006458 <_fstat_r>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	dbf2      	blt.n	8005a52 <__swhatbuf_r+0x12>
 8005a6c:	9a01      	ldr	r2, [sp, #4]
 8005a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a76:	425a      	negs	r2, r3
 8005a78:	415a      	adcs	r2, r3
 8005a7a:	602a      	str	r2, [r5, #0]
 8005a7c:	e7ee      	b.n	8005a5c <__swhatbuf_r+0x1c>
 8005a7e:	2340      	movs	r3, #64	; 0x40
 8005a80:	2000      	movs	r0, #0
 8005a82:	6023      	str	r3, [r4, #0]
 8005a84:	b016      	add	sp, #88	; 0x58
 8005a86:	bd70      	pop	{r4, r5, r6, pc}

08005a88 <__smakebuf_r>:
 8005a88:	898b      	ldrh	r3, [r1, #12]
 8005a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a8c:	079d      	lsls	r5, r3, #30
 8005a8e:	4606      	mov	r6, r0
 8005a90:	460c      	mov	r4, r1
 8005a92:	d507      	bpl.n	8005aa4 <__smakebuf_r+0x1c>
 8005a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	6123      	str	r3, [r4, #16]
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	6163      	str	r3, [r4, #20]
 8005aa0:	b002      	add	sp, #8
 8005aa2:	bd70      	pop	{r4, r5, r6, pc}
 8005aa4:	ab01      	add	r3, sp, #4
 8005aa6:	466a      	mov	r2, sp
 8005aa8:	f7ff ffca 	bl	8005a40 <__swhatbuf_r>
 8005aac:	9900      	ldr	r1, [sp, #0]
 8005aae:	4605      	mov	r5, r0
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f7fe fa05 	bl	8003ec0 <_malloc_r>
 8005ab6:	b948      	cbnz	r0, 8005acc <__smakebuf_r+0x44>
 8005ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005abc:	059a      	lsls	r2, r3, #22
 8005abe:	d4ef      	bmi.n	8005aa0 <__smakebuf_r+0x18>
 8005ac0:	f023 0303 	bic.w	r3, r3, #3
 8005ac4:	f043 0302 	orr.w	r3, r3, #2
 8005ac8:	81a3      	strh	r3, [r4, #12]
 8005aca:	e7e3      	b.n	8005a94 <__smakebuf_r+0xc>
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <__smakebuf_r+0x7c>)
 8005ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ad0:	89a3      	ldrh	r3, [r4, #12]
 8005ad2:	6020      	str	r0, [r4, #0]
 8005ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	9b00      	ldr	r3, [sp, #0]
 8005adc:	6120      	str	r0, [r4, #16]
 8005ade:	6163      	str	r3, [r4, #20]
 8005ae0:	9b01      	ldr	r3, [sp, #4]
 8005ae2:	b15b      	cbz	r3, 8005afc <__smakebuf_r+0x74>
 8005ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f000 fcc7 	bl	800647c <_isatty_r>
 8005aee:	b128      	cbz	r0, 8005afc <__smakebuf_r+0x74>
 8005af0:	89a3      	ldrh	r3, [r4, #12]
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	81a3      	strh	r3, [r4, #12]
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	431d      	orrs	r5, r3
 8005b00:	81a5      	strh	r5, [r4, #12]
 8005b02:	e7cd      	b.n	8005aa0 <__smakebuf_r+0x18>
 8005b04:	080058d9 	.word	0x080058d9

08005b08 <memchr>:
 8005b08:	b510      	push	{r4, lr}
 8005b0a:	b2c9      	uxtb	r1, r1
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4290      	cmp	r0, r2
 8005b10:	4603      	mov	r3, r0
 8005b12:	d101      	bne.n	8005b18 <memchr+0x10>
 8005b14:	2300      	movs	r3, #0
 8005b16:	e003      	b.n	8005b20 <memchr+0x18>
 8005b18:	781c      	ldrb	r4, [r3, #0]
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	428c      	cmp	r4, r1
 8005b1e:	d1f6      	bne.n	8005b0e <memchr+0x6>
 8005b20:	4618      	mov	r0, r3
 8005b22:	bd10      	pop	{r4, pc}

08005b24 <memcpy>:
 8005b24:	b510      	push	{r4, lr}
 8005b26:	1e43      	subs	r3, r0, #1
 8005b28:	440a      	add	r2, r1
 8005b2a:	4291      	cmp	r1, r2
 8005b2c:	d100      	bne.n	8005b30 <memcpy+0xc>
 8005b2e:	bd10      	pop	{r4, pc}
 8005b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b38:	e7f7      	b.n	8005b2a <memcpy+0x6>

08005b3a <__malloc_lock>:
 8005b3a:	4770      	bx	lr

08005b3c <__malloc_unlock>:
 8005b3c:	4770      	bx	lr

08005b3e <_Balloc>:
 8005b3e:	b570      	push	{r4, r5, r6, lr}
 8005b40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b42:	4604      	mov	r4, r0
 8005b44:	460e      	mov	r6, r1
 8005b46:	b93d      	cbnz	r5, 8005b58 <_Balloc+0x1a>
 8005b48:	2010      	movs	r0, #16
 8005b4a:	f7fe f95d 	bl	8003e08 <malloc>
 8005b4e:	6260      	str	r0, [r4, #36]	; 0x24
 8005b50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b54:	6005      	str	r5, [r0, #0]
 8005b56:	60c5      	str	r5, [r0, #12]
 8005b58:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b5a:	68eb      	ldr	r3, [r5, #12]
 8005b5c:	b183      	cbz	r3, 8005b80 <_Balloc+0x42>
 8005b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b66:	b9b8      	cbnz	r0, 8005b98 <_Balloc+0x5a>
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f506 	lsl.w	r5, r1, r6
 8005b6e:	1d6a      	adds	r2, r5, #5
 8005b70:	0092      	lsls	r2, r2, #2
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 fabf 	bl	80060f6 <_calloc_r>
 8005b78:	b160      	cbz	r0, 8005b94 <_Balloc+0x56>
 8005b7a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b7e:	e00e      	b.n	8005b9e <_Balloc+0x60>
 8005b80:	2221      	movs	r2, #33	; 0x21
 8005b82:	2104      	movs	r1, #4
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fab6 	bl	80060f6 <_calloc_r>
 8005b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b8c:	60e8      	str	r0, [r5, #12]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e4      	bne.n	8005b5e <_Balloc+0x20>
 8005b94:	2000      	movs	r0, #0
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	6802      	ldr	r2, [r0, #0]
 8005b9a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ba4:	e7f7      	b.n	8005b96 <_Balloc+0x58>

08005ba6 <_Bfree>:
 8005ba6:	b570      	push	{r4, r5, r6, lr}
 8005ba8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005baa:	4606      	mov	r6, r0
 8005bac:	460d      	mov	r5, r1
 8005bae:	b93c      	cbnz	r4, 8005bc0 <_Bfree+0x1a>
 8005bb0:	2010      	movs	r0, #16
 8005bb2:	f7fe f929 	bl	8003e08 <malloc>
 8005bb6:	6270      	str	r0, [r6, #36]	; 0x24
 8005bb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bbc:	6004      	str	r4, [r0, #0]
 8005bbe:	60c4      	str	r4, [r0, #12]
 8005bc0:	b13d      	cbz	r5, 8005bd2 <_Bfree+0x2c>
 8005bc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005bc4:	686a      	ldr	r2, [r5, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bcc:	6029      	str	r1, [r5, #0]
 8005bce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}

08005bd4 <__multadd>:
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	461f      	mov	r7, r3
 8005bda:	4606      	mov	r6, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	2300      	movs	r3, #0
 8005be0:	690d      	ldr	r5, [r1, #16]
 8005be2:	f101 0c14 	add.w	ip, r1, #20
 8005be6:	f8dc 0000 	ldr.w	r0, [ip]
 8005bea:	3301      	adds	r3, #1
 8005bec:	b281      	uxth	r1, r0
 8005bee:	fb02 7101 	mla	r1, r2, r1, r7
 8005bf2:	0c00      	lsrs	r0, r0, #16
 8005bf4:	0c0f      	lsrs	r7, r1, #16
 8005bf6:	fb02 7000 	mla	r0, r2, r0, r7
 8005bfa:	b289      	uxth	r1, r1
 8005bfc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c00:	429d      	cmp	r5, r3
 8005c02:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c06:	f84c 1b04 	str.w	r1, [ip], #4
 8005c0a:	dcec      	bgt.n	8005be6 <__multadd+0x12>
 8005c0c:	b1d7      	cbz	r7, 8005c44 <__multadd+0x70>
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc12      	bgt.n	8005c3a <__multadd+0x66>
 8005c14:	6861      	ldr	r1, [r4, #4]
 8005c16:	4630      	mov	r0, r6
 8005c18:	3101      	adds	r1, #1
 8005c1a:	f7ff ff90 	bl	8005b3e <_Balloc>
 8005c1e:	4680      	mov	r8, r0
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	f104 010c 	add.w	r1, r4, #12
 8005c26:	3202      	adds	r2, #2
 8005c28:	0092      	lsls	r2, r2, #2
 8005c2a:	300c      	adds	r0, #12
 8005c2c:	f7ff ff7a 	bl	8005b24 <memcpy>
 8005c30:	4621      	mov	r1, r4
 8005c32:	4630      	mov	r0, r6
 8005c34:	f7ff ffb7 	bl	8005ba6 <_Bfree>
 8005c38:	4644      	mov	r4, r8
 8005c3a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c3e:	3501      	adds	r5, #1
 8005c40:	615f      	str	r7, [r3, #20]
 8005c42:	6125      	str	r5, [r4, #16]
 8005c44:	4620      	mov	r0, r4
 8005c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c4a <__hi0bits>:
 8005c4a:	0c02      	lsrs	r2, r0, #16
 8005c4c:	0412      	lsls	r2, r2, #16
 8005c4e:	4603      	mov	r3, r0
 8005c50:	b9b2      	cbnz	r2, 8005c80 <__hi0bits+0x36>
 8005c52:	0403      	lsls	r3, r0, #16
 8005c54:	2010      	movs	r0, #16
 8005c56:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c5a:	bf04      	itt	eq
 8005c5c:	021b      	lsleq	r3, r3, #8
 8005c5e:	3008      	addeq	r0, #8
 8005c60:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c64:	bf04      	itt	eq
 8005c66:	011b      	lsleq	r3, r3, #4
 8005c68:	3004      	addeq	r0, #4
 8005c6a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c6e:	bf04      	itt	eq
 8005c70:	009b      	lsleq	r3, r3, #2
 8005c72:	3002      	addeq	r0, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	db06      	blt.n	8005c86 <__hi0bits+0x3c>
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	d503      	bpl.n	8005c84 <__hi0bits+0x3a>
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	4770      	bx	lr
 8005c80:	2000      	movs	r0, #0
 8005c82:	e7e8      	b.n	8005c56 <__hi0bits+0xc>
 8005c84:	2020      	movs	r0, #32
 8005c86:	4770      	bx	lr

08005c88 <__lo0bits>:
 8005c88:	6803      	ldr	r3, [r0, #0]
 8005c8a:	4601      	mov	r1, r0
 8005c8c:	f013 0207 	ands.w	r2, r3, #7
 8005c90:	d00b      	beq.n	8005caa <__lo0bits+0x22>
 8005c92:	07da      	lsls	r2, r3, #31
 8005c94:	d423      	bmi.n	8005cde <__lo0bits+0x56>
 8005c96:	0798      	lsls	r0, r3, #30
 8005c98:	bf49      	itett	mi
 8005c9a:	085b      	lsrmi	r3, r3, #1
 8005c9c:	089b      	lsrpl	r3, r3, #2
 8005c9e:	2001      	movmi	r0, #1
 8005ca0:	600b      	strmi	r3, [r1, #0]
 8005ca2:	bf5c      	itt	pl
 8005ca4:	600b      	strpl	r3, [r1, #0]
 8005ca6:	2002      	movpl	r0, #2
 8005ca8:	4770      	bx	lr
 8005caa:	b298      	uxth	r0, r3
 8005cac:	b9a8      	cbnz	r0, 8005cda <__lo0bits+0x52>
 8005cae:	2010      	movs	r0, #16
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cb6:	bf04      	itt	eq
 8005cb8:	0a1b      	lsreq	r3, r3, #8
 8005cba:	3008      	addeq	r0, #8
 8005cbc:	071a      	lsls	r2, r3, #28
 8005cbe:	bf04      	itt	eq
 8005cc0:	091b      	lsreq	r3, r3, #4
 8005cc2:	3004      	addeq	r0, #4
 8005cc4:	079a      	lsls	r2, r3, #30
 8005cc6:	bf04      	itt	eq
 8005cc8:	089b      	lsreq	r3, r3, #2
 8005cca:	3002      	addeq	r0, #2
 8005ccc:	07da      	lsls	r2, r3, #31
 8005cce:	d402      	bmi.n	8005cd6 <__lo0bits+0x4e>
 8005cd0:	085b      	lsrs	r3, r3, #1
 8005cd2:	d006      	beq.n	8005ce2 <__lo0bits+0x5a>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	600b      	str	r3, [r1, #0]
 8005cd8:	4770      	bx	lr
 8005cda:	4610      	mov	r0, r2
 8005cdc:	e7e9      	b.n	8005cb2 <__lo0bits+0x2a>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	4770      	bx	lr
 8005ce2:	2020      	movs	r0, #32
 8005ce4:	4770      	bx	lr

08005ce6 <__i2b>:
 8005ce6:	b510      	push	{r4, lr}
 8005ce8:	460c      	mov	r4, r1
 8005cea:	2101      	movs	r1, #1
 8005cec:	f7ff ff27 	bl	8005b3e <_Balloc>
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	6144      	str	r4, [r0, #20]
 8005cf4:	6102      	str	r2, [r0, #16]
 8005cf6:	bd10      	pop	{r4, pc}

08005cf8 <__multiply>:
 8005cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	690a      	ldr	r2, [r1, #16]
 8005d00:	6923      	ldr	r3, [r4, #16]
 8005d02:	4688      	mov	r8, r1
 8005d04:	429a      	cmp	r2, r3
 8005d06:	bfbe      	ittt	lt
 8005d08:	460b      	movlt	r3, r1
 8005d0a:	46a0      	movlt	r8, r4
 8005d0c:	461c      	movlt	r4, r3
 8005d0e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d12:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d1e:	eb07 0609 	add.w	r6, r7, r9
 8005d22:	42b3      	cmp	r3, r6
 8005d24:	bfb8      	it	lt
 8005d26:	3101      	addlt	r1, #1
 8005d28:	f7ff ff09 	bl	8005b3e <_Balloc>
 8005d2c:	f100 0514 	add.w	r5, r0, #20
 8005d30:	462b      	mov	r3, r5
 8005d32:	2200      	movs	r2, #0
 8005d34:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005d38:	4573      	cmp	r3, lr
 8005d3a:	d316      	bcc.n	8005d6a <__multiply+0x72>
 8005d3c:	f104 0214 	add.w	r2, r4, #20
 8005d40:	f108 0114 	add.w	r1, r8, #20
 8005d44:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d48:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	9b00      	ldr	r3, [sp, #0]
 8005d50:	9201      	str	r2, [sp, #4]
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d80c      	bhi.n	8005d70 <__multiply+0x78>
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	dd03      	ble.n	8005d62 <__multiply+0x6a>
 8005d5a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d05d      	beq.n	8005e1e <__multiply+0x126>
 8005d62:	6106      	str	r6, [r0, #16]
 8005d64:	b003      	add	sp, #12
 8005d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6a:	f843 2b04 	str.w	r2, [r3], #4
 8005d6e:	e7e3      	b.n	8005d38 <__multiply+0x40>
 8005d70:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d74:	f1bb 0f00 	cmp.w	fp, #0
 8005d78:	d023      	beq.n	8005dc2 <__multiply+0xca>
 8005d7a:	4689      	mov	r9, r1
 8005d7c:	46ac      	mov	ip, r5
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d86:	f8dc a000 	ldr.w	sl, [ip]
 8005d8a:	b2a3      	uxth	r3, r4
 8005d8c:	fa1f fa8a 	uxth.w	sl, sl
 8005d90:	fb0b a303 	mla	r3, fp, r3, sl
 8005d94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d98:	f8dc 4000 	ldr.w	r4, [ip]
 8005d9c:	4443      	add	r3, r8
 8005d9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005da2:	fb0b 840a 	mla	r4, fp, sl, r8
 8005da6:	46e2      	mov	sl, ip
 8005da8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005db2:	454f      	cmp	r7, r9
 8005db4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005db8:	f84a 3b04 	str.w	r3, [sl], #4
 8005dbc:	d82b      	bhi.n	8005e16 <__multiply+0x11e>
 8005dbe:	f8cc 8004 	str.w	r8, [ip, #4]
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	3204      	adds	r2, #4
 8005dc6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005dca:	f1ba 0f00 	cmp.w	sl, #0
 8005dce:	d020      	beq.n	8005e12 <__multiply+0x11a>
 8005dd0:	4689      	mov	r9, r1
 8005dd2:	46a8      	mov	r8, r5
 8005dd4:	f04f 0b00 	mov.w	fp, #0
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	f8b9 c000 	ldrh.w	ip, [r9]
 8005dde:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	fb0a 440c 	mla	r4, sl, ip, r4
 8005de8:	46c4      	mov	ip, r8
 8005dea:	445c      	add	r4, fp
 8005dec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005df0:	f84c 3b04 	str.w	r3, [ip], #4
 8005df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8005df8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005dfc:	0c1b      	lsrs	r3, r3, #16
 8005dfe:	fb0a b303 	mla	r3, sl, r3, fp
 8005e02:	454f      	cmp	r7, r9
 8005e04:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e08:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e0c:	d805      	bhi.n	8005e1a <__multiply+0x122>
 8005e0e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e12:	3504      	adds	r5, #4
 8005e14:	e79b      	b.n	8005d4e <__multiply+0x56>
 8005e16:	46d4      	mov	ip, sl
 8005e18:	e7b3      	b.n	8005d82 <__multiply+0x8a>
 8005e1a:	46e0      	mov	r8, ip
 8005e1c:	e7dd      	b.n	8005dda <__multiply+0xe2>
 8005e1e:	3e01      	subs	r6, #1
 8005e20:	e799      	b.n	8005d56 <__multiply+0x5e>
	...

08005e24 <__pow5mult>:
 8005e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e28:	4615      	mov	r5, r2
 8005e2a:	f012 0203 	ands.w	r2, r2, #3
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460f      	mov	r7, r1
 8005e32:	d007      	beq.n	8005e44 <__pow5mult+0x20>
 8005e34:	4c21      	ldr	r4, [pc, #132]	; (8005ebc <__pow5mult+0x98>)
 8005e36:	3a01      	subs	r2, #1
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e3e:	f7ff fec9 	bl	8005bd4 <__multadd>
 8005e42:	4607      	mov	r7, r0
 8005e44:	10ad      	asrs	r5, r5, #2
 8005e46:	d035      	beq.n	8005eb4 <__pow5mult+0x90>
 8005e48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e4a:	b93c      	cbnz	r4, 8005e5c <__pow5mult+0x38>
 8005e4c:	2010      	movs	r0, #16
 8005e4e:	f7fd ffdb 	bl	8003e08 <malloc>
 8005e52:	6270      	str	r0, [r6, #36]	; 0x24
 8005e54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e58:	6004      	str	r4, [r0, #0]
 8005e5a:	60c4      	str	r4, [r0, #12]
 8005e5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e64:	b94c      	cbnz	r4, 8005e7a <__pow5mult+0x56>
 8005e66:	f240 2171 	movw	r1, #625	; 0x271
 8005e6a:	4630      	mov	r0, r6
 8005e6c:	f7ff ff3b 	bl	8005ce6 <__i2b>
 8005e70:	2300      	movs	r3, #0
 8005e72:	4604      	mov	r4, r0
 8005e74:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e78:	6003      	str	r3, [r0, #0]
 8005e7a:	f04f 0800 	mov.w	r8, #0
 8005e7e:	07eb      	lsls	r3, r5, #31
 8005e80:	d50a      	bpl.n	8005e98 <__pow5mult+0x74>
 8005e82:	4639      	mov	r1, r7
 8005e84:	4622      	mov	r2, r4
 8005e86:	4630      	mov	r0, r6
 8005e88:	f7ff ff36 	bl	8005cf8 <__multiply>
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4630      	mov	r0, r6
 8005e92:	f7ff fe88 	bl	8005ba6 <_Bfree>
 8005e96:	464f      	mov	r7, r9
 8005e98:	106d      	asrs	r5, r5, #1
 8005e9a:	d00b      	beq.n	8005eb4 <__pow5mult+0x90>
 8005e9c:	6820      	ldr	r0, [r4, #0]
 8005e9e:	b938      	cbnz	r0, 8005eb0 <__pow5mult+0x8c>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	4621      	mov	r1, r4
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff ff27 	bl	8005cf8 <__multiply>
 8005eaa:	6020      	str	r0, [r4, #0]
 8005eac:	f8c0 8000 	str.w	r8, [r0]
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	e7e4      	b.n	8005e7e <__pow5mult+0x5a>
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eba:	bf00      	nop
 8005ebc:	08007768 	.word	0x08007768

08005ec0 <__lshift>:
 8005ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	4607      	mov	r7, r0
 8005ec8:	4616      	mov	r6, r2
 8005eca:	6923      	ldr	r3, [r4, #16]
 8005ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ed0:	eb0a 0903 	add.w	r9, sl, r3
 8005ed4:	6849      	ldr	r1, [r1, #4]
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	f109 0501 	add.w	r5, r9, #1
 8005edc:	42ab      	cmp	r3, r5
 8005ede:	db32      	blt.n	8005f46 <__lshift+0x86>
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	f7ff fe2c 	bl	8005b3e <_Balloc>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	4680      	mov	r8, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	f100 0114 	add.w	r1, r0, #20
 8005ef0:	4553      	cmp	r3, sl
 8005ef2:	db2b      	blt.n	8005f4c <__lshift+0x8c>
 8005ef4:	6920      	ldr	r0, [r4, #16]
 8005ef6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005efa:	f104 0314 	add.w	r3, r4, #20
 8005efe:	f016 021f 	ands.w	r2, r6, #31
 8005f02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f0a:	d025      	beq.n	8005f58 <__lshift+0x98>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f1c2 0e20 	rsb	lr, r2, #32
 8005f12:	468a      	mov	sl, r1
 8005f14:	681e      	ldr	r6, [r3, #0]
 8005f16:	4096      	lsls	r6, r2
 8005f18:	4330      	orrs	r0, r6
 8005f1a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005f22:	459c      	cmp	ip, r3
 8005f24:	fa20 f00e 	lsr.w	r0, r0, lr
 8005f28:	d814      	bhi.n	8005f54 <__lshift+0x94>
 8005f2a:	6048      	str	r0, [r1, #4]
 8005f2c:	b108      	cbz	r0, 8005f32 <__lshift+0x72>
 8005f2e:	f109 0502 	add.w	r5, r9, #2
 8005f32:	3d01      	subs	r5, #1
 8005f34:	4638      	mov	r0, r7
 8005f36:	f8c8 5010 	str.w	r5, [r8, #16]
 8005f3a:	4621      	mov	r1, r4
 8005f3c:	f7ff fe33 	bl	8005ba6 <_Bfree>
 8005f40:	4640      	mov	r0, r8
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f46:	3101      	adds	r1, #1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	e7c7      	b.n	8005edc <__lshift+0x1c>
 8005f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f50:	3301      	adds	r3, #1
 8005f52:	e7cd      	b.n	8005ef0 <__lshift+0x30>
 8005f54:	4651      	mov	r1, sl
 8005f56:	e7dc      	b.n	8005f12 <__lshift+0x52>
 8005f58:	3904      	subs	r1, #4
 8005f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f5e:	459c      	cmp	ip, r3
 8005f60:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f64:	d8f9      	bhi.n	8005f5a <__lshift+0x9a>
 8005f66:	e7e4      	b.n	8005f32 <__lshift+0x72>

08005f68 <__mcmp>:
 8005f68:	6903      	ldr	r3, [r0, #16]
 8005f6a:	690a      	ldr	r2, [r1, #16]
 8005f6c:	b530      	push	{r4, r5, lr}
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	d10c      	bne.n	8005f8c <__mcmp+0x24>
 8005f72:	0092      	lsls	r2, r2, #2
 8005f74:	3014      	adds	r0, #20
 8005f76:	3114      	adds	r1, #20
 8005f78:	1884      	adds	r4, r0, r2
 8005f7a:	4411      	add	r1, r2
 8005f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f84:	4295      	cmp	r5, r2
 8005f86:	d003      	beq.n	8005f90 <__mcmp+0x28>
 8005f88:	d305      	bcc.n	8005f96 <__mcmp+0x2e>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd30      	pop	{r4, r5, pc}
 8005f90:	42a0      	cmp	r0, r4
 8005f92:	d3f3      	bcc.n	8005f7c <__mcmp+0x14>
 8005f94:	e7fa      	b.n	8005f8c <__mcmp+0x24>
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f9a:	e7f7      	b.n	8005f8c <__mcmp+0x24>

08005f9c <__mdiff>:
 8005f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	460d      	mov	r5, r1
 8005fa2:	4607      	mov	r7, r0
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4614      	mov	r4, r2
 8005faa:	f7ff ffdd 	bl	8005f68 <__mcmp>
 8005fae:	1e06      	subs	r6, r0, #0
 8005fb0:	d108      	bne.n	8005fc4 <__mdiff+0x28>
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f7ff fdc2 	bl	8005b3e <_Balloc>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc4:	bfa4      	itt	ge
 8005fc6:	4623      	movge	r3, r4
 8005fc8:	462c      	movge	r4, r5
 8005fca:	4638      	mov	r0, r7
 8005fcc:	6861      	ldr	r1, [r4, #4]
 8005fce:	bfa6      	itte	ge
 8005fd0:	461d      	movge	r5, r3
 8005fd2:	2600      	movge	r6, #0
 8005fd4:	2601      	movlt	r6, #1
 8005fd6:	f7ff fdb2 	bl	8005b3e <_Balloc>
 8005fda:	f04f 0e00 	mov.w	lr, #0
 8005fde:	60c6      	str	r6, [r0, #12]
 8005fe0:	692b      	ldr	r3, [r5, #16]
 8005fe2:	6926      	ldr	r6, [r4, #16]
 8005fe4:	f104 0214 	add.w	r2, r4, #20
 8005fe8:	f105 0914 	add.w	r9, r5, #20
 8005fec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005ff0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005ff4:	f100 0114 	add.w	r1, r0, #20
 8005ff8:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ffc:	f859 5b04 	ldr.w	r5, [r9], #4
 8006000:	fa1f f38a 	uxth.w	r3, sl
 8006004:	4473      	add	r3, lr
 8006006:	b2ac      	uxth	r4, r5
 8006008:	1b1b      	subs	r3, r3, r4
 800600a:	0c2c      	lsrs	r4, r5, #16
 800600c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006010:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006014:	b29b      	uxth	r3, r3
 8006016:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800601a:	45c8      	cmp	r8, r9
 800601c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006020:	4694      	mov	ip, r2
 8006022:	f841 4b04 	str.w	r4, [r1], #4
 8006026:	d8e7      	bhi.n	8005ff8 <__mdiff+0x5c>
 8006028:	45bc      	cmp	ip, r7
 800602a:	d304      	bcc.n	8006036 <__mdiff+0x9a>
 800602c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006030:	b183      	cbz	r3, 8006054 <__mdiff+0xb8>
 8006032:	6106      	str	r6, [r0, #16]
 8006034:	e7c4      	b.n	8005fc0 <__mdiff+0x24>
 8006036:	f85c 4b04 	ldr.w	r4, [ip], #4
 800603a:	b2a2      	uxth	r2, r4
 800603c:	4472      	add	r2, lr
 800603e:	1413      	asrs	r3, r2, #16
 8006040:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006044:	b292      	uxth	r2, r2
 8006046:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800604a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800604e:	f841 2b04 	str.w	r2, [r1], #4
 8006052:	e7e9      	b.n	8006028 <__mdiff+0x8c>
 8006054:	3e01      	subs	r6, #1
 8006056:	e7e9      	b.n	800602c <__mdiff+0x90>

08006058 <__d2b>:
 8006058:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800605c:	461c      	mov	r4, r3
 800605e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006062:	2101      	movs	r1, #1
 8006064:	4690      	mov	r8, r2
 8006066:	f7ff fd6a 	bl	8005b3e <_Balloc>
 800606a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800606e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006072:	4607      	mov	r7, r0
 8006074:	bb34      	cbnz	r4, 80060c4 <__d2b+0x6c>
 8006076:	9201      	str	r2, [sp, #4]
 8006078:	f1b8 0200 	subs.w	r2, r8, #0
 800607c:	d027      	beq.n	80060ce <__d2b+0x76>
 800607e:	a802      	add	r0, sp, #8
 8006080:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006084:	f7ff fe00 	bl	8005c88 <__lo0bits>
 8006088:	9900      	ldr	r1, [sp, #0]
 800608a:	b1f0      	cbz	r0, 80060ca <__d2b+0x72>
 800608c:	9a01      	ldr	r2, [sp, #4]
 800608e:	f1c0 0320 	rsb	r3, r0, #32
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	430b      	orrs	r3, r1
 8006098:	40c2      	lsrs	r2, r0
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	9201      	str	r2, [sp, #4]
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	bf14      	ite	ne
 80060a4:	2102      	movne	r1, #2
 80060a6:	2101      	moveq	r1, #1
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	6139      	str	r1, [r7, #16]
 80060ac:	b1c4      	cbz	r4, 80060e0 <__d2b+0x88>
 80060ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80060b2:	4404      	add	r4, r0
 80060b4:	6034      	str	r4, [r6, #0]
 80060b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060ba:	6028      	str	r0, [r5, #0]
 80060bc:	4638      	mov	r0, r7
 80060be:	b002      	add	sp, #8
 80060c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060c8:	e7d5      	b.n	8006076 <__d2b+0x1e>
 80060ca:	6179      	str	r1, [r7, #20]
 80060cc:	e7e7      	b.n	800609e <__d2b+0x46>
 80060ce:	a801      	add	r0, sp, #4
 80060d0:	f7ff fdda 	bl	8005c88 <__lo0bits>
 80060d4:	2101      	movs	r1, #1
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	6139      	str	r1, [r7, #16]
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	3020      	adds	r0, #32
 80060de:	e7e5      	b.n	80060ac <__d2b+0x54>
 80060e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80060e8:	6030      	str	r0, [r6, #0]
 80060ea:	6918      	ldr	r0, [r3, #16]
 80060ec:	f7ff fdad 	bl	8005c4a <__hi0bits>
 80060f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80060f4:	e7e1      	b.n	80060ba <__d2b+0x62>

080060f6 <_calloc_r>:
 80060f6:	b538      	push	{r3, r4, r5, lr}
 80060f8:	fb02 f401 	mul.w	r4, r2, r1
 80060fc:	4621      	mov	r1, r4
 80060fe:	f7fd fedf 	bl	8003ec0 <_malloc_r>
 8006102:	4605      	mov	r5, r0
 8006104:	b118      	cbz	r0, 800610e <_calloc_r+0x18>
 8006106:	4622      	mov	r2, r4
 8006108:	2100      	movs	r1, #0
 800610a:	f7fd fe85 	bl	8003e18 <memset>
 800610e:	4628      	mov	r0, r5
 8006110:	bd38      	pop	{r3, r4, r5, pc}

08006112 <__sfputc_r>:
 8006112:	6893      	ldr	r3, [r2, #8]
 8006114:	b410      	push	{r4}
 8006116:	3b01      	subs	r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	6093      	str	r3, [r2, #8]
 800611c:	da07      	bge.n	800612e <__sfputc_r+0x1c>
 800611e:	6994      	ldr	r4, [r2, #24]
 8006120:	42a3      	cmp	r3, r4
 8006122:	db01      	blt.n	8006128 <__sfputc_r+0x16>
 8006124:	290a      	cmp	r1, #10
 8006126:	d102      	bne.n	800612e <__sfputc_r+0x1c>
 8006128:	bc10      	pop	{r4}
 800612a:	f7fe bbff 	b.w	800492c <__swbuf_r>
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	1c58      	adds	r0, r3, #1
 8006132:	6010      	str	r0, [r2, #0]
 8006134:	7019      	strb	r1, [r3, #0]
 8006136:	4608      	mov	r0, r1
 8006138:	bc10      	pop	{r4}
 800613a:	4770      	bx	lr

0800613c <__sfputs_r>:
 800613c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800613e:	4606      	mov	r6, r0
 8006140:	460f      	mov	r7, r1
 8006142:	4614      	mov	r4, r2
 8006144:	18d5      	adds	r5, r2, r3
 8006146:	42ac      	cmp	r4, r5
 8006148:	d101      	bne.n	800614e <__sfputs_r+0x12>
 800614a:	2000      	movs	r0, #0
 800614c:	e007      	b.n	800615e <__sfputs_r+0x22>
 800614e:	463a      	mov	r2, r7
 8006150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff ffdc 	bl	8006112 <__sfputc_r>
 800615a:	1c43      	adds	r3, r0, #1
 800615c:	d1f3      	bne.n	8006146 <__sfputs_r+0xa>
 800615e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006160 <_vfiprintf_r>:
 8006160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	460c      	mov	r4, r1
 8006166:	b09d      	sub	sp, #116	; 0x74
 8006168:	4617      	mov	r7, r2
 800616a:	461d      	mov	r5, r3
 800616c:	4606      	mov	r6, r0
 800616e:	b118      	cbz	r0, 8006178 <_vfiprintf_r+0x18>
 8006170:	6983      	ldr	r3, [r0, #24]
 8006172:	b90b      	cbnz	r3, 8006178 <_vfiprintf_r+0x18>
 8006174:	f7ff fbcc 	bl	8005910 <__sinit>
 8006178:	4b7c      	ldr	r3, [pc, #496]	; (800636c <_vfiprintf_r+0x20c>)
 800617a:	429c      	cmp	r4, r3
 800617c:	d158      	bne.n	8006230 <_vfiprintf_r+0xd0>
 800617e:	6874      	ldr	r4, [r6, #4]
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	0718      	lsls	r0, r3, #28
 8006184:	d55e      	bpl.n	8006244 <_vfiprintf_r+0xe4>
 8006186:	6923      	ldr	r3, [r4, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d05b      	beq.n	8006244 <_vfiprintf_r+0xe4>
 800618c:	2300      	movs	r3, #0
 800618e:	9309      	str	r3, [sp, #36]	; 0x24
 8006190:	2320      	movs	r3, #32
 8006192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006196:	2330      	movs	r3, #48	; 0x30
 8006198:	f04f 0b01 	mov.w	fp, #1
 800619c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061a0:	9503      	str	r5, [sp, #12]
 80061a2:	46b8      	mov	r8, r7
 80061a4:	4645      	mov	r5, r8
 80061a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061aa:	b10b      	cbz	r3, 80061b0 <_vfiprintf_r+0x50>
 80061ac:	2b25      	cmp	r3, #37	; 0x25
 80061ae:	d154      	bne.n	800625a <_vfiprintf_r+0xfa>
 80061b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80061b4:	d00b      	beq.n	80061ce <_vfiprintf_r+0x6e>
 80061b6:	4653      	mov	r3, sl
 80061b8:	463a      	mov	r2, r7
 80061ba:	4621      	mov	r1, r4
 80061bc:	4630      	mov	r0, r6
 80061be:	f7ff ffbd 	bl	800613c <__sfputs_r>
 80061c2:	3001      	adds	r0, #1
 80061c4:	f000 80c2 	beq.w	800634c <_vfiprintf_r+0x1ec>
 80061c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ca:	4453      	add	r3, sl
 80061cc:	9309      	str	r3, [sp, #36]	; 0x24
 80061ce:	f898 3000 	ldrb.w	r3, [r8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80ba 	beq.w	800634c <_vfiprintf_r+0x1ec>
 80061d8:	2300      	movs	r3, #0
 80061da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	9307      	str	r3, [sp, #28]
 80061e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061ea:	931a      	str	r3, [sp, #104]	; 0x68
 80061ec:	46a8      	mov	r8, r5
 80061ee:	2205      	movs	r2, #5
 80061f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80061f4:	485e      	ldr	r0, [pc, #376]	; (8006370 <_vfiprintf_r+0x210>)
 80061f6:	f7ff fc87 	bl	8005b08 <memchr>
 80061fa:	9b04      	ldr	r3, [sp, #16]
 80061fc:	bb78      	cbnz	r0, 800625e <_vfiprintf_r+0xfe>
 80061fe:	06d9      	lsls	r1, r3, #27
 8006200:	bf44      	itt	mi
 8006202:	2220      	movmi	r2, #32
 8006204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006208:	071a      	lsls	r2, r3, #28
 800620a:	bf44      	itt	mi
 800620c:	222b      	movmi	r2, #43	; 0x2b
 800620e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006212:	782a      	ldrb	r2, [r5, #0]
 8006214:	2a2a      	cmp	r2, #42	; 0x2a
 8006216:	d02a      	beq.n	800626e <_vfiprintf_r+0x10e>
 8006218:	46a8      	mov	r8, r5
 800621a:	2000      	movs	r0, #0
 800621c:	250a      	movs	r5, #10
 800621e:	9a07      	ldr	r2, [sp, #28]
 8006220:	4641      	mov	r1, r8
 8006222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006226:	3b30      	subs	r3, #48	; 0x30
 8006228:	2b09      	cmp	r3, #9
 800622a:	d969      	bls.n	8006300 <_vfiprintf_r+0x1a0>
 800622c:	b360      	cbz	r0, 8006288 <_vfiprintf_r+0x128>
 800622e:	e024      	b.n	800627a <_vfiprintf_r+0x11a>
 8006230:	4b50      	ldr	r3, [pc, #320]	; (8006374 <_vfiprintf_r+0x214>)
 8006232:	429c      	cmp	r4, r3
 8006234:	d101      	bne.n	800623a <_vfiprintf_r+0xda>
 8006236:	68b4      	ldr	r4, [r6, #8]
 8006238:	e7a2      	b.n	8006180 <_vfiprintf_r+0x20>
 800623a:	4b4f      	ldr	r3, [pc, #316]	; (8006378 <_vfiprintf_r+0x218>)
 800623c:	429c      	cmp	r4, r3
 800623e:	bf08      	it	eq
 8006240:	68f4      	ldreq	r4, [r6, #12]
 8006242:	e79d      	b.n	8006180 <_vfiprintf_r+0x20>
 8006244:	4621      	mov	r1, r4
 8006246:	4630      	mov	r0, r6
 8006248:	f7fe fbc2 	bl	80049d0 <__swsetup_r>
 800624c:	2800      	cmp	r0, #0
 800624e:	d09d      	beq.n	800618c <_vfiprintf_r+0x2c>
 8006250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006254:	b01d      	add	sp, #116	; 0x74
 8006256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625a:	46a8      	mov	r8, r5
 800625c:	e7a2      	b.n	80061a4 <_vfiprintf_r+0x44>
 800625e:	4a44      	ldr	r2, [pc, #272]	; (8006370 <_vfiprintf_r+0x210>)
 8006260:	4645      	mov	r5, r8
 8006262:	1a80      	subs	r0, r0, r2
 8006264:	fa0b f000 	lsl.w	r0, fp, r0
 8006268:	4318      	orrs	r0, r3
 800626a:	9004      	str	r0, [sp, #16]
 800626c:	e7be      	b.n	80061ec <_vfiprintf_r+0x8c>
 800626e:	9a03      	ldr	r2, [sp, #12]
 8006270:	1d11      	adds	r1, r2, #4
 8006272:	6812      	ldr	r2, [r2, #0]
 8006274:	9103      	str	r1, [sp, #12]
 8006276:	2a00      	cmp	r2, #0
 8006278:	db01      	blt.n	800627e <_vfiprintf_r+0x11e>
 800627a:	9207      	str	r2, [sp, #28]
 800627c:	e004      	b.n	8006288 <_vfiprintf_r+0x128>
 800627e:	4252      	negs	r2, r2
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	9207      	str	r2, [sp, #28]
 8006286:	9304      	str	r3, [sp, #16]
 8006288:	f898 3000 	ldrb.w	r3, [r8]
 800628c:	2b2e      	cmp	r3, #46	; 0x2e
 800628e:	d10e      	bne.n	80062ae <_vfiprintf_r+0x14e>
 8006290:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006294:	2b2a      	cmp	r3, #42	; 0x2a
 8006296:	d138      	bne.n	800630a <_vfiprintf_r+0x1aa>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	f108 0802 	add.w	r8, r8, #2
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	9203      	str	r2, [sp, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bfb8      	it	lt
 80062a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062ac:	9305      	str	r3, [sp, #20]
 80062ae:	4d33      	ldr	r5, [pc, #204]	; (800637c <_vfiprintf_r+0x21c>)
 80062b0:	2203      	movs	r2, #3
 80062b2:	f898 1000 	ldrb.w	r1, [r8]
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7ff fc26 	bl	8005b08 <memchr>
 80062bc:	b140      	cbz	r0, 80062d0 <_vfiprintf_r+0x170>
 80062be:	2340      	movs	r3, #64	; 0x40
 80062c0:	1b40      	subs	r0, r0, r5
 80062c2:	fa03 f000 	lsl.w	r0, r3, r0
 80062c6:	9b04      	ldr	r3, [sp, #16]
 80062c8:	f108 0801 	add.w	r8, r8, #1
 80062cc:	4303      	orrs	r3, r0
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	f898 1000 	ldrb.w	r1, [r8]
 80062d4:	2206      	movs	r2, #6
 80062d6:	482a      	ldr	r0, [pc, #168]	; (8006380 <_vfiprintf_r+0x220>)
 80062d8:	f108 0701 	add.w	r7, r8, #1
 80062dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062e0:	f7ff fc12 	bl	8005b08 <memchr>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d037      	beq.n	8006358 <_vfiprintf_r+0x1f8>
 80062e8:	4b26      	ldr	r3, [pc, #152]	; (8006384 <_vfiprintf_r+0x224>)
 80062ea:	bb1b      	cbnz	r3, 8006334 <_vfiprintf_r+0x1d4>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	3307      	adds	r3, #7
 80062f0:	f023 0307 	bic.w	r3, r3, #7
 80062f4:	3308      	adds	r3, #8
 80062f6:	9303      	str	r3, [sp, #12]
 80062f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062fa:	444b      	add	r3, r9
 80062fc:	9309      	str	r3, [sp, #36]	; 0x24
 80062fe:	e750      	b.n	80061a2 <_vfiprintf_r+0x42>
 8006300:	fb05 3202 	mla	r2, r5, r2, r3
 8006304:	2001      	movs	r0, #1
 8006306:	4688      	mov	r8, r1
 8006308:	e78a      	b.n	8006220 <_vfiprintf_r+0xc0>
 800630a:	2300      	movs	r3, #0
 800630c:	250a      	movs	r5, #10
 800630e:	4619      	mov	r1, r3
 8006310:	f108 0801 	add.w	r8, r8, #1
 8006314:	9305      	str	r3, [sp, #20]
 8006316:	4640      	mov	r0, r8
 8006318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800631c:	3a30      	subs	r2, #48	; 0x30
 800631e:	2a09      	cmp	r2, #9
 8006320:	d903      	bls.n	800632a <_vfiprintf_r+0x1ca>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0c3      	beq.n	80062ae <_vfiprintf_r+0x14e>
 8006326:	9105      	str	r1, [sp, #20]
 8006328:	e7c1      	b.n	80062ae <_vfiprintf_r+0x14e>
 800632a:	fb05 2101 	mla	r1, r5, r1, r2
 800632e:	2301      	movs	r3, #1
 8006330:	4680      	mov	r8, r0
 8006332:	e7f0      	b.n	8006316 <_vfiprintf_r+0x1b6>
 8006334:	ab03      	add	r3, sp, #12
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4622      	mov	r2, r4
 800633a:	4b13      	ldr	r3, [pc, #76]	; (8006388 <_vfiprintf_r+0x228>)
 800633c:	a904      	add	r1, sp, #16
 800633e:	4630      	mov	r0, r6
 8006340:	f7fd feaa 	bl	8004098 <_printf_float>
 8006344:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006348:	4681      	mov	r9, r0
 800634a:	d1d5      	bne.n	80062f8 <_vfiprintf_r+0x198>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	065b      	lsls	r3, r3, #25
 8006350:	f53f af7e 	bmi.w	8006250 <_vfiprintf_r+0xf0>
 8006354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006356:	e77d      	b.n	8006254 <_vfiprintf_r+0xf4>
 8006358:	ab03      	add	r3, sp, #12
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	4622      	mov	r2, r4
 800635e:	4b0a      	ldr	r3, [pc, #40]	; (8006388 <_vfiprintf_r+0x228>)
 8006360:	a904      	add	r1, sp, #16
 8006362:	4630      	mov	r0, r6
 8006364:	f7fe f944 	bl	80045f0 <_printf_i>
 8006368:	e7ec      	b.n	8006344 <_vfiprintf_r+0x1e4>
 800636a:	bf00      	nop
 800636c:	08007634 	.word	0x08007634
 8006370:	08007774 	.word	0x08007774
 8006374:	08007654 	.word	0x08007654
 8006378:	08007614 	.word	0x08007614
 800637c:	0800777a 	.word	0x0800777a
 8006380:	0800777e 	.word	0x0800777e
 8006384:	08004099 	.word	0x08004099
 8006388:	0800613d 	.word	0x0800613d

0800638c <__sread>:
 800638c:	b510      	push	{r4, lr}
 800638e:	460c      	mov	r4, r1
 8006390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006394:	f000 f8a6 	bl	80064e4 <_read_r>
 8006398:	2800      	cmp	r0, #0
 800639a:	bfab      	itete	ge
 800639c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800639e:	89a3      	ldrhlt	r3, [r4, #12]
 80063a0:	181b      	addge	r3, r3, r0
 80063a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063a6:	bfac      	ite	ge
 80063a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80063aa:	81a3      	strhlt	r3, [r4, #12]
 80063ac:	bd10      	pop	{r4, pc}

080063ae <__swrite>:
 80063ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063b2:	461f      	mov	r7, r3
 80063b4:	898b      	ldrh	r3, [r1, #12]
 80063b6:	4605      	mov	r5, r0
 80063b8:	05db      	lsls	r3, r3, #23
 80063ba:	460c      	mov	r4, r1
 80063bc:	4616      	mov	r6, r2
 80063be:	d505      	bpl.n	80063cc <__swrite+0x1e>
 80063c0:	2302      	movs	r3, #2
 80063c2:	2200      	movs	r2, #0
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	f000 f868 	bl	800649c <_lseek_r>
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	4632      	mov	r2, r6
 80063d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063da:	463b      	mov	r3, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063e2:	f000 b817 	b.w	8006414 <_write_r>

080063e6 <__sseek>:
 80063e6:	b510      	push	{r4, lr}
 80063e8:	460c      	mov	r4, r1
 80063ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ee:	f000 f855 	bl	800649c <_lseek_r>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	bf15      	itete	ne
 80063f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80063fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006402:	81a3      	strheq	r3, [r4, #12]
 8006404:	bf18      	it	ne
 8006406:	81a3      	strhne	r3, [r4, #12]
 8006408:	bd10      	pop	{r4, pc}

0800640a <__sclose>:
 800640a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640e:	f000 b813 	b.w	8006438 <_close_r>
	...

08006414 <_write_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4605      	mov	r5, r0
 8006418:	4608      	mov	r0, r1
 800641a:	4611      	mov	r1, r2
 800641c:	2200      	movs	r2, #0
 800641e:	4c05      	ldr	r4, [pc, #20]	; (8006434 <_write_r+0x20>)
 8006420:	6022      	str	r2, [r4, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	f7fb fb18 	bl	8001a58 <_write>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d102      	bne.n	8006432 <_write_r+0x1e>
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	b103      	cbz	r3, 8006432 <_write_r+0x1e>
 8006430:	602b      	str	r3, [r5, #0]
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	20000a84 	.word	0x20000a84

08006438 <_close_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	2300      	movs	r3, #0
 800643c:	4c05      	ldr	r4, [pc, #20]	; (8006454 <_close_r+0x1c>)
 800643e:	4605      	mov	r5, r0
 8006440:	4608      	mov	r0, r1
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	f7fc f8d7 	bl	80025f6 <_close>
 8006448:	1c43      	adds	r3, r0, #1
 800644a:	d102      	bne.n	8006452 <_close_r+0x1a>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	b103      	cbz	r3, 8006452 <_close_r+0x1a>
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	bd38      	pop	{r3, r4, r5, pc}
 8006454:	20000a84 	.word	0x20000a84

08006458 <_fstat_r>:
 8006458:	b538      	push	{r3, r4, r5, lr}
 800645a:	2300      	movs	r3, #0
 800645c:	4c06      	ldr	r4, [pc, #24]	; (8006478 <_fstat_r+0x20>)
 800645e:	4605      	mov	r5, r0
 8006460:	4608      	mov	r0, r1
 8006462:	4611      	mov	r1, r2
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	f7fc f8d1 	bl	800260c <_fstat>
 800646a:	1c43      	adds	r3, r0, #1
 800646c:	d102      	bne.n	8006474 <_fstat_r+0x1c>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	b103      	cbz	r3, 8006474 <_fstat_r+0x1c>
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	bd38      	pop	{r3, r4, r5, pc}
 8006476:	bf00      	nop
 8006478:	20000a84 	.word	0x20000a84

0800647c <_isatty_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	2300      	movs	r3, #0
 8006480:	4c05      	ldr	r4, [pc, #20]	; (8006498 <_isatty_r+0x1c>)
 8006482:	4605      	mov	r5, r0
 8006484:	4608      	mov	r0, r1
 8006486:	6023      	str	r3, [r4, #0]
 8006488:	f7fc f8cf 	bl	800262a <_isatty>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_isatty_r+0x1a>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	b103      	cbz	r3, 8006496 <_isatty_r+0x1a>
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20000a84 	.word	0x20000a84

0800649c <_lseek_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4605      	mov	r5, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	2200      	movs	r2, #0
 80064a6:	4c05      	ldr	r4, [pc, #20]	; (80064bc <_lseek_r+0x20>)
 80064a8:	6022      	str	r2, [r4, #0]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f7fc f8c7 	bl	800263e <_lseek>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	d102      	bne.n	80064ba <_lseek_r+0x1e>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	b103      	cbz	r3, 80064ba <_lseek_r+0x1e>
 80064b8:	602b      	str	r3, [r5, #0]
 80064ba:	bd38      	pop	{r3, r4, r5, pc}
 80064bc:	20000a84 	.word	0x20000a84

080064c0 <__ascii_mbtowc>:
 80064c0:	b082      	sub	sp, #8
 80064c2:	b901      	cbnz	r1, 80064c6 <__ascii_mbtowc+0x6>
 80064c4:	a901      	add	r1, sp, #4
 80064c6:	b142      	cbz	r2, 80064da <__ascii_mbtowc+0x1a>
 80064c8:	b14b      	cbz	r3, 80064de <__ascii_mbtowc+0x1e>
 80064ca:	7813      	ldrb	r3, [r2, #0]
 80064cc:	600b      	str	r3, [r1, #0]
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	1c10      	adds	r0, r2, #0
 80064d2:	bf18      	it	ne
 80064d4:	2001      	movne	r0, #1
 80064d6:	b002      	add	sp, #8
 80064d8:	4770      	bx	lr
 80064da:	4610      	mov	r0, r2
 80064dc:	e7fb      	b.n	80064d6 <__ascii_mbtowc+0x16>
 80064de:	f06f 0001 	mvn.w	r0, #1
 80064e2:	e7f8      	b.n	80064d6 <__ascii_mbtowc+0x16>

080064e4 <_read_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4605      	mov	r5, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	2200      	movs	r2, #0
 80064ee:	4c05      	ldr	r4, [pc, #20]	; (8006504 <_read_r+0x20>)
 80064f0:	6022      	str	r2, [r4, #0]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f7fc f862 	bl	80025bc <_read>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	d102      	bne.n	8006502 <_read_r+0x1e>
 80064fc:	6823      	ldr	r3, [r4, #0]
 80064fe:	b103      	cbz	r3, 8006502 <_read_r+0x1e>
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	bd38      	pop	{r3, r4, r5, pc}
 8006504:	20000a84 	.word	0x20000a84

08006508 <__ascii_wctomb>:
 8006508:	b149      	cbz	r1, 800651e <__ascii_wctomb+0x16>
 800650a:	2aff      	cmp	r2, #255	; 0xff
 800650c:	bf8b      	itete	hi
 800650e:	238a      	movhi	r3, #138	; 0x8a
 8006510:	700a      	strbls	r2, [r1, #0]
 8006512:	6003      	strhi	r3, [r0, #0]
 8006514:	2001      	movls	r0, #1
 8006516:	bf88      	it	hi
 8006518:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800651c:	4770      	bx	lr
 800651e:	4608      	mov	r0, r1
 8006520:	4770      	bx	lr
	...

08006524 <pow>:
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	b08f      	sub	sp, #60	; 0x3c
 800652a:	461d      	mov	r5, r3
 800652c:	4680      	mov	r8, r0
 800652e:	4689      	mov	r9, r1
 8006530:	4614      	mov	r4, r2
 8006532:	f000 f955 	bl	80067e0 <__ieee754_pow>
 8006536:	4fa1      	ldr	r7, [pc, #644]	; (80067bc <pow+0x298>)
 8006538:	e9cd 0100 	strd	r0, r1, [sp]
 800653c:	f997 3000 	ldrsb.w	r3, [r7]
 8006540:	463e      	mov	r6, r7
 8006542:	9302      	str	r3, [sp, #8]
 8006544:	3301      	adds	r3, #1
 8006546:	d05f      	beq.n	8006608 <pow+0xe4>
 8006548:	4622      	mov	r2, r4
 800654a:	462b      	mov	r3, r5
 800654c:	4620      	mov	r0, r4
 800654e:	4629      	mov	r1, r5
 8006550:	f7fa fa5c 	bl	8000a0c <__aeabi_dcmpun>
 8006554:	4682      	mov	sl, r0
 8006556:	2800      	cmp	r0, #0
 8006558:	d156      	bne.n	8006608 <pow+0xe4>
 800655a:	4642      	mov	r2, r8
 800655c:	464b      	mov	r3, r9
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7fa fa53 	bl	8000a0c <__aeabi_dcmpun>
 8006566:	9003      	str	r0, [sp, #12]
 8006568:	b1e8      	cbz	r0, 80065a6 <pow+0x82>
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	f7fa fa19 	bl	80009a8 <__aeabi_dcmpeq>
 8006576:	2800      	cmp	r0, #0
 8006578:	d046      	beq.n	8006608 <pow+0xe4>
 800657a:	2301      	movs	r3, #1
 800657c:	2200      	movs	r2, #0
 800657e:	9304      	str	r3, [sp, #16]
 8006580:	4b8f      	ldr	r3, [pc, #572]	; (80067c0 <pow+0x29c>)
 8006582:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006586:	9305      	str	r3, [sp, #20]
 8006588:	4b8e      	ldr	r3, [pc, #568]	; (80067c4 <pow+0x2a0>)
 800658a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800658e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006592:	9b02      	ldr	r3, [sp, #8]
 8006594:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006598:	2b02      	cmp	r3, #2
 800659a:	d031      	beq.n	8006600 <pow+0xdc>
 800659c:	a804      	add	r0, sp, #16
 800659e:	f000 fedf 	bl	8007360 <matherr>
 80065a2:	bb38      	cbnz	r0, 80065f4 <pow+0xd0>
 80065a4:	e058      	b.n	8006658 <pow+0x134>
 80065a6:	f04f 0a00 	mov.w	sl, #0
 80065aa:	f04f 0b00 	mov.w	fp, #0
 80065ae:	4652      	mov	r2, sl
 80065b0:	465b      	mov	r3, fp
 80065b2:	4640      	mov	r0, r8
 80065b4:	4649      	mov	r1, r9
 80065b6:	f7fa f9f7 	bl	80009a8 <__aeabi_dcmpeq>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d051      	beq.n	8006662 <pow+0x13e>
 80065be:	4652      	mov	r2, sl
 80065c0:	465b      	mov	r3, fp
 80065c2:	4620      	mov	r0, r4
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7fa f9ef 	bl	80009a8 <__aeabi_dcmpeq>
 80065ca:	4606      	mov	r6, r0
 80065cc:	b308      	cbz	r0, 8006612 <pow+0xee>
 80065ce:	2301      	movs	r3, #1
 80065d0:	9304      	str	r3, [sp, #16]
 80065d2:	4b7b      	ldr	r3, [pc, #492]	; (80067c0 <pow+0x29c>)
 80065d4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80065d8:	9305      	str	r3, [sp, #20]
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80065e0:	930c      	str	r3, [sp, #48]	; 0x30
 80065e2:	9b02      	ldr	r3, [sp, #8]
 80065e4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0d7      	beq.n	800659c <pow+0x78>
 80065ec:	2200      	movs	r2, #0
 80065ee:	4b75      	ldr	r3, [pc, #468]	; (80067c4 <pow+0x2a0>)
 80065f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065f6:	b11b      	cbz	r3, 8006600 <pow+0xdc>
 80065f8:	f7fd fbdc 	bl	8003db4 <__errno>
 80065fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065fe:	6003      	str	r3, [r0, #0]
 8006600:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8006604:	e9cd 3400 	strd	r3, r4, [sp]
 8006608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800660c:	b00f      	add	sp, #60	; 0x3c
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	4620      	mov	r0, r4
 8006614:	4629      	mov	r1, r5
 8006616:	f000 fe9d 	bl	8007354 <finite>
 800661a:	2800      	cmp	r0, #0
 800661c:	d0f4      	beq.n	8006608 <pow+0xe4>
 800661e:	4652      	mov	r2, sl
 8006620:	465b      	mov	r3, fp
 8006622:	4620      	mov	r0, r4
 8006624:	4629      	mov	r1, r5
 8006626:	f7fa f9c9 	bl	80009bc <__aeabi_dcmplt>
 800662a:	2800      	cmp	r0, #0
 800662c:	d0ec      	beq.n	8006608 <pow+0xe4>
 800662e:	2301      	movs	r3, #1
 8006630:	9304      	str	r3, [sp, #16]
 8006632:	4b63      	ldr	r3, [pc, #396]	; (80067c0 <pow+0x29c>)
 8006634:	960c      	str	r6, [sp, #48]	; 0x30
 8006636:	9305      	str	r3, [sp, #20]
 8006638:	f997 3000 	ldrsb.w	r3, [r7]
 800663c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006640:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006644:	b913      	cbnz	r3, 800664c <pow+0x128>
 8006646:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800664a:	e7a7      	b.n	800659c <pow+0x78>
 800664c:	2000      	movs	r0, #0
 800664e:	495e      	ldr	r1, [pc, #376]	; (80067c8 <pow+0x2a4>)
 8006650:	2b02      	cmp	r3, #2
 8006652:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006656:	d1a1      	bne.n	800659c <pow+0x78>
 8006658:	f7fd fbac 	bl	8003db4 <__errno>
 800665c:	2321      	movs	r3, #33	; 0x21
 800665e:	6003      	str	r3, [r0, #0]
 8006660:	e7c8      	b.n	80065f4 <pow+0xd0>
 8006662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006666:	f000 fe75 	bl	8007354 <finite>
 800666a:	9002      	str	r0, [sp, #8]
 800666c:	2800      	cmp	r0, #0
 800666e:	d177      	bne.n	8006760 <pow+0x23c>
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f000 fe6e 	bl	8007354 <finite>
 8006678:	2800      	cmp	r0, #0
 800667a:	d071      	beq.n	8006760 <pow+0x23c>
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	f000 fe68 	bl	8007354 <finite>
 8006684:	2800      	cmp	r0, #0
 8006686:	d06b      	beq.n	8006760 <pow+0x23c>
 8006688:	e9dd 2300 	ldrd	r2, r3, [sp]
 800668c:	4619      	mov	r1, r3
 800668e:	4610      	mov	r0, r2
 8006690:	f7fa f9bc 	bl	8000a0c <__aeabi_dcmpun>
 8006694:	f997 7000 	ldrsb.w	r7, [r7]
 8006698:	4b49      	ldr	r3, [pc, #292]	; (80067c0 <pow+0x29c>)
 800669a:	b1a0      	cbz	r0, 80066c6 <pow+0x1a2>
 800669c:	2201      	movs	r2, #1
 800669e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066a2:	9b02      	ldr	r3, [sp, #8]
 80066a4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80066a8:	930c      	str	r3, [sp, #48]	; 0x30
 80066aa:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80066ae:	2f00      	cmp	r7, #0
 80066b0:	d0c9      	beq.n	8006646 <pow+0x122>
 80066b2:	4652      	mov	r2, sl
 80066b4:	465b      	mov	r3, fp
 80066b6:	4650      	mov	r0, sl
 80066b8:	4659      	mov	r1, fp
 80066ba:	f7fa f837 	bl	800072c <__aeabi_ddiv>
 80066be:	2f02      	cmp	r7, #2
 80066c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066c4:	e7c7      	b.n	8006656 <pow+0x132>
 80066c6:	2203      	movs	r2, #3
 80066c8:	900c      	str	r0, [sp, #48]	; 0x30
 80066ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	2200      	movs	r2, #0
 80066d4:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <pow+0x2a8>)
 80066d6:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80066da:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80066de:	f7f9 fefb 	bl	80004d8 <__aeabi_dmul>
 80066e2:	4604      	mov	r4, r0
 80066e4:	460d      	mov	r5, r1
 80066e6:	bb17      	cbnz	r7, 800672e <pow+0x20a>
 80066e8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80066ec:	4b38      	ldr	r3, [pc, #224]	; (80067d0 <pow+0x2ac>)
 80066ee:	4640      	mov	r0, r8
 80066f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80066f4:	4649      	mov	r1, r9
 80066f6:	4652      	mov	r2, sl
 80066f8:	465b      	mov	r3, fp
 80066fa:	f7fa f95f 	bl	80009bc <__aeabi_dcmplt>
 80066fe:	2800      	cmp	r0, #0
 8006700:	d054      	beq.n	80067ac <pow+0x288>
 8006702:	4620      	mov	r0, r4
 8006704:	4629      	mov	r1, r5
 8006706:	f000 fe33 	bl	8007370 <rint>
 800670a:	4622      	mov	r2, r4
 800670c:	462b      	mov	r3, r5
 800670e:	f7fa f94b 	bl	80009a8 <__aeabi_dcmpeq>
 8006712:	b920      	cbnz	r0, 800671e <pow+0x1fa>
 8006714:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006718:	4b2e      	ldr	r3, [pc, #184]	; (80067d4 <pow+0x2b0>)
 800671a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800671e:	f996 3000 	ldrsb.w	r3, [r6]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d142      	bne.n	80067ac <pow+0x288>
 8006726:	f7fd fb45 	bl	8003db4 <__errno>
 800672a:	2322      	movs	r3, #34	; 0x22
 800672c:	e797      	b.n	800665e <pow+0x13a>
 800672e:	2200      	movs	r2, #0
 8006730:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <pow+0x2b4>)
 8006732:	4640      	mov	r0, r8
 8006734:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006738:	4649      	mov	r1, r9
 800673a:	4652      	mov	r2, sl
 800673c:	465b      	mov	r3, fp
 800673e:	f7fa f93d 	bl	80009bc <__aeabi_dcmplt>
 8006742:	2800      	cmp	r0, #0
 8006744:	d0eb      	beq.n	800671e <pow+0x1fa>
 8006746:	4620      	mov	r0, r4
 8006748:	4629      	mov	r1, r5
 800674a:	f000 fe11 	bl	8007370 <rint>
 800674e:	4622      	mov	r2, r4
 8006750:	462b      	mov	r3, r5
 8006752:	f7fa f929 	bl	80009a8 <__aeabi_dcmpeq>
 8006756:	2800      	cmp	r0, #0
 8006758:	d1e1      	bne.n	800671e <pow+0x1fa>
 800675a:	2200      	movs	r2, #0
 800675c:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <pow+0x2a4>)
 800675e:	e7dc      	b.n	800671a <pow+0x1f6>
 8006760:	2200      	movs	r2, #0
 8006762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006766:	2300      	movs	r3, #0
 8006768:	f7fa f91e 	bl	80009a8 <__aeabi_dcmpeq>
 800676c:	2800      	cmp	r0, #0
 800676e:	f43f af4b 	beq.w	8006608 <pow+0xe4>
 8006772:	4640      	mov	r0, r8
 8006774:	4649      	mov	r1, r9
 8006776:	f000 fded 	bl	8007354 <finite>
 800677a:	2800      	cmp	r0, #0
 800677c:	f43f af44 	beq.w	8006608 <pow+0xe4>
 8006780:	4620      	mov	r0, r4
 8006782:	4629      	mov	r1, r5
 8006784:	f000 fde6 	bl	8007354 <finite>
 8006788:	2800      	cmp	r0, #0
 800678a:	f43f af3d 	beq.w	8006608 <pow+0xe4>
 800678e:	2304      	movs	r3, #4
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <pow+0x29c>)
 8006794:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006798:	9305      	str	r3, [sp, #20]
 800679a:	2300      	movs	r3, #0
 800679c:	2400      	movs	r4, #0
 800679e:	930c      	str	r3, [sp, #48]	; 0x30
 80067a0:	2300      	movs	r3, #0
 80067a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80067a6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80067aa:	e7b8      	b.n	800671e <pow+0x1fa>
 80067ac:	a804      	add	r0, sp, #16
 80067ae:	f000 fdd7 	bl	8007360 <matherr>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f47f af1e 	bne.w	80065f4 <pow+0xd0>
 80067b8:	e7b5      	b.n	8006726 <pow+0x202>
 80067ba:	bf00      	nop
 80067bc:	2000071c 	.word	0x2000071c
 80067c0:	08007890 	.word	0x08007890
 80067c4:	3ff00000 	.word	0x3ff00000
 80067c8:	fff00000 	.word	0xfff00000
 80067cc:	3fe00000 	.word	0x3fe00000
 80067d0:	47efffff 	.word	0x47efffff
 80067d4:	c7efffff 	.word	0xc7efffff
 80067d8:	7ff00000 	.word	0x7ff00000
 80067dc:	00000000 	.word	0x00000000

080067e0 <__ieee754_pow>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	b091      	sub	sp, #68	; 0x44
 80067e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067ea:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80067ee:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80067f2:	ea55 0302 	orrs.w	r3, r5, r2
 80067f6:	4607      	mov	r7, r0
 80067f8:	4688      	mov	r8, r1
 80067fa:	f000 84b7 	beq.w	800716c <__ieee754_pow+0x98c>
 80067fe:	4b80      	ldr	r3, [pc, #512]	; (8006a00 <__ieee754_pow+0x220>)
 8006800:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8006804:	429c      	cmp	r4, r3
 8006806:	4689      	mov	r9, r1
 8006808:	4682      	mov	sl, r0
 800680a:	dc09      	bgt.n	8006820 <__ieee754_pow+0x40>
 800680c:	d103      	bne.n	8006816 <__ieee754_pow+0x36>
 800680e:	b938      	cbnz	r0, 8006820 <__ieee754_pow+0x40>
 8006810:	42a5      	cmp	r5, r4
 8006812:	dc0d      	bgt.n	8006830 <__ieee754_pow+0x50>
 8006814:	e001      	b.n	800681a <__ieee754_pow+0x3a>
 8006816:	429d      	cmp	r5, r3
 8006818:	dc02      	bgt.n	8006820 <__ieee754_pow+0x40>
 800681a:	429d      	cmp	r5, r3
 800681c:	d10e      	bne.n	800683c <__ieee754_pow+0x5c>
 800681e:	b16a      	cbz	r2, 800683c <__ieee754_pow+0x5c>
 8006820:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006824:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006828:	ea54 030a 	orrs.w	r3, r4, sl
 800682c:	f000 849e 	beq.w	800716c <__ieee754_pow+0x98c>
 8006830:	4874      	ldr	r0, [pc, #464]	; (8006a04 <__ieee754_pow+0x224>)
 8006832:	b011      	add	sp, #68	; 0x44
 8006834:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	f000 bd94 	b.w	8007364 <nan>
 800683c:	f1b9 0f00 	cmp.w	r9, #0
 8006840:	da53      	bge.n	80068ea <__ieee754_pow+0x10a>
 8006842:	4b71      	ldr	r3, [pc, #452]	; (8006a08 <__ieee754_pow+0x228>)
 8006844:	429d      	cmp	r5, r3
 8006846:	dc4e      	bgt.n	80068e6 <__ieee754_pow+0x106>
 8006848:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800684c:	429d      	cmp	r5, r3
 800684e:	dd4c      	ble.n	80068ea <__ieee754_pow+0x10a>
 8006850:	152b      	asrs	r3, r5, #20
 8006852:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006856:	2b14      	cmp	r3, #20
 8006858:	dd28      	ble.n	80068ac <__ieee754_pow+0xcc>
 800685a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800685e:	fa22 f103 	lsr.w	r1, r2, r3
 8006862:	fa01 f303 	lsl.w	r3, r1, r3
 8006866:	4293      	cmp	r3, r2
 8006868:	d13f      	bne.n	80068ea <__ieee754_pow+0x10a>
 800686a:	f001 0101 	and.w	r1, r1, #1
 800686e:	f1c1 0302 	rsb	r3, r1, #2
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	2a00      	cmp	r2, #0
 8006876:	d15c      	bne.n	8006932 <__ieee754_pow+0x152>
 8006878:	4b61      	ldr	r3, [pc, #388]	; (8006a00 <__ieee754_pow+0x220>)
 800687a:	429d      	cmp	r5, r3
 800687c:	d126      	bne.n	80068cc <__ieee754_pow+0xec>
 800687e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006882:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006886:	ea53 030a 	orrs.w	r3, r3, sl
 800688a:	f000 846f 	beq.w	800716c <__ieee754_pow+0x98c>
 800688e:	4b5f      	ldr	r3, [pc, #380]	; (8006a0c <__ieee754_pow+0x22c>)
 8006890:	429c      	cmp	r4, r3
 8006892:	dd2c      	ble.n	80068ee <__ieee754_pow+0x10e>
 8006894:	2e00      	cmp	r6, #0
 8006896:	f280 846f 	bge.w	8007178 <__ieee754_pow+0x998>
 800689a:	f04f 0b00 	mov.w	fp, #0
 800689e:	f04f 0c00 	mov.w	ip, #0
 80068a2:	4658      	mov	r0, fp
 80068a4:	4661      	mov	r1, ip
 80068a6:	b011      	add	sp, #68	; 0x44
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	d13e      	bne.n	800692e <__ieee754_pow+0x14e>
 80068b0:	f1c3 0314 	rsb	r3, r3, #20
 80068b4:	fa45 f103 	asr.w	r1, r5, r3
 80068b8:	fa01 f303 	lsl.w	r3, r1, r3
 80068bc:	42ab      	cmp	r3, r5
 80068be:	f040 8463 	bne.w	8007188 <__ieee754_pow+0x9a8>
 80068c2:	f001 0101 	and.w	r1, r1, #1
 80068c6:	f1c1 0302 	rsb	r3, r1, #2
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	4b50      	ldr	r3, [pc, #320]	; (8006a10 <__ieee754_pow+0x230>)
 80068ce:	429d      	cmp	r5, r3
 80068d0:	d114      	bne.n	80068fc <__ieee754_pow+0x11c>
 80068d2:	2e00      	cmp	r6, #0
 80068d4:	f280 8454 	bge.w	8007180 <__ieee754_pow+0x9a0>
 80068d8:	463a      	mov	r2, r7
 80068da:	4643      	mov	r3, r8
 80068dc:	2000      	movs	r0, #0
 80068de:	494c      	ldr	r1, [pc, #304]	; (8006a10 <__ieee754_pow+0x230>)
 80068e0:	f7f9 ff24 	bl	800072c <__aeabi_ddiv>
 80068e4:	e013      	b.n	800690e <__ieee754_pow+0x12e>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e7c3      	b.n	8006872 <__ieee754_pow+0x92>
 80068ea:	2300      	movs	r3, #0
 80068ec:	e7c1      	b.n	8006872 <__ieee754_pow+0x92>
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	dad3      	bge.n	800689a <__ieee754_pow+0xba>
 80068f2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80068f6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80068fa:	e7d2      	b.n	80068a2 <__ieee754_pow+0xc2>
 80068fc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8006900:	d108      	bne.n	8006914 <__ieee754_pow+0x134>
 8006902:	463a      	mov	r2, r7
 8006904:	4643      	mov	r3, r8
 8006906:	4638      	mov	r0, r7
 8006908:	4641      	mov	r1, r8
 800690a:	f7f9 fde5 	bl	80004d8 <__aeabi_dmul>
 800690e:	4683      	mov	fp, r0
 8006910:	468c      	mov	ip, r1
 8006912:	e7c6      	b.n	80068a2 <__ieee754_pow+0xc2>
 8006914:	4b3f      	ldr	r3, [pc, #252]	; (8006a14 <__ieee754_pow+0x234>)
 8006916:	429e      	cmp	r6, r3
 8006918:	d10b      	bne.n	8006932 <__ieee754_pow+0x152>
 800691a:	f1b9 0f00 	cmp.w	r9, #0
 800691e:	db08      	blt.n	8006932 <__ieee754_pow+0x152>
 8006920:	4638      	mov	r0, r7
 8006922:	4641      	mov	r1, r8
 8006924:	b011      	add	sp, #68	; 0x44
 8006926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	f000 bc63 	b.w	80071f4 <__ieee754_sqrt>
 800692e:	2300      	movs	r3, #0
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	4638      	mov	r0, r7
 8006934:	4641      	mov	r1, r8
 8006936:	f000 fd09 	bl	800734c <fabs>
 800693a:	4683      	mov	fp, r0
 800693c:	468c      	mov	ip, r1
 800693e:	f1ba 0f00 	cmp.w	sl, #0
 8006942:	d12b      	bne.n	800699c <__ieee754_pow+0x1bc>
 8006944:	b124      	cbz	r4, 8006950 <__ieee754_pow+0x170>
 8006946:	4b32      	ldr	r3, [pc, #200]	; (8006a10 <__ieee754_pow+0x230>)
 8006948:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800694c:	429a      	cmp	r2, r3
 800694e:	d125      	bne.n	800699c <__ieee754_pow+0x1bc>
 8006950:	2e00      	cmp	r6, #0
 8006952:	da07      	bge.n	8006964 <__ieee754_pow+0x184>
 8006954:	465a      	mov	r2, fp
 8006956:	4663      	mov	r3, ip
 8006958:	2000      	movs	r0, #0
 800695a:	492d      	ldr	r1, [pc, #180]	; (8006a10 <__ieee754_pow+0x230>)
 800695c:	f7f9 fee6 	bl	800072c <__aeabi_ddiv>
 8006960:	4683      	mov	fp, r0
 8006962:	468c      	mov	ip, r1
 8006964:	f1b9 0f00 	cmp.w	r9, #0
 8006968:	da9b      	bge.n	80068a2 <__ieee754_pow+0xc2>
 800696a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800696e:	9b00      	ldr	r3, [sp, #0]
 8006970:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006974:	4323      	orrs	r3, r4
 8006976:	d108      	bne.n	800698a <__ieee754_pow+0x1aa>
 8006978:	465a      	mov	r2, fp
 800697a:	4663      	mov	r3, ip
 800697c:	4658      	mov	r0, fp
 800697e:	4661      	mov	r1, ip
 8006980:	f7f9 fbf2 	bl	8000168 <__aeabi_dsub>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	e7aa      	b.n	80068e0 <__ieee754_pow+0x100>
 800698a:	9b00      	ldr	r3, [sp, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d188      	bne.n	80068a2 <__ieee754_pow+0xc2>
 8006990:	4658      	mov	r0, fp
 8006992:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006996:	4683      	mov	fp, r0
 8006998:	469c      	mov	ip, r3
 800699a:	e782      	b.n	80068a2 <__ieee754_pow+0xc2>
 800699c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80069a0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80069a4:	930d      	str	r3, [sp, #52]	; 0x34
 80069a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069a8:	9b00      	ldr	r3, [sp, #0]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d104      	bne.n	80069b8 <__ieee754_pow+0x1d8>
 80069ae:	463a      	mov	r2, r7
 80069b0:	4643      	mov	r3, r8
 80069b2:	4638      	mov	r0, r7
 80069b4:	4641      	mov	r1, r8
 80069b6:	e7e3      	b.n	8006980 <__ieee754_pow+0x1a0>
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <__ieee754_pow+0x238>)
 80069ba:	429d      	cmp	r5, r3
 80069bc:	f340 80fe 	ble.w	8006bbc <__ieee754_pow+0x3dc>
 80069c0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80069c4:	429d      	cmp	r5, r3
 80069c6:	dd0b      	ble.n	80069e0 <__ieee754_pow+0x200>
 80069c8:	4b10      	ldr	r3, [pc, #64]	; (8006a0c <__ieee754_pow+0x22c>)
 80069ca:	429c      	cmp	r4, r3
 80069cc:	dc0e      	bgt.n	80069ec <__ieee754_pow+0x20c>
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	f6bf af63 	bge.w	800689a <__ieee754_pow+0xba>
 80069d4:	a308      	add	r3, pc, #32	; (adr r3, 80069f8 <__ieee754_pow+0x218>)
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	4610      	mov	r0, r2
 80069dc:	4619      	mov	r1, r3
 80069de:	e794      	b.n	800690a <__ieee754_pow+0x12a>
 80069e0:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <__ieee754_pow+0x23c>)
 80069e2:	429c      	cmp	r4, r3
 80069e4:	ddf3      	ble.n	80069ce <__ieee754_pow+0x1ee>
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <__ieee754_pow+0x230>)
 80069e8:	429c      	cmp	r4, r3
 80069ea:	dd19      	ble.n	8006a20 <__ieee754_pow+0x240>
 80069ec:	2e00      	cmp	r6, #0
 80069ee:	dcf1      	bgt.n	80069d4 <__ieee754_pow+0x1f4>
 80069f0:	e753      	b.n	800689a <__ieee754_pow+0xba>
 80069f2:	bf00      	nop
 80069f4:	f3af 8000 	nop.w
 80069f8:	8800759c 	.word	0x8800759c
 80069fc:	7e37e43c 	.word	0x7e37e43c
 8006a00:	7ff00000 	.word	0x7ff00000
 8006a04:	08007779 	.word	0x08007779
 8006a08:	433fffff 	.word	0x433fffff
 8006a0c:	3fefffff 	.word	0x3fefffff
 8006a10:	3ff00000 	.word	0x3ff00000
 8006a14:	3fe00000 	.word	0x3fe00000
 8006a18:	41e00000 	.word	0x41e00000
 8006a1c:	3feffffe 	.word	0x3feffffe
 8006a20:	4661      	mov	r1, ip
 8006a22:	2200      	movs	r2, #0
 8006a24:	4b60      	ldr	r3, [pc, #384]	; (8006ba8 <__ieee754_pow+0x3c8>)
 8006a26:	4658      	mov	r0, fp
 8006a28:	f7f9 fb9e 	bl	8000168 <__aeabi_dsub>
 8006a2c:	a354      	add	r3, pc, #336	; (adr r3, 8006b80 <__ieee754_pow+0x3a0>)
 8006a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a32:	4604      	mov	r4, r0
 8006a34:	460d      	mov	r5, r1
 8006a36:	f7f9 fd4f 	bl	80004d8 <__aeabi_dmul>
 8006a3a:	a353      	add	r3, pc, #332	; (adr r3, 8006b88 <__ieee754_pow+0x3a8>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	4606      	mov	r6, r0
 8006a42:	460f      	mov	r7, r1
 8006a44:	4620      	mov	r0, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	f7f9 fd46 	bl	80004d8 <__aeabi_dmul>
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4682      	mov	sl, r0
 8006a50:	468b      	mov	fp, r1
 8006a52:	4b56      	ldr	r3, [pc, #344]	; (8006bac <__ieee754_pow+0x3cc>)
 8006a54:	4620      	mov	r0, r4
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7f9 fd3e 	bl	80004d8 <__aeabi_dmul>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	460b      	mov	r3, r1
 8006a60:	a14b      	add	r1, pc, #300	; (adr r1, 8006b90 <__ieee754_pow+0x3b0>)
 8006a62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a66:	f7f9 fb7f 	bl	8000168 <__aeabi_dsub>
 8006a6a:	4622      	mov	r2, r4
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	f7f9 fd33 	bl	80004d8 <__aeabi_dmul>
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	2000      	movs	r0, #0
 8006a78:	494d      	ldr	r1, [pc, #308]	; (8006bb0 <__ieee754_pow+0x3d0>)
 8006a7a:	f7f9 fb75 	bl	8000168 <__aeabi_dsub>
 8006a7e:	4622      	mov	r2, r4
 8006a80:	462b      	mov	r3, r5
 8006a82:	4680      	mov	r8, r0
 8006a84:	4689      	mov	r9, r1
 8006a86:	4620      	mov	r0, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f7f9 fd25 	bl	80004d8 <__aeabi_dmul>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4640      	mov	r0, r8
 8006a94:	4649      	mov	r1, r9
 8006a96:	f7f9 fd1f 	bl	80004d8 <__aeabi_dmul>
 8006a9a:	a33f      	add	r3, pc, #252	; (adr r3, 8006b98 <__ieee754_pow+0x3b8>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 fd1a 	bl	80004d8 <__aeabi_dmul>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	4659      	mov	r1, fp
 8006aac:	f7f9 fb5c 	bl	8000168 <__aeabi_dsub>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4639      	mov	r1, r7
 8006abc:	f7f9 fb56 	bl	800016c <__adddf3>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	468b      	mov	fp, r1
 8006ac4:	4682      	mov	sl, r0
 8006ac6:	4632      	mov	r2, r6
 8006ac8:	463b      	mov	r3, r7
 8006aca:	f7f9 fb4d 	bl	8000168 <__aeabi_dsub>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	f7f9 fb47 	bl	8000168 <__aeabi_dsub>
 8006ada:	9b00      	ldr	r3, [sp, #0]
 8006adc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	bf0c      	ite	eq
 8006ae8:	4c32      	ldreq	r4, [pc, #200]	; (8006bb4 <__ieee754_pow+0x3d4>)
 8006aea:	4c2f      	ldrne	r4, [pc, #188]	; (8006ba8 <__ieee754_pow+0x3c8>)
 8006aec:	4606      	mov	r6, r0
 8006aee:	e9cd 3400 	strd	r3, r4, [sp]
 8006af2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006af6:	2400      	movs	r4, #0
 8006af8:	460f      	mov	r7, r1
 8006afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006afe:	4622      	mov	r2, r4
 8006b00:	462b      	mov	r3, r5
 8006b02:	f7f9 fb31 	bl	8000168 <__aeabi_dsub>
 8006b06:	4652      	mov	r2, sl
 8006b08:	465b      	mov	r3, fp
 8006b0a:	f7f9 fce5 	bl	80004d8 <__aeabi_dmul>
 8006b0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b12:	4680      	mov	r8, r0
 8006b14:	4689      	mov	r9, r1
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fcdd 	bl	80004d8 <__aeabi_dmul>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4640      	mov	r0, r8
 8006b24:	4649      	mov	r1, r9
 8006b26:	f7f9 fb21 	bl	800016c <__adddf3>
 8006b2a:	4622      	mov	r2, r4
 8006b2c:	462b      	mov	r3, r5
 8006b2e:	4680      	mov	r8, r0
 8006b30:	4689      	mov	r9, r1
 8006b32:	4650      	mov	r0, sl
 8006b34:	4659      	mov	r1, fp
 8006b36:	f7f9 fccf 	bl	80004d8 <__aeabi_dmul>
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	460d      	mov	r5, r1
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4602      	mov	r2, r0
 8006b42:	4649      	mov	r1, r9
 8006b44:	4640      	mov	r0, r8
 8006b46:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b4a:	f7f9 fb0f 	bl	800016c <__adddf3>
 8006b4e:	4b1a      	ldr	r3, [pc, #104]	; (8006bb8 <__ieee754_pow+0x3d8>)
 8006b50:	4682      	mov	sl, r0
 8006b52:	4299      	cmp	r1, r3
 8006b54:	460f      	mov	r7, r1
 8006b56:	460e      	mov	r6, r1
 8006b58:	f340 82e1 	ble.w	800711e <__ieee754_pow+0x93e>
 8006b5c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006b60:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006b64:	4303      	orrs	r3, r0
 8006b66:	f000 81db 	beq.w	8006f20 <__ieee754_pow+0x740>
 8006b6a:	a30d      	add	r3, pc, #52	; (adr r3, 8006ba0 <__ieee754_pow+0x3c0>)
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b74:	f7f9 fcb0 	bl	80004d8 <__aeabi_dmul>
 8006b78:	a309      	add	r3, pc, #36	; (adr r3, 8006ba0 <__ieee754_pow+0x3c0>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	e6c4      	b.n	800690a <__ieee754_pow+0x12a>
 8006b80:	60000000 	.word	0x60000000
 8006b84:	3ff71547 	.word	0x3ff71547
 8006b88:	f85ddf44 	.word	0xf85ddf44
 8006b8c:	3e54ae0b 	.word	0x3e54ae0b
 8006b90:	55555555 	.word	0x55555555
 8006b94:	3fd55555 	.word	0x3fd55555
 8006b98:	652b82fe 	.word	0x652b82fe
 8006b9c:	3ff71547 	.word	0x3ff71547
 8006ba0:	8800759c 	.word	0x8800759c
 8006ba4:	7e37e43c 	.word	0x7e37e43c
 8006ba8:	3ff00000 	.word	0x3ff00000
 8006bac:	3fd00000 	.word	0x3fd00000
 8006bb0:	3fe00000 	.word	0x3fe00000
 8006bb4:	bff00000 	.word	0xbff00000
 8006bb8:	408fffff 	.word	0x408fffff
 8006bbc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006bc0:	f04f 0200 	mov.w	r2, #0
 8006bc4:	da08      	bge.n	8006bd8 <__ieee754_pow+0x3f8>
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	4bcd      	ldr	r3, [pc, #820]	; (8006f00 <__ieee754_pow+0x720>)
 8006bca:	4661      	mov	r1, ip
 8006bcc:	f7f9 fc84 	bl	80004d8 <__aeabi_dmul>
 8006bd0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006bd4:	4683      	mov	fp, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	1523      	asrs	r3, r4, #20
 8006bda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006bde:	4413      	add	r3, r2
 8006be0:	930c      	str	r3, [sp, #48]	; 0x30
 8006be2:	4bc8      	ldr	r3, [pc, #800]	; (8006f04 <__ieee754_pow+0x724>)
 8006be4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006be8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006bec:	429c      	cmp	r4, r3
 8006bee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006bf2:	dd08      	ble.n	8006c06 <__ieee754_pow+0x426>
 8006bf4:	4bc4      	ldr	r3, [pc, #784]	; (8006f08 <__ieee754_pow+0x728>)
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	f340 815b 	ble.w	8006eb2 <__ieee754_pow+0x6d2>
 8006bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bfe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006c02:	3301      	adds	r3, #1
 8006c04:	930c      	str	r3, [sp, #48]	; 0x30
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	4658      	mov	r0, fp
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4bbf      	ldr	r3, [pc, #764]	; (8006f0c <__ieee754_pow+0x72c>)
 8006c10:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006c14:	444b      	add	r3, r9
 8006c16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c1a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	4623      	mov	r3, r4
 8006c22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c26:	f7f9 fa9f 	bl	8000168 <__aeabi_dsub>
 8006c2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460f      	mov	r7, r1
 8006c32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c36:	f7f9 fa99 	bl	800016c <__adddf3>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	2000      	movs	r0, #0
 8006c40:	49b3      	ldr	r1, [pc, #716]	; (8006f10 <__ieee754_pow+0x730>)
 8006c42:	f7f9 fd73 	bl	800072c <__aeabi_ddiv>
 8006c46:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4630      	mov	r0, r6
 8006c50:	4639      	mov	r1, r7
 8006c52:	f7f9 fc41 	bl	80004d8 <__aeabi_dmul>
 8006c56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c5a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006c5e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c62:	2300      	movs	r3, #0
 8006c64:	2200      	movs	r2, #0
 8006c66:	106d      	asrs	r5, r5, #1
 8006c68:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006c72:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006c76:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8006c7a:	4650      	mov	r0, sl
 8006c7c:	4659      	mov	r1, fp
 8006c7e:	4614      	mov	r4, r2
 8006c80:	461d      	mov	r5, r3
 8006c82:	f7f9 fc29 	bl	80004d8 <__aeabi_dmul>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	4639      	mov	r1, r7
 8006c8e:	f7f9 fa6b 	bl	8000168 <__aeabi_dsub>
 8006c92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 fa63 	bl	8000168 <__aeabi_dsub>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006caa:	f7f9 fa5d 	bl	8000168 <__aeabi_dsub>
 8006cae:	4652      	mov	r2, sl
 8006cb0:	465b      	mov	r3, fp
 8006cb2:	f7f9 fc11 	bl	80004d8 <__aeabi_dmul>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 fa53 	bl	8000168 <__aeabi_dsub>
 8006cc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006cc6:	f7f9 fc07 	bl	80004d8 <__aeabi_dmul>
 8006cca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f7f9 fbff 	bl	80004d8 <__aeabi_dmul>
 8006cda:	a377      	add	r3, pc, #476	; (adr r3, 8006eb8 <__ieee754_pow+0x6d8>)
 8006cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	460d      	mov	r5, r1
 8006ce4:	f7f9 fbf8 	bl	80004d8 <__aeabi_dmul>
 8006ce8:	a375      	add	r3, pc, #468	; (adr r3, 8006ec0 <__ieee754_pow+0x6e0>)
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f7f9 fa3d 	bl	800016c <__adddf3>
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f7f9 fbef 	bl	80004d8 <__aeabi_dmul>
 8006cfa:	a373      	add	r3, pc, #460	; (adr r3, 8006ec8 <__ieee754_pow+0x6e8>)
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f7f9 fa34 	bl	800016c <__adddf3>
 8006d04:	4622      	mov	r2, r4
 8006d06:	462b      	mov	r3, r5
 8006d08:	f7f9 fbe6 	bl	80004d8 <__aeabi_dmul>
 8006d0c:	a370      	add	r3, pc, #448	; (adr r3, 8006ed0 <__ieee754_pow+0x6f0>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fa2b 	bl	800016c <__adddf3>
 8006d16:	4622      	mov	r2, r4
 8006d18:	462b      	mov	r3, r5
 8006d1a:	f7f9 fbdd 	bl	80004d8 <__aeabi_dmul>
 8006d1e:	a36e      	add	r3, pc, #440	; (adr r3, 8006ed8 <__ieee754_pow+0x6f8>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f7f9 fa22 	bl	800016c <__adddf3>
 8006d28:	4622      	mov	r2, r4
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	f7f9 fbd4 	bl	80004d8 <__aeabi_dmul>
 8006d30:	a36b      	add	r3, pc, #428	; (adr r3, 8006ee0 <__ieee754_pow+0x700>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fa19 	bl	800016c <__adddf3>
 8006d3a:	4622      	mov	r2, r4
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	460f      	mov	r7, r1
 8006d40:	462b      	mov	r3, r5
 8006d42:	4620      	mov	r0, r4
 8006d44:	4629      	mov	r1, r5
 8006d46:	f7f9 fbc7 	bl	80004d8 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4630      	mov	r0, r6
 8006d50:	4639      	mov	r1, r7
 8006d52:	f7f9 fbc1 	bl	80004d8 <__aeabi_dmul>
 8006d56:	4604      	mov	r4, r0
 8006d58:	460d      	mov	r5, r1
 8006d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d5e:	4652      	mov	r2, sl
 8006d60:	465b      	mov	r3, fp
 8006d62:	f7f9 fa03 	bl	800016c <__adddf3>
 8006d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d6a:	f7f9 fbb5 	bl	80004d8 <__aeabi_dmul>
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	f7f9 f9fb 	bl	800016c <__adddf3>
 8006d76:	4652      	mov	r2, sl
 8006d78:	4606      	mov	r6, r0
 8006d7a:	460f      	mov	r7, r1
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	4650      	mov	r0, sl
 8006d80:	4659      	mov	r1, fp
 8006d82:	f7f9 fba9 	bl	80004d8 <__aeabi_dmul>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4b62      	ldr	r3, [pc, #392]	; (8006f14 <__ieee754_pow+0x734>)
 8006d8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d8e:	f7f9 f9ed 	bl	800016c <__adddf3>
 8006d92:	4632      	mov	r2, r6
 8006d94:	463b      	mov	r3, r7
 8006d96:	f7f9 f9e9 	bl	800016c <__adddf3>
 8006d9a:	9804      	ldr	r0, [sp, #16]
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4650      	mov	r0, sl
 8006da6:	4659      	mov	r1, fp
 8006da8:	f7f9 fb96 	bl	80004d8 <__aeabi_dmul>
 8006dac:	2200      	movs	r2, #0
 8006dae:	4682      	mov	sl, r0
 8006db0:	468b      	mov	fp, r1
 8006db2:	4b58      	ldr	r3, [pc, #352]	; (8006f14 <__ieee754_pow+0x734>)
 8006db4:	4620      	mov	r0, r4
 8006db6:	4629      	mov	r1, r5
 8006db8:	f7f9 f9d6 	bl	8000168 <__aeabi_dsub>
 8006dbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dc0:	f7f9 f9d2 	bl	8000168 <__aeabi_dsub>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	4630      	mov	r0, r6
 8006dca:	4639      	mov	r1, r7
 8006dcc:	f7f9 f9cc 	bl	8000168 <__aeabi_dsub>
 8006dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dd4:	f7f9 fb80 	bl	80004d8 <__aeabi_dmul>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4606      	mov	r6, r0
 8006ddc:	460f      	mov	r7, r1
 8006dde:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006de2:	462b      	mov	r3, r5
 8006de4:	f7f9 fb78 	bl	80004d8 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f7f9 f9bc 	bl	800016c <__adddf3>
 8006df4:	4606      	mov	r6, r0
 8006df6:	460f      	mov	r7, r1
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	4659      	mov	r1, fp
 8006e00:	f7f9 f9b4 	bl	800016c <__adddf3>
 8006e04:	a338      	add	r3, pc, #224	; (adr r3, 8006ee8 <__ieee754_pow+0x708>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	9804      	ldr	r0, [sp, #16]
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	4604      	mov	r4, r0
 8006e10:	f7f9 fb62 	bl	80004d8 <__aeabi_dmul>
 8006e14:	4652      	mov	r2, sl
 8006e16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e1a:	465b      	mov	r3, fp
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 f9a2 	bl	8000168 <__aeabi_dsub>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	4630      	mov	r0, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	f7f9 f99c 	bl	8000168 <__aeabi_dsub>
 8006e30:	a32f      	add	r3, pc, #188	; (adr r3, 8006ef0 <__ieee754_pow+0x710>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f7f9 fb4f 	bl	80004d8 <__aeabi_dmul>
 8006e3a:	a32f      	add	r3, pc, #188	; (adr r3, 8006ef8 <__ieee754_pow+0x718>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	4606      	mov	r6, r0
 8006e42:	460f      	mov	r7, r1
 8006e44:	4620      	mov	r0, r4
 8006e46:	4629      	mov	r1, r5
 8006e48:	f7f9 fb46 	bl	80004d8 <__aeabi_dmul>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	f7f9 f98a 	bl	800016c <__adddf3>
 8006e58:	4b2f      	ldr	r3, [pc, #188]	; (8006f18 <__ieee754_pow+0x738>)
 8006e5a:	444b      	add	r3, r9
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f984 	bl	800016c <__adddf3>
 8006e64:	4604      	mov	r4, r0
 8006e66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e68:	460d      	mov	r5, r1
 8006e6a:	f7f9 facb 	bl	8000404 <__aeabi_i2d>
 8006e6e:	4606      	mov	r6, r0
 8006e70:	460f      	mov	r7, r1
 8006e72:	4b2a      	ldr	r3, [pc, #168]	; (8006f1c <__ieee754_pow+0x73c>)
 8006e74:	4622      	mov	r2, r4
 8006e76:	444b      	add	r3, r9
 8006e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e7c:	462b      	mov	r3, r5
 8006e7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e82:	f7f9 f973 	bl	800016c <__adddf3>
 8006e86:	4642      	mov	r2, r8
 8006e88:	464b      	mov	r3, r9
 8006e8a:	f7f9 f96f 	bl	800016c <__adddf3>
 8006e8e:	4632      	mov	r2, r6
 8006e90:	463b      	mov	r3, r7
 8006e92:	f7f9 f96b 	bl	800016c <__adddf3>
 8006e96:	9804      	ldr	r0, [sp, #16]
 8006e98:	4632      	mov	r2, r6
 8006e9a:	463b      	mov	r3, r7
 8006e9c:	4682      	mov	sl, r0
 8006e9e:	468b      	mov	fp, r1
 8006ea0:	f7f9 f962 	bl	8000168 <__aeabi_dsub>
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	f7f9 f95e 	bl	8000168 <__aeabi_dsub>
 8006eac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb0:	e60b      	b.n	8006aca <__ieee754_pow+0x2ea>
 8006eb2:	f04f 0801 	mov.w	r8, #1
 8006eb6:	e6a8      	b.n	8006c0a <__ieee754_pow+0x42a>
 8006eb8:	4a454eef 	.word	0x4a454eef
 8006ebc:	3fca7e28 	.word	0x3fca7e28
 8006ec0:	93c9db65 	.word	0x93c9db65
 8006ec4:	3fcd864a 	.word	0x3fcd864a
 8006ec8:	a91d4101 	.word	0xa91d4101
 8006ecc:	3fd17460 	.word	0x3fd17460
 8006ed0:	518f264d 	.word	0x518f264d
 8006ed4:	3fd55555 	.word	0x3fd55555
 8006ed8:	db6fabff 	.word	0xdb6fabff
 8006edc:	3fdb6db6 	.word	0x3fdb6db6
 8006ee0:	33333303 	.word	0x33333303
 8006ee4:	3fe33333 	.word	0x3fe33333
 8006ee8:	e0000000 	.word	0xe0000000
 8006eec:	3feec709 	.word	0x3feec709
 8006ef0:	dc3a03fd 	.word	0xdc3a03fd
 8006ef4:	3feec709 	.word	0x3feec709
 8006ef8:	145b01f5 	.word	0x145b01f5
 8006efc:	be3e2fe0 	.word	0xbe3e2fe0
 8006f00:	43400000 	.word	0x43400000
 8006f04:	0003988e 	.word	0x0003988e
 8006f08:	000bb679 	.word	0x000bb679
 8006f0c:	08007898 	.word	0x08007898
 8006f10:	3ff00000 	.word	0x3ff00000
 8006f14:	40080000 	.word	0x40080000
 8006f18:	080078b8 	.word	0x080078b8
 8006f1c:	080078a8 	.word	0x080078a8
 8006f20:	a39b      	add	r3, pc, #620	; (adr r3, 8007190 <__ieee754_pow+0x9b0>)
 8006f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 f91f 	bl	800016c <__adddf3>
 8006f2e:	4622      	mov	r2, r4
 8006f30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f34:	462b      	mov	r3, r5
 8006f36:	4650      	mov	r0, sl
 8006f38:	4639      	mov	r1, r7
 8006f3a:	f7f9 f915 	bl	8000168 <__aeabi_dsub>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f46:	f7f9 fd57 	bl	80009f8 <__aeabi_dcmpgt>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	f47f ae0d 	bne.w	8006b6a <__ieee754_pow+0x38a>
 8006f50:	4aa3      	ldr	r2, [pc, #652]	; (80071e0 <__ieee754_pow+0xa00>)
 8006f52:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006f56:	4293      	cmp	r3, r2
 8006f58:	f340 8103 	ble.w	8007162 <__ieee754_pow+0x982>
 8006f5c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006f60:	2000      	movs	r0, #0
 8006f62:	151b      	asrs	r3, r3, #20
 8006f64:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006f68:	fa4a f303 	asr.w	r3, sl, r3
 8006f6c:	4433      	add	r3, r6
 8006f6e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006f72:	4f9c      	ldr	r7, [pc, #624]	; (80071e4 <__ieee754_pow+0xa04>)
 8006f74:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006f78:	4117      	asrs	r7, r2
 8006f7a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006f7e:	ea23 0107 	bic.w	r1, r3, r7
 8006f82:	f1c2 0214 	rsb	r2, r2, #20
 8006f86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006f8a:	fa4a fa02 	asr.w	sl, sl, r2
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	bfb8      	it	lt
 8006f9a:	f1ca 0a00 	rsblt	sl, sl, #0
 8006f9e:	f7f9 f8e3 	bl	8000168 <__aeabi_dsub>
 8006fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006faa:	4642      	mov	r2, r8
 8006fac:	464b      	mov	r3, r9
 8006fae:	f7f9 f8dd 	bl	800016c <__adddf3>
 8006fb2:	a379      	add	r3, pc, #484	; (adr r3, 8007198 <__ieee754_pow+0x9b8>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	2000      	movs	r0, #0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	f7f9 fa8b 	bl	80004d8 <__aeabi_dmul>
 8006fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fc6:	4606      	mov	r6, r0
 8006fc8:	460f      	mov	r7, r1
 8006fca:	4620      	mov	r0, r4
 8006fcc:	4629      	mov	r1, r5
 8006fce:	f7f9 f8cb 	bl	8000168 <__aeabi_dsub>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	4649      	mov	r1, r9
 8006fda:	f7f9 f8c5 	bl	8000168 <__aeabi_dsub>
 8006fde:	a370      	add	r3, pc, #448	; (adr r3, 80071a0 <__ieee754_pow+0x9c0>)
 8006fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe4:	f7f9 fa78 	bl	80004d8 <__aeabi_dmul>
 8006fe8:	a36f      	add	r3, pc, #444	; (adr r3, 80071a8 <__ieee754_pow+0x9c8>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	4680      	mov	r8, r0
 8006ff0:	4689      	mov	r9, r1
 8006ff2:	4620      	mov	r0, r4
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	f7f9 fa6f 	bl	80004d8 <__aeabi_dmul>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4640      	mov	r0, r8
 8007000:	4649      	mov	r1, r9
 8007002:	f7f9 f8b3 	bl	800016c <__adddf3>
 8007006:	4604      	mov	r4, r0
 8007008:	460d      	mov	r5, r1
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4630      	mov	r0, r6
 8007010:	4639      	mov	r1, r7
 8007012:	f7f9 f8ab 	bl	800016c <__adddf3>
 8007016:	4632      	mov	r2, r6
 8007018:	463b      	mov	r3, r7
 800701a:	4680      	mov	r8, r0
 800701c:	4689      	mov	r9, r1
 800701e:	f7f9 f8a3 	bl	8000168 <__aeabi_dsub>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4620      	mov	r0, r4
 8007028:	4629      	mov	r1, r5
 800702a:	f7f9 f89d 	bl	8000168 <__aeabi_dsub>
 800702e:	4642      	mov	r2, r8
 8007030:	4606      	mov	r6, r0
 8007032:	460f      	mov	r7, r1
 8007034:	464b      	mov	r3, r9
 8007036:	4640      	mov	r0, r8
 8007038:	4649      	mov	r1, r9
 800703a:	f7f9 fa4d 	bl	80004d8 <__aeabi_dmul>
 800703e:	a35c      	add	r3, pc, #368	; (adr r3, 80071b0 <__ieee754_pow+0x9d0>)
 8007040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007044:	4604      	mov	r4, r0
 8007046:	460d      	mov	r5, r1
 8007048:	f7f9 fa46 	bl	80004d8 <__aeabi_dmul>
 800704c:	a35a      	add	r3, pc, #360	; (adr r3, 80071b8 <__ieee754_pow+0x9d8>)
 800704e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007052:	f7f9 f889 	bl	8000168 <__aeabi_dsub>
 8007056:	4622      	mov	r2, r4
 8007058:	462b      	mov	r3, r5
 800705a:	f7f9 fa3d 	bl	80004d8 <__aeabi_dmul>
 800705e:	a358      	add	r3, pc, #352	; (adr r3, 80071c0 <__ieee754_pow+0x9e0>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 f882 	bl	800016c <__adddf3>
 8007068:	4622      	mov	r2, r4
 800706a:	462b      	mov	r3, r5
 800706c:	f7f9 fa34 	bl	80004d8 <__aeabi_dmul>
 8007070:	a355      	add	r3, pc, #340	; (adr r3, 80071c8 <__ieee754_pow+0x9e8>)
 8007072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007076:	f7f9 f877 	bl	8000168 <__aeabi_dsub>
 800707a:	4622      	mov	r2, r4
 800707c:	462b      	mov	r3, r5
 800707e:	f7f9 fa2b 	bl	80004d8 <__aeabi_dmul>
 8007082:	a353      	add	r3, pc, #332	; (adr r3, 80071d0 <__ieee754_pow+0x9f0>)
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	f7f9 f870 	bl	800016c <__adddf3>
 800708c:	4622      	mov	r2, r4
 800708e:	462b      	mov	r3, r5
 8007090:	f7f9 fa22 	bl	80004d8 <__aeabi_dmul>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 f864 	bl	8000168 <__aeabi_dsub>
 80070a0:	4604      	mov	r4, r0
 80070a2:	460d      	mov	r5, r1
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4640      	mov	r0, r8
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 fa14 	bl	80004d8 <__aeabi_dmul>
 80070b0:	2200      	movs	r2, #0
 80070b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070ba:	4620      	mov	r0, r4
 80070bc:	4629      	mov	r1, r5
 80070be:	f7f9 f853 	bl	8000168 <__aeabi_dsub>
 80070c2:	4602      	mov	r2, r0
 80070c4:	460b      	mov	r3, r1
 80070c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ca:	f7f9 fb2f 	bl	800072c <__aeabi_ddiv>
 80070ce:	4632      	mov	r2, r6
 80070d0:	4604      	mov	r4, r0
 80070d2:	460d      	mov	r5, r1
 80070d4:	463b      	mov	r3, r7
 80070d6:	4640      	mov	r0, r8
 80070d8:	4649      	mov	r1, r9
 80070da:	f7f9 f9fd 	bl	80004d8 <__aeabi_dmul>
 80070de:	4632      	mov	r2, r6
 80070e0:	463b      	mov	r3, r7
 80070e2:	f7f9 f843 	bl	800016c <__adddf3>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	f7f9 f83b 	bl	8000168 <__aeabi_dsub>
 80070f2:	4642      	mov	r2, r8
 80070f4:	464b      	mov	r3, r9
 80070f6:	f7f9 f837 	bl	8000168 <__aeabi_dsub>
 80070fa:	4602      	mov	r2, r0
 80070fc:	460b      	mov	r3, r1
 80070fe:	2000      	movs	r0, #0
 8007100:	4939      	ldr	r1, [pc, #228]	; (80071e8 <__ieee754_pow+0xa08>)
 8007102:	f7f9 f831 	bl	8000168 <__aeabi_dsub>
 8007106:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800710a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800710e:	da2b      	bge.n	8007168 <__ieee754_pow+0x988>
 8007110:	4652      	mov	r2, sl
 8007112:	f000 f9b9 	bl	8007488 <scalbn>
 8007116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800711a:	f7ff bbf6 	b.w	800690a <__ieee754_pow+0x12a>
 800711e:	4b33      	ldr	r3, [pc, #204]	; (80071ec <__ieee754_pow+0xa0c>)
 8007120:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007124:	429f      	cmp	r7, r3
 8007126:	f77f af13 	ble.w	8006f50 <__ieee754_pow+0x770>
 800712a:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <__ieee754_pow+0xa10>)
 800712c:	440b      	add	r3, r1
 800712e:	4303      	orrs	r3, r0
 8007130:	d00b      	beq.n	800714a <__ieee754_pow+0x96a>
 8007132:	a329      	add	r3, pc, #164	; (adr r3, 80071d8 <__ieee754_pow+0x9f8>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800713c:	f7f9 f9cc 	bl	80004d8 <__aeabi_dmul>
 8007140:	a325      	add	r3, pc, #148	; (adr r3, 80071d8 <__ieee754_pow+0x9f8>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7ff bbe0 	b.w	800690a <__ieee754_pow+0x12a>
 800714a:	4622      	mov	r2, r4
 800714c:	462b      	mov	r3, r5
 800714e:	f7f9 f80b 	bl	8000168 <__aeabi_dsub>
 8007152:	4642      	mov	r2, r8
 8007154:	464b      	mov	r3, r9
 8007156:	f7f9 fc45 	bl	80009e4 <__aeabi_dcmpge>
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f aef8 	beq.w	8006f50 <__ieee754_pow+0x770>
 8007160:	e7e7      	b.n	8007132 <__ieee754_pow+0x952>
 8007162:	f04f 0a00 	mov.w	sl, #0
 8007166:	e71e      	b.n	8006fa6 <__ieee754_pow+0x7c6>
 8007168:	4621      	mov	r1, r4
 800716a:	e7d4      	b.n	8007116 <__ieee754_pow+0x936>
 800716c:	f04f 0b00 	mov.w	fp, #0
 8007170:	f8df c074 	ldr.w	ip, [pc, #116]	; 80071e8 <__ieee754_pow+0xa08>
 8007174:	f7ff bb95 	b.w	80068a2 <__ieee754_pow+0xc2>
 8007178:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800717c:	f7ff bb91 	b.w	80068a2 <__ieee754_pow+0xc2>
 8007180:	4638      	mov	r0, r7
 8007182:	4641      	mov	r1, r8
 8007184:	f7ff bbc3 	b.w	800690e <__ieee754_pow+0x12e>
 8007188:	9200      	str	r2, [sp, #0]
 800718a:	f7ff bb9f 	b.w	80068cc <__ieee754_pow+0xec>
 800718e:	bf00      	nop
 8007190:	652b82fe 	.word	0x652b82fe
 8007194:	3c971547 	.word	0x3c971547
 8007198:	00000000 	.word	0x00000000
 800719c:	3fe62e43 	.word	0x3fe62e43
 80071a0:	fefa39ef 	.word	0xfefa39ef
 80071a4:	3fe62e42 	.word	0x3fe62e42
 80071a8:	0ca86c39 	.word	0x0ca86c39
 80071ac:	be205c61 	.word	0xbe205c61
 80071b0:	72bea4d0 	.word	0x72bea4d0
 80071b4:	3e663769 	.word	0x3e663769
 80071b8:	c5d26bf1 	.word	0xc5d26bf1
 80071bc:	3ebbbd41 	.word	0x3ebbbd41
 80071c0:	af25de2c 	.word	0xaf25de2c
 80071c4:	3f11566a 	.word	0x3f11566a
 80071c8:	16bebd93 	.word	0x16bebd93
 80071cc:	3f66c16c 	.word	0x3f66c16c
 80071d0:	5555553e 	.word	0x5555553e
 80071d4:	3fc55555 	.word	0x3fc55555
 80071d8:	c2f8f359 	.word	0xc2f8f359
 80071dc:	01a56e1f 	.word	0x01a56e1f
 80071e0:	3fe00000 	.word	0x3fe00000
 80071e4:	000fffff 	.word	0x000fffff
 80071e8:	3ff00000 	.word	0x3ff00000
 80071ec:	4090cbff 	.word	0x4090cbff
 80071f0:	3f6f3400 	.word	0x3f6f3400

080071f4 <__ieee754_sqrt>:
 80071f4:	4b54      	ldr	r3, [pc, #336]	; (8007348 <__ieee754_sqrt+0x154>)
 80071f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fa:	438b      	bics	r3, r1
 80071fc:	4606      	mov	r6, r0
 80071fe:	460d      	mov	r5, r1
 8007200:	460a      	mov	r2, r1
 8007202:	460c      	mov	r4, r1
 8007204:	d10f      	bne.n	8007226 <__ieee754_sqrt+0x32>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	f7f9 f965 	bl	80004d8 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4630      	mov	r0, r6
 8007214:	4629      	mov	r1, r5
 8007216:	f7f8 ffa9 	bl	800016c <__adddf3>
 800721a:	4606      	mov	r6, r0
 800721c:	460d      	mov	r5, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4629      	mov	r1, r5
 8007222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007226:	2900      	cmp	r1, #0
 8007228:	4607      	mov	r7, r0
 800722a:	4603      	mov	r3, r0
 800722c:	dc0e      	bgt.n	800724c <__ieee754_sqrt+0x58>
 800722e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007232:	ea5c 0707 	orrs.w	r7, ip, r7
 8007236:	d0f2      	beq.n	800721e <__ieee754_sqrt+0x2a>
 8007238:	b141      	cbz	r1, 800724c <__ieee754_sqrt+0x58>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	f7f8 ff93 	bl	8000168 <__aeabi_dsub>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	f7f9 fa71 	bl	800072c <__aeabi_ddiv>
 800724a:	e7e6      	b.n	800721a <__ieee754_sqrt+0x26>
 800724c:	1512      	asrs	r2, r2, #20
 800724e:	d074      	beq.n	800733a <__ieee754_sqrt+0x146>
 8007250:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007254:	07d5      	lsls	r5, r2, #31
 8007256:	f04f 0500 	mov.w	r5, #0
 800725a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800725e:	bf48      	it	mi
 8007260:	0fd9      	lsrmi	r1, r3, #31
 8007262:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007266:	bf44      	itt	mi
 8007268:	005b      	lslmi	r3, r3, #1
 800726a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800726e:	1051      	asrs	r1, r2, #1
 8007270:	0fda      	lsrs	r2, r3, #31
 8007272:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007276:	4628      	mov	r0, r5
 8007278:	2216      	movs	r2, #22
 800727a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800727e:	005b      	lsls	r3, r3, #1
 8007280:	1987      	adds	r7, r0, r6
 8007282:	42a7      	cmp	r7, r4
 8007284:	bfde      	ittt	le
 8007286:	19b8      	addle	r0, r7, r6
 8007288:	1be4      	suble	r4, r4, r7
 800728a:	19ad      	addle	r5, r5, r6
 800728c:	0fdf      	lsrs	r7, r3, #31
 800728e:	3a01      	subs	r2, #1
 8007290:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007294:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007298:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800729c:	d1f0      	bne.n	8007280 <__ieee754_sqrt+0x8c>
 800729e:	f04f 0c20 	mov.w	ip, #32
 80072a2:	4696      	mov	lr, r2
 80072a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80072a8:	4284      	cmp	r4, r0
 80072aa:	eb06 070e 	add.w	r7, r6, lr
 80072ae:	dc02      	bgt.n	80072b6 <__ieee754_sqrt+0xc2>
 80072b0:	d112      	bne.n	80072d8 <__ieee754_sqrt+0xe4>
 80072b2:	429f      	cmp	r7, r3
 80072b4:	d810      	bhi.n	80072d8 <__ieee754_sqrt+0xe4>
 80072b6:	2f00      	cmp	r7, #0
 80072b8:	eb07 0e06 	add.w	lr, r7, r6
 80072bc:	da42      	bge.n	8007344 <__ieee754_sqrt+0x150>
 80072be:	f1be 0f00 	cmp.w	lr, #0
 80072c2:	db3f      	blt.n	8007344 <__ieee754_sqrt+0x150>
 80072c4:	f100 0801 	add.w	r8, r0, #1
 80072c8:	1a24      	subs	r4, r4, r0
 80072ca:	4640      	mov	r0, r8
 80072cc:	429f      	cmp	r7, r3
 80072ce:	bf88      	it	hi
 80072d0:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 80072d4:	1bdb      	subs	r3, r3, r7
 80072d6:	4432      	add	r2, r6
 80072d8:	0064      	lsls	r4, r4, #1
 80072da:	f1bc 0c01 	subs.w	ip, ip, #1
 80072de:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80072e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80072e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072ea:	d1dd      	bne.n	80072a8 <__ieee754_sqrt+0xb4>
 80072ec:	4323      	orrs	r3, r4
 80072ee:	d006      	beq.n	80072fe <__ieee754_sqrt+0x10a>
 80072f0:	1c54      	adds	r4, r2, #1
 80072f2:	bf0b      	itete	eq
 80072f4:	4662      	moveq	r2, ip
 80072f6:	3201      	addne	r2, #1
 80072f8:	3501      	addeq	r5, #1
 80072fa:	f022 0201 	bicne.w	r2, r2, #1
 80072fe:	106b      	asrs	r3, r5, #1
 8007300:	0852      	lsrs	r2, r2, #1
 8007302:	07e8      	lsls	r0, r5, #31
 8007304:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007308:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800730c:	bf48      	it	mi
 800730e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007312:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007316:	4616      	mov	r6, r2
 8007318:	e781      	b.n	800721e <__ieee754_sqrt+0x2a>
 800731a:	0adc      	lsrs	r4, r3, #11
 800731c:	3915      	subs	r1, #21
 800731e:	055b      	lsls	r3, r3, #21
 8007320:	2c00      	cmp	r4, #0
 8007322:	d0fa      	beq.n	800731a <__ieee754_sqrt+0x126>
 8007324:	02e6      	lsls	r6, r4, #11
 8007326:	d50a      	bpl.n	800733e <__ieee754_sqrt+0x14a>
 8007328:	f1c2 0020 	rsb	r0, r2, #32
 800732c:	fa23 f000 	lsr.w	r0, r3, r0
 8007330:	1e55      	subs	r5, r2, #1
 8007332:	4093      	lsls	r3, r2
 8007334:	4304      	orrs	r4, r0
 8007336:	1b4a      	subs	r2, r1, r5
 8007338:	e78a      	b.n	8007250 <__ieee754_sqrt+0x5c>
 800733a:	4611      	mov	r1, r2
 800733c:	e7f0      	b.n	8007320 <__ieee754_sqrt+0x12c>
 800733e:	0064      	lsls	r4, r4, #1
 8007340:	3201      	adds	r2, #1
 8007342:	e7ef      	b.n	8007324 <__ieee754_sqrt+0x130>
 8007344:	4680      	mov	r8, r0
 8007346:	e7bf      	b.n	80072c8 <__ieee754_sqrt+0xd4>
 8007348:	7ff00000 	.word	0x7ff00000

0800734c <fabs>:
 800734c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007350:	4619      	mov	r1, r3
 8007352:	4770      	bx	lr

08007354 <finite>:
 8007354:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007358:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800735c:	0fc0      	lsrs	r0, r0, #31
 800735e:	4770      	bx	lr

08007360 <matherr>:
 8007360:	2000      	movs	r0, #0
 8007362:	4770      	bx	lr

08007364 <nan>:
 8007364:	2000      	movs	r0, #0
 8007366:	4901      	ldr	r1, [pc, #4]	; (800736c <nan+0x8>)
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	7ff80000 	.word	0x7ff80000

08007370 <rint>:
 8007370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007372:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007376:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800737a:	f1bc 0f13 	cmp.w	ip, #19
 800737e:	4604      	mov	r4, r0
 8007380:	460d      	mov	r5, r1
 8007382:	460b      	mov	r3, r1
 8007384:	4606      	mov	r6, r0
 8007386:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800738a:	dc5a      	bgt.n	8007442 <rint+0xd2>
 800738c:	f1bc 0f00 	cmp.w	ip, #0
 8007390:	da2b      	bge.n	80073ea <rint+0x7a>
 8007392:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007396:	4302      	orrs	r2, r0
 8007398:	d023      	beq.n	80073e2 <rint+0x72>
 800739a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800739e:	4302      	orrs	r2, r0
 80073a0:	4256      	negs	r6, r2
 80073a2:	4316      	orrs	r6, r2
 80073a4:	0c4b      	lsrs	r3, r1, #17
 80073a6:	0b36      	lsrs	r6, r6, #12
 80073a8:	4934      	ldr	r1, [pc, #208]	; (800747c <rint+0x10c>)
 80073aa:	045b      	lsls	r3, r3, #17
 80073ac:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80073b0:	ea46 0503 	orr.w	r5, r6, r3
 80073b4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80073b8:	4602      	mov	r2, r0
 80073ba:	462b      	mov	r3, r5
 80073bc:	e9d1 4500 	ldrd	r4, r5, [r1]
 80073c0:	4620      	mov	r0, r4
 80073c2:	4629      	mov	r1, r5
 80073c4:	f7f8 fed2 	bl	800016c <__adddf3>
 80073c8:	e9cd 0100 	strd	r0, r1, [sp]
 80073cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073d0:	462b      	mov	r3, r5
 80073d2:	4622      	mov	r2, r4
 80073d4:	f7f8 fec8 	bl	8000168 <__aeabi_dsub>
 80073d8:	4604      	mov	r4, r0
 80073da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073de:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80073e2:	4620      	mov	r0, r4
 80073e4:	4629      	mov	r1, r5
 80073e6:	b003      	add	sp, #12
 80073e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ea:	4a25      	ldr	r2, [pc, #148]	; (8007480 <rint+0x110>)
 80073ec:	fa42 f20c 	asr.w	r2, r2, ip
 80073f0:	4011      	ands	r1, r2
 80073f2:	4301      	orrs	r1, r0
 80073f4:	d0f5      	beq.n	80073e2 <rint+0x72>
 80073f6:	0852      	lsrs	r2, r2, #1
 80073f8:	ea05 0102 	and.w	r1, r5, r2
 80073fc:	ea50 0601 	orrs.w	r6, r0, r1
 8007400:	d00c      	beq.n	800741c <rint+0xac>
 8007402:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007406:	f1bc 0f13 	cmp.w	ip, #19
 800740a:	bf0c      	ite	eq
 800740c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007410:	2600      	movne	r6, #0
 8007412:	ea25 0202 	bic.w	r2, r5, r2
 8007416:	fa43 f30c 	asr.w	r3, r3, ip
 800741a:	4313      	orrs	r3, r2
 800741c:	4917      	ldr	r1, [pc, #92]	; (800747c <rint+0x10c>)
 800741e:	4632      	mov	r2, r6
 8007420:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8007424:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007428:	4620      	mov	r0, r4
 800742a:	4629      	mov	r1, r5
 800742c:	f7f8 fe9e 	bl	800016c <__adddf3>
 8007430:	e9cd 0100 	strd	r0, r1, [sp]
 8007434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007438:	4622      	mov	r2, r4
 800743a:	462b      	mov	r3, r5
 800743c:	f7f8 fe94 	bl	8000168 <__aeabi_dsub>
 8007440:	e008      	b.n	8007454 <rint+0xe4>
 8007442:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8007446:	dd08      	ble.n	800745a <rint+0xea>
 8007448:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800744c:	d1c9      	bne.n	80073e2 <rint+0x72>
 800744e:	4602      	mov	r2, r0
 8007450:	f7f8 fe8c 	bl	800016c <__adddf3>
 8007454:	4604      	mov	r4, r0
 8007456:	460d      	mov	r5, r1
 8007458:	e7c3      	b.n	80073e2 <rint+0x72>
 800745a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800745e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007462:	40ca      	lsrs	r2, r1
 8007464:	4210      	tst	r0, r2
 8007466:	d0bc      	beq.n	80073e2 <rint+0x72>
 8007468:	0852      	lsrs	r2, r2, #1
 800746a:	4210      	tst	r0, r2
 800746c:	bf1f      	itttt	ne
 800746e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8007472:	ea20 0202 	bicne.w	r2, r0, r2
 8007476:	410e      	asrne	r6, r1
 8007478:	4316      	orrne	r6, r2
 800747a:	e7cf      	b.n	800741c <rint+0xac>
 800747c:	080078c8 	.word	0x080078c8
 8007480:	000fffff 	.word	0x000fffff
 8007484:	00000000 	.word	0x00000000

08007488 <scalbn>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	4616      	mov	r6, r2
 800748c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	460b      	mov	r3, r1
 8007496:	b982      	cbnz	r2, 80074ba <scalbn+0x32>
 8007498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800749c:	4303      	orrs	r3, r0
 800749e:	d034      	beq.n	800750a <scalbn+0x82>
 80074a0:	4b2d      	ldr	r3, [pc, #180]	; (8007558 <scalbn+0xd0>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	f7f9 f818 	bl	80004d8 <__aeabi_dmul>
 80074a8:	4b2c      	ldr	r3, [pc, #176]	; (800755c <scalbn+0xd4>)
 80074aa:	4604      	mov	r4, r0
 80074ac:	429e      	cmp	r6, r3
 80074ae:	460d      	mov	r5, r1
 80074b0:	da0d      	bge.n	80074ce <scalbn+0x46>
 80074b2:	a325      	add	r3, pc, #148	; (adr r3, 8007548 <scalbn+0xc0>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	e01c      	b.n	80074f4 <scalbn+0x6c>
 80074ba:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80074be:	42ba      	cmp	r2, r7
 80074c0:	d109      	bne.n	80074d6 <scalbn+0x4e>
 80074c2:	4602      	mov	r2, r0
 80074c4:	f7f8 fe52 	bl	800016c <__adddf3>
 80074c8:	4604      	mov	r4, r0
 80074ca:	460d      	mov	r5, r1
 80074cc:	e01d      	b.n	800750a <scalbn+0x82>
 80074ce:	460b      	mov	r3, r1
 80074d0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074d4:	3a36      	subs	r2, #54	; 0x36
 80074d6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074da:	4432      	add	r2, r6
 80074dc:	428a      	cmp	r2, r1
 80074de:	dd0c      	ble.n	80074fa <scalbn+0x72>
 80074e0:	4622      	mov	r2, r4
 80074e2:	462b      	mov	r3, r5
 80074e4:	a11a      	add	r1, pc, #104	; (adr r1, 8007550 <scalbn+0xc8>)
 80074e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ea:	f000 f83b 	bl	8007564 <copysign>
 80074ee:	a318      	add	r3, pc, #96	; (adr r3, 8007550 <scalbn+0xc8>)
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	f7f8 fff0 	bl	80004d8 <__aeabi_dmul>
 80074f8:	e7e6      	b.n	80074c8 <scalbn+0x40>
 80074fa:	2a00      	cmp	r2, #0
 80074fc:	dd08      	ble.n	8007510 <scalbn+0x88>
 80074fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007502:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007506:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800750a:	4620      	mov	r0, r4
 800750c:	4629      	mov	r1, r5
 800750e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007510:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007514:	da0b      	bge.n	800752e <scalbn+0xa6>
 8007516:	f24c 3350 	movw	r3, #50000	; 0xc350
 800751a:	429e      	cmp	r6, r3
 800751c:	4622      	mov	r2, r4
 800751e:	462b      	mov	r3, r5
 8007520:	dce0      	bgt.n	80074e4 <scalbn+0x5c>
 8007522:	a109      	add	r1, pc, #36	; (adr r1, 8007548 <scalbn+0xc0>)
 8007524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007528:	f000 f81c 	bl	8007564 <copysign>
 800752c:	e7c1      	b.n	80074b2 <scalbn+0x2a>
 800752e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007532:	3236      	adds	r2, #54	; 0x36
 8007534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007538:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800753c:	4620      	mov	r0, r4
 800753e:	4629      	mov	r1, r5
 8007540:	2200      	movs	r2, #0
 8007542:	4b07      	ldr	r3, [pc, #28]	; (8007560 <scalbn+0xd8>)
 8007544:	e7d6      	b.n	80074f4 <scalbn+0x6c>
 8007546:	bf00      	nop
 8007548:	c2f8f359 	.word	0xc2f8f359
 800754c:	01a56e1f 	.word	0x01a56e1f
 8007550:	8800759c 	.word	0x8800759c
 8007554:	7e37e43c 	.word	0x7e37e43c
 8007558:	43500000 	.word	0x43500000
 800755c:	ffff3cb0 	.word	0xffff3cb0
 8007560:	3c900000 	.word	0x3c900000

08007564 <copysign>:
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800756a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800756e:	ea42 0503 	orr.w	r5, r2, r3
 8007572:	4629      	mov	r1, r5
 8007574:	bd30      	pop	{r4, r5, pc}
	...

08007578 <_init>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr

08007584 <_fini>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	bf00      	nop
 8007588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758a:	bc08      	pop	{r3}
 800758c:	469e      	mov	lr, r3
 800758e:	4770      	bx	lr
