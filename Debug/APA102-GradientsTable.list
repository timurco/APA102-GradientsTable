
APA102-GradientsTable.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007478  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08007588  08007588  00017588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d0  080078d0  00020720  2**0
                  CONTENTS
  4 .ARM          00000000  080078d0  080078d0  00020720  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078d0  080078d0  00020720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000720  20000000  080078d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000720  08007ff8  00020720  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a88  08007ff8  00020a88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020720  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d687  00000000  00000000  00020749  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002079  00000000  00000000  0002ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00030b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f33  00000000  00000000  000316e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a87b  00000000  00000000  0004a61b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b650  00000000  00000000  00054e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e04e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  000e0564  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000720 	.word	0x20000720
 800012c:	00000000 	.word	0x00000000
 8000130:	08007570 	.word	0x08007570

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000724 	.word	0x20000724
 800014c:	08007570 	.word	0x08007570

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <DigiLed_init>:

/**
 *  @brief Initialize digital led class
 */
void DigiLed_init(SPI_HandleTypeDef *hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	_frameModified = TRUE; 		// Initial set to true to force update after initialization of frame buffer
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <DigiLed_init+0x78>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]

	_spiHandler = hspi;			// SPI handler is given to library
 80011aa:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <DigiLed_init+0x7c>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6013      	str	r3, [r2, #0]

	// TODO Auto-generated constructor stub

	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	e023      	b.n	80011fe <DigiLed_init+0x62>
	{
		_digitalLedframe[led].FieldsIn.INIT = 0x07; // Set MSB first 3 bits to identify start of LED packet
 80011b6:	4a19      	ldr	r2, [pc, #100]	; (800121c <DigiLed_init+0x80>)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	78da      	ldrb	r2, [r3, #3]
 80011c0:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80011c4:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.GLOBAL = 0x00; // Switch off LED global
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <DigiLed_init+0x80>)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	78da      	ldrb	r2, [r3, #3]
 80011d0:	f36f 0204 	bfc	r2, #0, #5
 80011d4:	70da      	strb	r2, [r3, #3]
		_digitalLedframe[led].FieldsIn.BLUE = 0x00;
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <DigiLed_init+0x80>)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	2200      	movs	r2, #0
 80011e0:	709a      	strb	r2, [r3, #2]
		_digitalLedframe[led].FieldsIn.GREEN = 0x00;
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <DigiLed_init+0x80>)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	2200      	movs	r2, #0
 80011ec:	705a      	strb	r2, [r3, #1]
		_digitalLedframe[led].FieldsIn.RED = 0x00;
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <DigiLed_init+0x80>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2100      	movs	r1, #0
 80011f4:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b2f      	cmp	r3, #47	; 0x2f
 8001202:	ddd8      	ble.n	80011b6 <DigiLed_init+0x1a>
	}
	DigiLed_update(FALSE); // Update frame buffer using the value of _frameModified as set in initialiser.
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f887 	bl	8001318 <DigiLed_update>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000091c 	.word	0x2000091c
 8001218:	20000850 	.word	0x20000850
 800121c:	20000920 	.word	0x20000920

08001220 <DigiLed_setRGB>:
 * Colors can be set using defines from "APA102_colors.h"
 * @param led position of the led in the string
 * @param rgb color of led in RGB color scheme
 */
void DigiLed_setRGB(uint8_t led, uint32_t rgb)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
	_digitalLedframe[led].FieldsIn.INIT = 0x7;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <DigiLed_setRGB+0x6c>)
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	78da      	ldrb	r2, [r3, #3]
 8001236:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800123a:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.GLOBAL = 0x1F;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	4a13      	ldr	r2, [pc, #76]	; (800128c <DigiLed_setRGB+0x6c>)
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	78da      	ldrb	r2, [r3, #3]
 8001246:	f042 021f 	orr.w	r2, r2, #31
 800124a:	70da      	strb	r2, [r3, #3]
	_digitalLedframe[led].FieldsIn.BLUE = (uint8_t)(rgb);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	b2d1      	uxtb	r1, r2
 8001252:	4a0e      	ldr	r2, [pc, #56]	; (800128c <DigiLed_setRGB+0x6c>)
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	460a      	mov	r2, r1
 800125a:	709a      	strb	r2, [r3, #2]
	_digitalLedframe[led].FieldsIn.GREEN = (uint8_t)(rgb >> 8);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	0a1a      	lsrs	r2, r3, #8
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	b2d1      	uxtb	r1, r2
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <DigiLed_setRGB+0x6c>)
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	460a      	mov	r2, r1
 800126c:	705a      	strb	r2, [r3, #1]
	_digitalLedframe[led].FieldsIn.RED = (uint8_t)(rgb >> 16);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	0c1a      	lsrs	r2, r3, #16
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	b2d1      	uxtb	r1, r2
 8001276:	4a05      	ldr	r2, [pc, #20]	; (800128c <DigiLed_setRGB+0x6c>)
 8001278:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	_frameModified = TRUE;
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <DigiLed_setRGB+0x70>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	20000920 	.word	0x20000920
 8001290:	2000091c 	.word	0x2000091c

08001294 <DigiLed_setAllRGB>:
 * expressed as hex values from 0 to 255 (0 - FF).
 * Colors can be set using defines from "APA102_colors.h"
 * @param rgb color of led in RGB color scheme
 */
void DigiLed_setAllRGB(uint32_t rgb)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e008      	b.n	80012b4 <DigiLed_setAllRGB+0x20>
	{
		DigiLed_setRGB(led, rgb);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ffb9 	bl	8001220 <DigiLed_setRGB>
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b2f      	cmp	r3, #47	; 0x2f
 80012b8:	ddf3      	ble.n	80012a2 <DigiLed_setAllRGB+0xe>
	}
	_frameModified = TRUE;
 80012ba:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <DigiLed_setAllRGB+0x34>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000091c 	.word	0x2000091c

080012cc <DigiLed_setAllIllumination>:
 * Illumination is a value from 0 to 31. 0 means no light, and 31 maximum illumination.
 * setting illumination can interfere with individual RGB settings
 * @param intensity of illumination
 */
void DigiLed_setAllIllumination(uint8_t illumination)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e00e      	b.n	80012fa <DigiLed_setAllIllumination+0x2e>
	{
		_digitalLedframe[led].FieldsIn.GLOBAL = illumination;
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f003 031f 	and.w	r3, r3, #31
 80012e2:	b2d9      	uxtb	r1, r3
 80012e4:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <DigiLed_setAllIllumination+0x44>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	78da      	ldrb	r2, [r3, #3]
 80012ee:	f361 0204 	bfi	r2, r1, #0, #5
 80012f2:	70da      	strb	r2, [r3, #3]
	for (int led = 0; led < LED_FRAME_SIZE; led++)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b2f      	cmp	r3, #47	; 0x2f
 80012fe:	dded      	ble.n	80012dc <DigiLed_setAllIllumination+0x10>
	}
	_frameModified = TRUE;
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <DigiLed_setAllIllumination+0x48>)
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	20000920 	.word	0x20000920
 8001314:	2000091c 	.word	0x2000091c

08001318 <DigiLed_update>:
/**
 * @brief update led string
 * @param set true to force update leds and false to update only when frame is modified
 */
void DigiLed_update(uint8_t forceUpdate)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	if(_frameModified | forceUpdate)
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <DigiLed_update+0xd0>)
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4313      	orrs	r3, r2
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d053      	beq.n	80013d8 <DigiLed_update+0xc0>
	{
		// add start of frame (0x00000000)
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	e007      	b.n	8001346 <DigiLed_update+0x2e>
		{
			SpiSendFrame[i] = 0x00;
 8001336:	4a2d      	ldr	r2, [pc, #180]	; (80013ec <DigiLed_update+0xd4>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < LED_START_FRAME_SIZE; i++)
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3301      	adds	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2b03      	cmp	r3, #3
 800134a:	ddf4      	ble.n	8001336 <DigiLed_update+0x1e>
		}

		// add all LED packets of the frame
		uint32_t SpiDataPacket = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e028      	b.n	80013a8 <DigiLed_update+0x90>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 0] = _digitalLedframe[led].FieldsOut.CMD;		// Add INIT and GLOBAL to SPI send frame
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1d1a      	adds	r2, r3, #4
 800135a:	4925      	ldr	r1, [pc, #148]	; (80013f0 <DigiLed_update+0xd8>)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	78d9      	ldrb	r1, [r3, #3]
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <DigiLed_update+0xd4>)
 8001366:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 1] = _digitalLedframe[led].FieldsOut.BLUE; 	// Add BLUE to SPI send frame
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1d5a      	adds	r2, r3, #5
 800136c:	4920      	ldr	r1, [pc, #128]	; (80013f0 <DigiLed_update+0xd8>)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	7899      	ldrb	r1, [r3, #2]
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <DigiLed_update+0xd4>)
 8001378:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 2] = _digitalLedframe[led].FieldsOut.GREEN;	// Add GREEN to SPI send frame
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1d9a      	adds	r2, r3, #6
 800137e:	491c      	ldr	r1, [pc, #112]	; (80013f0 <DigiLed_update+0xd8>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	440b      	add	r3, r1
 8001386:	7859      	ldrb	r1, [r3, #1]
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <DigiLed_update+0xd4>)
 800138a:	5499      	strb	r1, [r3, r2]
			SpiSendFrame[LED_START_FRAME_SIZE + SpiDataPacket + 3] = _digitalLedframe[led].FieldsOut.RED;		// Add RED to SPI send frame
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3307      	adds	r3, #7
 8001390:	4917      	ldr	r1, [pc, #92]	; (80013f0 <DigiLed_update+0xd8>)
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	f811 1022 	ldrb.w	r1, [r1, r2, lsl #2]
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <DigiLed_update+0xd4>)
 800139a:	54d1      	strb	r1, [r2, r3]

			SpiDataPacket = SpiDataPacket + 4;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	3304      	adds	r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
		for (uint32_t led = 0; led < LED_FRAME_SIZE; led++)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b2f      	cmp	r3, #47	; 0x2f
 80013ac:	d9d3      	bls.n	8001356 <DigiLed_update+0x3e>
		}

		// add end of frame (0xffffffff)
		for(int i = 0; i < 4; i++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	e007      	b.n	80013c4 <DigiLed_update+0xac>
		{
			SpiSendFrame[LED_START_FRAME_SIZE + 4*LED_FRAME_SIZE + i] = 0xFF;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	33c4      	adds	r3, #196	; 0xc4
 80013b8:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <DigiLed_update+0xd4>)
 80013ba:	21ff      	movs	r1, #255	; 0xff
 80013bc:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < 4; i++)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	ddf4      	ble.n	80013b4 <DigiLed_update+0x9c>
		}

		// send spi frame with all led values
		HAL_SPI_Transmit(_spiHandler, SpiSendFrame, sizeof(SpiSendFrame), 10);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <DigiLed_update+0xdc>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	230a      	movs	r3, #10
 80013d0:	22c8      	movs	r2, #200	; 0xc8
 80013d2:	4906      	ldr	r1, [pc, #24]	; (80013ec <DigiLed_update+0xd4>)
 80013d4:	f002 f8f2 	bl	80035bc <HAL_SPI_Transmit>
	}

	_frameModified = FALSE; // reset frame modified identifier.
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <DigiLed_update+0xd0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]

}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000091c 	.word	0x2000091c
 80013ec:	20000854 	.word	0x20000854
 80013f0:	20000920 	.word	0x20000920
 80013f4:	20000850 	.word	0x20000850

080013f8 <gammaInit>:
 *  Created on: Dec 28, 2020
 *      Author: timurko
 */
#include "colors.h"

void gammaInit(float gamma) {
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	// precalculate the gamma lookup table
	for (int i = 0; i < 256; i++) {
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e029      	b.n	800145a <gammaInit+0x62>
		gammaTable[i] = 255 * pow((i / 256.0), gamma);
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7fe fffc 	bl	8000404 <__aeabi_i2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <gammaInit+0x78>)
 8001412:	f7ff f98b 	bl	800072c <__aeabi_ddiv>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	4625      	mov	r5, r4
 800141c:	461c      	mov	r4, r3
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff f802 	bl	8000428 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f005 f876 	bl	800651c <pow>
 8001430:	a30d      	add	r3, pc, #52	; (adr r3, 8001468 <gammaInit+0x70>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f84f 	bl	80004d8 <__aeabi_dmul>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	4618      	mov	r0, r3
 8001440:	4621      	mov	r1, r4
 8001442:	f7ff fb21 	bl	8000a88 <__aeabi_d2uiz>
 8001446:	4603      	mov	r3, r0
 8001448:	b2d9      	uxtb	r1, r3
 800144a:	4a0a      	ldr	r2, [pc, #40]	; (8001474 <gammaInit+0x7c>)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	460a      	mov	r2, r1
 8001452:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2bff      	cmp	r3, #255	; 0xff
 800145e:	ddd2      	ble.n	8001406 <gammaInit+0xe>
		//(uint8_t)(((float)n/LED_FRAME_SIZE)*255);
	};
}
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bdb0      	pop	{r4, r5, r7, pc}
 8001468:	00000000 	.word	0x00000000
 800146c:	406fe000 	.word	0x406fe000
 8001470:	40700000 	.word	0x40700000
 8001474:	2000073c 	.word	0x2000073c

08001478 <gradientTransition>:

uint32_t gradientTransition(
		uint8_t (*gradient_a)[16][4],
		uint8_t (*gradient_b)[16][4],
		uint8_t pos,
		float transition) {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	71fb      	strb	r3, [r7, #7]
	struct RGB a, b;
	uint8_t i;
	float f;

	// First gradient interation
	for (i=0; i<15; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800148e:	e0be      	b.n	800160e <gradientTransition+0x196>
		uint8_t from = (*gradient_a)[i][0];
 8001490:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800149a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t to = (*gradient_a)[i+1][0];
 800149e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80014aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (pos>=from && pos<to) {
 80014ae:	79fa      	ldrb	r2, [r7, #7]
 80014b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f0c0 80a5 	bcc.w	8001604 <gradientTransition+0x18c>
 80014ba:	79fa      	ldrb	r2, [r7, #7]
 80014bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f080 809f 	bcs.w	8001604 <gradientTransition+0x18c>
			f = (float)(pos-from)/(to-from);
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fc04 	bl	8000cdc <__aeabi_i2f>
 80014d4:	4604      	mov	r4, r0
 80014d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80014da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbfb 	bl	8000cdc <__aeabi_i2f>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fcfe 	bl	8000eec <__aeabi_fdiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	623b      	str	r3, [r7, #32]
			a.r = (uint8_t)lerp((*gradient_a)[i][1], (*gradient_a)[i+1][1], f);
 80014f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	785b      	ldrb	r3, [r3, #1]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fbeb 	bl	8000cdc <__aeabi_i2f>
 8001506:	4604      	mov	r4, r0
 8001508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150c:	3301      	adds	r3, #1
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	4619      	mov	r1, r3
 8001518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	785b      	ldrb	r3, [r3, #1]
 8001524:	1acb      	subs	r3, r1, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fbd8 	bl	8000cdc <__aeabi_i2f>
 800152c:	4603      	mov	r3, r0
 800152e:	6a39      	ldr	r1, [r7, #32]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fc27 	bl	8000d84 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	4619      	mov	r1, r3
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff fb1a 	bl	8000b74 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe0a 	bl	800115c <__aeabi_f2uiz>
 8001548:	4603      	mov	r3, r0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	763b      	strb	r3, [r7, #24]
			a.g = (uint8_t)lerp((*gradient_a)[i][2], (*gradient_a)[i+1][2], f);
 800154e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	789b      	ldrb	r3, [r3, #2]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fbbe 	bl	8000cdc <__aeabi_i2f>
 8001560:	4604      	mov	r4, r0
 8001562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001566:	3301      	adds	r3, #1
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	4619      	mov	r1, r3
 8001572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	789b      	ldrb	r3, [r3, #2]
 800157e:	1acb      	subs	r3, r1, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fbab 	bl	8000cdc <__aeabi_i2f>
 8001586:	4603      	mov	r3, r0
 8001588:	6a39      	ldr	r1, [r7, #32]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fbfa 	bl	8000d84 <__aeabi_fmul>
 8001590:	4603      	mov	r3, r0
 8001592:	4619      	mov	r1, r3
 8001594:	4620      	mov	r0, r4
 8001596:	f7ff faed 	bl	8000b74 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fddd 	bl	800115c <__aeabi_f2uiz>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	767b      	strb	r3, [r7, #25]
			a.b = (uint8_t)lerp((*gradient_a)[i][3], (*gradient_a)[i+1][3], f);
 80015a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	78db      	ldrb	r3, [r3, #3]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fb91 	bl	8000cdc <__aeabi_i2f>
 80015ba:	4604      	mov	r4, r0
 80015bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015c0:	3301      	adds	r3, #1
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	4619      	mov	r1, r3
 80015cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	78db      	ldrb	r3, [r3, #3]
 80015d8:	1acb      	subs	r3, r1, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb7e 	bl	8000cdc <__aeabi_i2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	6a39      	ldr	r1, [r7, #32]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fbcd 	bl	8000d84 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4620      	mov	r0, r4
 80015f0:	f7ff fac0 	bl	8000b74 <__addsf3>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fdb0 	bl	800115c <__aeabi_f2uiz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	76bb      	strb	r3, [r7, #26]
			break;
 8001602:	e009      	b.n	8001618 <gradientTransition+0x1a0>
	for (i=0; i<15; i++) {
 8001604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001608:	3301      	adds	r3, #1
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800160e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001612:	2b0e      	cmp	r3, #14
 8001614:	f67f af3c 	bls.w	8001490 <gradientTransition+0x18>
		}
	}

	// Second gradient interation
	for (i=0; i<15; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800161e:	e0b7      	b.n	8001790 <gradientTransition+0x318>
		uint8_t from = (*gradient_b)[i][0];
 8001620:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800162a:	77fb      	strb	r3, [r7, #31]
		uint8_t to = (*gradient_b)[i+1][0];
 800162c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001638:	77bb      	strb	r3, [r7, #30]
		if (pos>=from && pos<to) {
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	429a      	cmp	r2, r3
 8001640:	f0c0 80a1 	bcc.w	8001786 <gradientTransition+0x30e>
 8001644:	79fa      	ldrb	r2, [r7, #7]
 8001646:	7fbb      	ldrb	r3, [r7, #30]
 8001648:	429a      	cmp	r2, r3
 800164a:	f080 809c 	bcs.w	8001786 <gradientTransition+0x30e>
			f = (float)(pos-from)/(to-from);
 800164e:	79fa      	ldrb	r2, [r7, #7]
 8001650:	7ffb      	ldrb	r3, [r7, #31]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb41 	bl	8000cdc <__aeabi_i2f>
 800165a:	4604      	mov	r4, r0
 800165c:	7fba      	ldrb	r2, [r7, #30]
 800165e:	7ffb      	ldrb	r3, [r7, #31]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb3a 	bl	8000cdc <__aeabi_i2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4619      	mov	r1, r3
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff fc3d 	bl	8000eec <__aeabi_fdiv>
 8001672:	4603      	mov	r3, r0
 8001674:	623b      	str	r3, [r7, #32]
			b.r = (uint8_t)lerp((*gradient_b)[i][1], (*gradient_b)[i+1][1], f);
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fb2a 	bl	8000cdc <__aeabi_i2f>
 8001688:	4604      	mov	r4, r0
 800168a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800168e:	3301      	adds	r3, #1
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	785b      	ldrb	r3, [r3, #1]
 8001698:	4619      	mov	r1, r3
 800169a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	1acb      	subs	r3, r1, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fb17 	bl	8000cdc <__aeabi_i2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	6a39      	ldr	r1, [r7, #32]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb66 	bl	8000d84 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fa59 	bl	8000b74 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fd49 	bl	800115c <__aeabi_f2uiz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	753b      	strb	r3, [r7, #20]
			b.g = (uint8_t)lerp((*gradient_b)[i][2], (*gradient_b)[i+1][2], f);
 80016d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016d4:	68ba      	ldr	r2, [r7, #8]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fafd 	bl	8000cdc <__aeabi_i2f>
 80016e2:	4604      	mov	r4, r0
 80016e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e8:	3301      	adds	r3, #1
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	789b      	ldrb	r3, [r3, #2]
 80016f2:	4619      	mov	r1, r3
 80016f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f8:	68ba      	ldr	r2, [r7, #8]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	1acb      	subs	r3, r1, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff faea 	bl	8000cdc <__aeabi_i2f>
 8001708:	4603      	mov	r3, r0
 800170a:	6a39      	ldr	r1, [r7, #32]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb39 	bl	8000d84 <__aeabi_fmul>
 8001712:	4603      	mov	r3, r0
 8001714:	4619      	mov	r1, r3
 8001716:	4620      	mov	r0, r4
 8001718:	f7ff fa2c 	bl	8000b74 <__addsf3>
 800171c:	4603      	mov	r3, r0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fd1c 	bl	800115c <__aeabi_f2uiz>
 8001724:	4603      	mov	r3, r0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	757b      	strb	r3, [r7, #21]
			b.b = (uint8_t)lerp((*gradient_b)[i][3], (*gradient_b)[i+1][3], f);
 800172a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	78db      	ldrb	r3, [r3, #3]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fad0 	bl	8000cdc <__aeabi_i2f>
 800173c:	4604      	mov	r4, r0
 800173e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001742:	3301      	adds	r3, #1
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	78db      	ldrb	r3, [r3, #3]
 800174c:	4619      	mov	r1, r3
 800174e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	78db      	ldrb	r3, [r3, #3]
 800175a:	1acb      	subs	r3, r1, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fabd 	bl	8000cdc <__aeabi_i2f>
 8001762:	4603      	mov	r3, r0
 8001764:	6a39      	ldr	r1, [r7, #32]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb0c 	bl	8000d84 <__aeabi_fmul>
 800176c:	4603      	mov	r3, r0
 800176e:	4619      	mov	r1, r3
 8001770:	4620      	mov	r0, r4
 8001772:	f7ff f9ff 	bl	8000b74 <__addsf3>
 8001776:	4603      	mov	r3, r0
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fcef 	bl	800115c <__aeabi_f2uiz>
 800177e:	4603      	mov	r3, r0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	75bb      	strb	r3, [r7, #22]
			break;
 8001784:	e009      	b.n	800179a <gradientTransition+0x322>
	for (i=0; i<15; i++) {
 8001786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800178a:	3301      	adds	r3, #1
 800178c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001794:	2b0e      	cmp	r3, #14
 8001796:	f67f af43 	bls.w	8001620 <gradientTransition+0x1a8>
			gammaTable[FLOAT_TO_INT(lerp(a.r, b.r, transition))],
			gammaTable[FLOAT_TO_INT(lerp(a.g, b.g, transition))],
			gammaTable[FLOAT_TO_INT(lerp(a.b, b.b, transition))]
	);*/

	return getRGB(
 800179a:	7e3b      	ldrb	r3, [r7, #24]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa9d 	bl	8000cdc <__aeabi_i2f>
 80017a2:	4604      	mov	r4, r0
 80017a4:	7d3b      	ldrb	r3, [r7, #20]
 80017a6:	461a      	mov	r2, r3
 80017a8:	7e3b      	ldrb	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fa95 	bl	8000cdc <__aeabi_i2f>
 80017b2:	4603      	mov	r3, r0
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fae4 	bl	8000d84 <__aeabi_fmul>
 80017bc:	4603      	mov	r3, r0
 80017be:	4619      	mov	r1, r3
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7ff f9d7 	bl	8000b74 <__addsf3>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fcc7 	bl	800115c <__aeabi_f2uiz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b23      	ldr	r3, [pc, #140]	; (8001864 <gradientTransition+0x3ec>)
 80017d6:	5c9b      	ldrb	r3, [r3, r2]
 80017d8:	041c      	lsls	r4, r3, #16
 80017da:	7e7b      	ldrb	r3, [r7, #25]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fa7d 	bl	8000cdc <__aeabi_i2f>
 80017e2:	4605      	mov	r5, r0
 80017e4:	7d7b      	ldrb	r3, [r7, #21]
 80017e6:	461a      	mov	r2, r3
 80017e8:	7e7b      	ldrb	r3, [r7, #25]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fa75 	bl	8000cdc <__aeabi_i2f>
 80017f2:	4603      	mov	r3, r0
 80017f4:	6839      	ldr	r1, [r7, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fac4 	bl	8000d84 <__aeabi_fmul>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4619      	mov	r1, r3
 8001800:	4628      	mov	r0, r5
 8001802:	f7ff f9b7 	bl	8000b74 <__addsf3>
 8001806:	4603      	mov	r3, r0
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fca7 	bl	800115c <__aeabi_f2uiz>
 800180e:	4603      	mov	r3, r0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <gradientTransition+0x3ec>)
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	431c      	orrs	r4, r3
 800181c:	7ebb      	ldrb	r3, [r7, #26]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa5c 	bl	8000cdc <__aeabi_i2f>
 8001824:	4605      	mov	r5, r0
 8001826:	7dbb      	ldrb	r3, [r7, #22]
 8001828:	461a      	mov	r2, r3
 800182a:	7ebb      	ldrb	r3, [r7, #26]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fa54 	bl	8000cdc <__aeabi_i2f>
 8001834:	4603      	mov	r3, r0
 8001836:	6839      	ldr	r1, [r7, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff faa3 	bl	8000d84 <__aeabi_fmul>
 800183e:	4603      	mov	r3, r0
 8001840:	4619      	mov	r1, r3
 8001842:	4628      	mov	r0, r5
 8001844:	f7ff f996 	bl	8000b74 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fc86 	bl	800115c <__aeabi_f2uiz>
 8001850:	4603      	mov	r3, r0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	4b03      	ldr	r3, [pc, #12]	; (8001864 <gradientTransition+0x3ec>)
 8001858:	5c9b      	ldrb	r3, [r3, r2]
 800185a:	4323      	orrs	r3, r4
			gammaTable[(uint8_t)lerp(a.r, b.r, transition)],
			gammaTable[(uint8_t)lerp(a.g, b.g, transition)],
			gammaTable[(uint8_t)lerp(a.b, b.b, transition)]
	);
}
 800185c:	4618      	mov	r0, r3
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bdb0      	pop	{r4, r5, r7, pc}
 8001864:	2000073c 	.word	0x2000073c

08001868 <gradientRGB>:


uint32_t gradientRGB(uint8_t (*gradient)[16][4], uint8_t pos) {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	uint32_t color = 0x000000;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
	uint8_t r, g, b, i;
	float f;

	for (i=0; i<15; i++) {
 8001878:	2300      	movs	r3, #0
 800187a:	74fb      	strb	r3, [r7, #19]
 800187c:	e0bb      	b.n	80019f6 <gradientRGB+0x18e>
		uint8_t from = (*gradient)[i][0];
 800187e:	7cfa      	ldrb	r2, [r7, #19]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001886:	74bb      	strb	r3, [r7, #18]
		uint8_t to = (*gradient)[i+1][0];
 8001888:	7cfb      	ldrb	r3, [r7, #19]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8001892:	747b      	strb	r3, [r7, #17]
		if (pos>=from && pos<to) {
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	7cbb      	ldrb	r3, [r7, #18]
 8001898:	429a      	cmp	r2, r3
 800189a:	f0c0 80a9 	bcc.w	80019f0 <gradientRGB+0x188>
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	7c7b      	ldrb	r3, [r7, #17]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f080 80a4 	bcs.w	80019f0 <gradientRGB+0x188>
			f = (float)(pos-from)/(to-from);
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	7cbb      	ldrb	r3, [r7, #18]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa14 	bl	8000cdc <__aeabi_i2f>
 80018b4:	4604      	mov	r4, r0
 80018b6:	7c7a      	ldrb	r2, [r7, #17]
 80018b8:	7cbb      	ldrb	r3, [r7, #18]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fa0d 	bl	8000cdc <__aeabi_i2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff fb10 	bl	8000eec <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	60fb      	str	r3, [r7, #12]
			r = gammaTable[(uint8_t) lerp((*gradient)[i][1], (*gradient)[i+1][1], f)];
 80018d0:	7cfb      	ldrb	r3, [r7, #19]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	785b      	ldrb	r3, [r3, #1]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f9fe 	bl	8000cdc <__aeabi_i2f>
 80018e0:	4604      	mov	r4, r0
 80018e2:	7cfb      	ldrb	r3, [r7, #19]
 80018e4:	3301      	adds	r3, #1
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	785b      	ldrb	r3, [r3, #1]
 80018ee:	4619      	mov	r1, r3
 80018f0:	7cfb      	ldrb	r3, [r7, #19]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	1acb      	subs	r3, r1, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f9ed 	bl	8000cdc <__aeabi_i2f>
 8001902:	4603      	mov	r3, r0
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fa3c 	bl	8000d84 <__aeabi_fmul>
 800190c:	4603      	mov	r3, r0
 800190e:	4619      	mov	r1, r3
 8001910:	4620      	mov	r0, r4
 8001912:	f7ff f92f 	bl	8000b74 <__addsf3>
 8001916:	4603      	mov	r3, r0
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fc1f 	bl	800115c <__aeabi_f2uiz>
 800191e:	4603      	mov	r3, r0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <gradientRGB+0x1a0>)
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	72fb      	strb	r3, [r7, #11]
			g = gammaTable[(uint8_t) lerp((*gradient)[i][2], (*gradient)[i+1][2], f)];
 800192a:	7cfb      	ldrb	r3, [r7, #19]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	789b      	ldrb	r3, [r3, #2]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff f9d1 	bl	8000cdc <__aeabi_i2f>
 800193a:	4604      	mov	r4, r0
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	3301      	adds	r3, #1
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	789b      	ldrb	r3, [r3, #2]
 8001948:	4619      	mov	r1, r3
 800194a:	7cfb      	ldrb	r3, [r7, #19]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	789b      	ldrb	r3, [r3, #2]
 8001954:	1acb      	subs	r3, r1, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f9c0 	bl	8000cdc <__aeabi_i2f>
 800195c:	4603      	mov	r3, r0
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fa0f 	bl	8000d84 <__aeabi_fmul>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff f902 	bl	8000b74 <__addsf3>
 8001970:	4603      	mov	r3, r0
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fbf2 	bl	800115c <__aeabi_f2uiz>
 8001978:	4603      	mov	r3, r0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <gradientRGB+0x1a0>)
 8001980:	5c9b      	ldrb	r3, [r3, r2]
 8001982:	72bb      	strb	r3, [r7, #10]
			b = gammaTable[(uint8_t) lerp((*gradient)[i][3], (*gradient)[i+1][3], f)];
 8001984:	7cfb      	ldrb	r3, [r7, #19]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f9a4 	bl	8000cdc <__aeabi_i2f>
 8001994:	4604      	mov	r4, r0
 8001996:	7cfb      	ldrb	r3, [r7, #19]
 8001998:	3301      	adds	r3, #1
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	4619      	mov	r1, r3
 80019a4:	7cfb      	ldrb	r3, [r7, #19]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	78db      	ldrb	r3, [r3, #3]
 80019ae:	1acb      	subs	r3, r1, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f993 	bl	8000cdc <__aeabi_i2f>
 80019b6:	4603      	mov	r3, r0
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9e2 	bl	8000d84 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff f8d5 	bl	8000b74 <__addsf3>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fbc5 	bl	800115c <__aeabi_f2uiz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <gradientRGB+0x1a0>)
 80019da:	5c9b      	ldrb	r3, [r3, r2]
 80019dc:	727b      	strb	r3, [r7, #9]
			color = (uint32_t)(r << 16 | g << 8 | b << 0);
 80019de:	7afb      	ldrb	r3, [r7, #11]
 80019e0:	041a      	lsls	r2, r3, #16
 80019e2:	7abb      	ldrb	r3, [r7, #10]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	431a      	orrs	r2, r3
 80019e8:	7a7b      	ldrb	r3, [r7, #9]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]
			//printf("Current float: %f, red: %d, green: %d, blue: %d\nHEX:  %04x\n", f, r, g, b, color);
			break;
 80019ee:	e006      	b.n	80019fe <gradientRGB+0x196>
	for (i=0; i<15; i++) {
 80019f0:	7cfb      	ldrb	r3, [r7, #19]
 80019f2:	3301      	adds	r3, #1
 80019f4:	74fb      	strb	r3, [r7, #19]
 80019f6:	7cfb      	ldrb	r3, [r7, #19]
 80019f8:	2b0e      	cmp	r3, #14
 80019fa:	f67f af40 	bls.w	800187e <gradientRGB+0x16>
		}
	}
	return color;
 80019fe:	697b      	ldr	r3, [r7, #20]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	2000073c 	.word	0x2000073c

08001a0c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a18:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d013      	beq.n	8001a4c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a28:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a2c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a34:	e000      	b.n	8001a38 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a36:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f9      	beq.n	8001a36 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a42:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001a4c:	687b      	ldr	r3, [r7, #4]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
	int i=0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e009      	b.n	8001a82 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	60ba      	str	r2, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff ffc8 	bl	8001a0c <ITM_SendChar>
	for (i=0; i<len; i++)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	dbf1      	blt.n	8001a6e <_write+0x16>
	return len;
 8001a8a:	687b      	ldr	r3, [r7, #4]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	0000      	movs	r0, r0
	...

08001a98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a9a:	b08f      	sub	sp, #60	; 0x3c
 8001a9c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	uint32_t changeTimer, transitionTimer;
	float transitionValue = 0;
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t brightness = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	float yPos = 0;
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t noise;
	float noise_f;

	uint8_t short_state = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t long_state = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint32_t time_keyEnc = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	61fb      	str	r3, [r7, #28]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ac0:	f000 fe1c 	bl	80026fc <HAL_Init>

	/* USER CODE BEGIN Init */
	gammaInit(1.8);
 8001ac4:	48bc      	ldr	r0, [pc, #752]	; (8001db8 <main+0x320>)
 8001ac6:	f7ff fc97 	bl	80013f8 <gammaInit>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001aca:	f000 fa31 	bl	8001f30 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ace:	f000 fafb 	bl	80020c8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001ad2:	f000 fa6d 	bl	8001fb0 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001ad6:	f000 faa1 	bl	800201c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8001ada:	2100      	movs	r1, #0
 8001adc:	48b7      	ldr	r0, [pc, #732]	; (8001dbc <main+0x324>)
 8001ade:	f001 fff1 	bl	8003ac4 <HAL_TIM_Encoder_Start>
	__HAL_TIM_SetCounter(&htim1,31); // TODO: Load from EEPROM
 8001ae2:	4bb6      	ldr	r3, [pc, #728]	; (8001dbc <main+0x324>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	221f      	movs	r2, #31
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
	/* APA102 */
	DigiLed_init(&hspi1);
 8001aea:	48b5      	ldr	r0, [pc, #724]	; (8001dc0 <main+0x328>)
 8001aec:	f7ff fb56 	bl	800119c <DigiLed_init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */;
	printf("Hi\n");
 8001af0:	48b4      	ldr	r0, [pc, #720]	; (8001dc4 <main+0x32c>)
 8001af2:	f002 fefd 	bl	80048f0 <puts>
	HAL_Delay(500);
 8001af6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001afa:	f000 fe61 	bl	80027c0 <HAL_Delay>
	while (1)
	{
		/**
		 * Encoder Handler
		 */
		if (brightness != TIM1->CNT/2) {
 8001afe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001b02:	4bb1      	ldr	r3, [pc, #708]	; (8001dc8 <main+0x330>)
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d01b      	beq.n	8001b44 <main+0xac>
			brightness = TIM1->CNT/2;
 8001b0c:	4bae      	ldr	r3, [pc, #696]	; (8001dc8 <main+0x330>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			if (brightness >= 0x1f) {
 8001b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b1a:	2b1e      	cmp	r3, #30
 8001b1c:	d90c      	bls.n	8001b38 <main+0xa0>
				/* BLINK */
				DigiLed_setAllRGB(0xffffff);
 8001b1e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001b22:	f7ff fbb7 	bl	8001294 <DigiLed_setAllRGB>
				DigiLed_update(FALSE);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff fbf6 	bl	8001318 <DigiLed_update>
				HAL_Delay(20);
 8001b2c:	2014      	movs	r0, #20
 8001b2e:	f000 fe47 	bl	80027c0 <HAL_Delay>
				brightness = 0x1f;
 8001b32:	231f      	movs	r3, #31
 8001b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			}
			printf("Illumination: %d", brightness);
 8001b38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	48a3      	ldr	r0, [pc, #652]	; (8001dcc <main+0x334>)
 8001b40:	f002 fe62 	bl	8004808 <iprintf>
		}

		/* Button handler
		 * src: https://istarik.ru/blog/stm32/148.html */
		uint32_t ms = HAL_GetTick();
 8001b44:	f000 fe32 	bl	80027ac <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]
		uint8_t keyEnc_state = HAL_GPIO_ReadPin(KEY_ENC_GPIO_Port, KEY_ENC_Pin);
 8001b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4e:	48a0      	ldr	r0, [pc, #640]	; (8001dd0 <main+0x338>)
 8001b50:	f001 f896 	bl	8002c80 <HAL_GPIO_ReadPin>
 8001b54:	4603      	mov	r3, r0
 8001b56:	73fb      	strb	r3, [r7, #15]
		if(keyEnc_state == 0 && !short_state && (ms - time_keyEnc) > 50) {
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d111      	bne.n	8001b82 <main+0xea>
 8001b5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10d      	bne.n	8001b82 <main+0xea>
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b32      	cmp	r3, #50	; 0x32
 8001b6e:	d908      	bls.n	8001b82 <main+0xea>
			short_state = 1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			long_state = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			time_keyEnc = ms;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	e0b1      	b.n	8001ce6 <main+0x24e>
		} else if(keyEnc_state == 0 && !long_state && (ms - time_keyEnc) > 1000) {
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d133      	bne.n	8001bf0 <main+0x158>
 8001b88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d12f      	bne.n	8001bf0 <main+0x158>
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b9a:	d929      	bls.n	8001bf0 <main+0x158>
			long_state = 1;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			// действие на длинное нажатие
			DigiLed_setAllRGB(0xff0000); DigiLed_update(FALSE); HAL_Delay(200);
 8001ba2:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 8001ba6:	f7ff fb75 	bl	8001294 <DigiLed_setAllRGB>
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fbb4 	bl	8001318 <DigiLed_update>
 8001bb0:	20c8      	movs	r0, #200	; 0xc8
 8001bb2:	f000 fe05 	bl	80027c0 <HAL_Delay>
			DigiLed_setAllRGB(0x00ff00); DigiLed_update(FALSE); HAL_Delay(200);
 8001bb6:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8001bba:	f7ff fb6b 	bl	8001294 <DigiLed_setAllRGB>
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fbaa 	bl	8001318 <DigiLed_update>
 8001bc4:	20c8      	movs	r0, #200	; 0xc8
 8001bc6:	f000 fdfb 	bl	80027c0 <HAL_Delay>
			DigiLed_setAllRGB(0x0000ff); DigiLed_update(FALSE); HAL_Delay(200);
 8001bca:	20ff      	movs	r0, #255	; 0xff
 8001bcc:	f7ff fb62 	bl	8001294 <DigiLed_setAllRGB>
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fba1 	bl	8001318 <DigiLed_update>
 8001bd6:	20c8      	movs	r0, #200	; 0xc8
 8001bd8:	f000 fdf2 	bl	80027c0 <HAL_Delay>
			DigiLed_setAllRGB(0x000000); DigiLed_update(FALSE); HAL_Delay(200);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fb59 	bl	8001294 <DigiLed_setAllRGB>
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff fb98 	bl	8001318 <DigiLed_update>
 8001be8:	20c8      	movs	r0, #200	; 0xc8
 8001bea:	f000 fde9 	bl	80027c0 <HAL_Delay>
 8001bee:	e07a      	b.n	8001ce6 <main+0x24e>
		} else if(keyEnc_state == 1 && short_state && (ms - time_keyEnc) > 50) {
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d177      	bne.n	8001ce6 <main+0x24e>
 8001bf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d073      	beq.n	8001ce6 <main+0x24e>
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b32      	cmp	r3, #50	; 0x32
 8001c06:	d96e      	bls.n	8001ce6 <main+0x24e>
			short_state = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			time_keyEnc = ms;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	61fb      	str	r3, [r7, #28]

			if(!long_state) {
 8001c12:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d165      	bne.n	8001ce6 <main+0x24e>
				// действие на короткое нажатие

				// Rainbow Transition Effect
				for(int8_t j = 0; j < 25; j++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	76fb      	strb	r3, [r7, #27]
 8001c1e:	e04a      	b.n	8001cb6 <main+0x21e>
					for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	833b      	strh	r3, [r7, #24]
 8001c24:	e037      	b.n	8001c96 <main+0x1fe>
						uint8_t linear = (uint8_t)(((float)n/LED_FRAME_SIZE)*255);
 8001c26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f856 	bl	8000cdc <__aeabi_i2f>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4968      	ldr	r1, [pc, #416]	; (8001dd4 <main+0x33c>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f959 	bl	8000eec <__aeabi_fdiv>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4966      	ldr	r1, [pc, #408]	; (8001dd8 <main+0x340>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f8a0 	bl	8000d84 <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fa88 	bl	800115c <__aeabi_f2uiz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73bb      	strb	r3, [r7, #14]
						uint8_t nn = (n + j) % LED_FRAME_SIZE;
 8001c50:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c54:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001c58:	441a      	add	r2, r3
 8001c5a:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <main+0x344>)
 8001c5c:	fb83 1302 	smull	r1, r3, r3, r2
 8001c60:	10d9      	asrs	r1, r3, #3
 8001c62:	17d3      	asrs	r3, r2, #31
 8001c64:	1ac9      	subs	r1, r1, r3
 8001c66:	460b      	mov	r3, r1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	440b      	add	r3, r1
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	1ad1      	subs	r1, r2, r3
 8001c70:	460b      	mov	r3, r1
 8001c72:	737b      	strb	r3, [r7, #13]
						DigiLed_setRGB(nn, gradientRGB(&loading, linear));
 8001c74:	7bbb      	ldrb	r3, [r7, #14]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4859      	ldr	r0, [pc, #356]	; (8001de0 <main+0x348>)
 8001c7a:	f7ff fdf5 	bl	8001868 <gradientRGB>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	7b7b      	ldrb	r3, [r7, #13]
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff facb 	bl	8001220 <DigiLed_setRGB>
					for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001c8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3301      	adds	r3, #1
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	833b      	strh	r3, [r7, #24]
 8001c96:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c9a:	2b30      	cmp	r3, #48	; 0x30
 8001c9c:	ddc3      	ble.n	8001c26 <main+0x18e>
					}
					DigiLed_update(FALSE);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fb3a 	bl	8001318 <DigiLed_update>
					HAL_Delay(10);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f000 fd8b 	bl	80027c0 <HAL_Delay>
				for(int8_t j = 0; j < 25; j++) {
 8001caa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	76fb      	strb	r3, [r7, #27]
 8001cb6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	ddb0      	ble.n	8001c20 <main+0x188>
				}
				// Incrementing
				if (currentGradient<gradientsNum-1) currentGradient++;
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <main+0x34c>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d806      	bhi.n	8001cd4 <main+0x23c>
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <main+0x34c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <main+0x34c>)
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e002      	b.n	8001cda <main+0x242>
				else currentGradient=0;
 8001cd4:	4b43      	ldr	r3, [pc, #268]	; (8001de4 <main+0x34c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
				nextGradient = currentGradient;
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <main+0x34c>)
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <main+0x350>)
 8001ce0:	701a      	strb	r2, [r3, #0]
				changeTimer = ms;
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
		}

		/**
		 * gradient changing
		 **/
		if ((ms-changeTimer) > 30000) {
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f247 5230 	movw	r2, #30000	; 0x7530
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d912      	bls.n	8001d1a <main+0x282>
			changeTimer = ms;
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
			transitionValue = 0;
 8001cf8:	f04f 0300 	mov.w	r3, #0
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (nextGradient<gradientsNum-1) nextGradient++;
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <main+0x350>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d806      	bhi.n	8001d14 <main+0x27c>
 8001d06:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <main+0x350>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <main+0x350>)
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e002      	b.n	8001d1a <main+0x282>
			else nextGradient=0;
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <main+0x350>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
		}

		if (nextGradient != currentGradient && (ms-transitionTimer) > 10) {
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <main+0x350>)
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <main+0x34c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d022      	beq.n	8001d6c <main+0x2d4>
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b0a      	cmp	r3, #10
 8001d2e:	d91d      	bls.n	8001d6c <main+0x2d4>
			transitionTimer = ms;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	633b      	str	r3, [r7, #48]	; 0x30
			transitionValue += 0.01;
 8001d34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d36:	f7fe fb77 	bl	8000428 <__aeabi_f2d>
 8001d3a:	a31d      	add	r3, pc, #116	; (adr r3, 8001db0 <main+0x318>)
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f7fe fa14 	bl	800016c <__adddf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f7fe febc 	bl	8000ac8 <__aeabi_d2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (transitionValue >= 1.0) {
 8001d54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d5a:	f7ff f9c5 	bl	80010e8 <__aeabi_fcmpge>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <main+0x2d4>
				currentGradient = nextGradient;
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <main+0x350>)
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <main+0x34c>)
 8001d6a:	701a      	strb	r2, [r3, #0]
			}
		}

		for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	82fb      	strh	r3, [r7, #22]
 8001d70:	e0b0      	b.n	8001ed4 <main+0x43c>
			noise_f = perlin2d( n, yPos, 0.1, 1);
 8001d72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe ffb0 	bl	8000cdc <__aeabi_i2f>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <main+0x354>)
 8001d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d82:	f000 face 	bl	8002322 <perlin2d>
 8001d86:	60b8      	str	r0, [r7, #8]
			noise = (uint8_t)constrain((noise_f*300-50), 0, 255);
 8001d88:	4919      	ldr	r1, [pc, #100]	; (8001df0 <main+0x358>)
 8001d8a:	68b8      	ldr	r0, [r7, #8]
 8001d8c:	f7fe fffa 	bl	8000d84 <__aeabi_fmul>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4918      	ldr	r1, [pc, #96]	; (8001df4 <main+0x35c>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe feeb 	bl	8000b70 <__aeabi_fsub>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f997 	bl	80010d4 <__aeabi_fcmple>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d025      	beq.n	8001df8 <main+0x360>
 8001dac:	2300      	movs	r3, #0
 8001dae:	e045      	b.n	8001e3c <main+0x3a4>
 8001db0:	47ae147b 	.word	0x47ae147b
 8001db4:	3f847ae1 	.word	0x3f847ae1
 8001db8:	3fe66666 	.word	0x3fe66666
 8001dbc:	200009e0 	.word	0x200009e0
 8001dc0:	20000a28 	.word	0x20000a28
 8001dc4:	08007588 	.word	0x08007588
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	0800758c 	.word	0x0800758c
 8001dd0:	40010800 	.word	0x40010800
 8001dd4:	42400000 	.word	0x42400000
 8001dd8:	437f0000 	.word	0x437f0000
 8001ddc:	2aaaaaab 	.word	0x2aaaaaab
 8001de0:	20000000 	.word	0x20000000
 8001de4:	2000083c 	.word	0x2000083c
 8001de8:	2000083d 	.word	0x2000083d
 8001dec:	3dcccccd 	.word	0x3dcccccd
 8001df0:	43960000 	.word	0x43960000
 8001df4:	42480000 	.word	0x42480000
 8001df8:	4947      	ldr	r1, [pc, #284]	; (8001f18 <main+0x480>)
 8001dfa:	68b8      	ldr	r0, [r7, #8]
 8001dfc:	f7fe ffc2 	bl	8000d84 <__aeabi_fmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4946      	ldr	r1, [pc, #280]	; (8001f1c <main+0x484>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe feb3 	bl	8000b70 <__aeabi_fsub>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4944      	ldr	r1, [pc, #272]	; (8001f20 <main+0x488>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f96a 	bl	80010e8 <__aeabi_fcmpge>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <main+0x386>
 8001e1a:	23ff      	movs	r3, #255	; 0xff
 8001e1c:	e00e      	b.n	8001e3c <main+0x3a4>
 8001e1e:	493e      	ldr	r1, [pc, #248]	; (8001f18 <main+0x480>)
 8001e20:	68b8      	ldr	r0, [r7, #8]
 8001e22:	f7fe ffaf 	bl	8000d84 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	493c      	ldr	r1, [pc, #240]	; (8001f1c <main+0x484>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fea0 	bl	8000b70 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f992 	bl	800115c <__aeabi_f2uiz>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	71fb      	strb	r3, [r7, #7]

			if (nextGradient != currentGradient)
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <main+0x48c>)
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <main+0x490>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d02d      	beq.n	8001ea6 <main+0x40e>
				DigiLed_setRGB(n,gradientTransition(
 8001e4a:	8afb      	ldrh	r3, [r7, #22]
 8001e4c:	b2dc      	uxtb	r4, r3
						&gradients[currentGradient],
 8001e4e:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <main+0x490>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	019b      	lsls	r3, r3, #6
 8001e54:	4a35      	ldr	r2, [pc, #212]	; (8001f2c <main+0x494>)
 8001e56:	189d      	adds	r5, r3, r2
						&gradients[nextGradient],
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <main+0x48c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	4a33      	ldr	r2, [pc, #204]	; (8001f2c <main+0x494>)
 8001e60:	189e      	adds	r6, r3, r2
				DigiLed_setRGB(n,gradientTransition(
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e68:	f7ff f934 	bl	80010d4 <__aeabi_fcmple>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <main+0x3e0>
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e00b      	b.n	8001e90 <main+0x3f8>
						noise, constrain(transitionValue, 0, 1)
 8001e78:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e7e:	f7ff f933 	bl	80010e8 <__aeabi_fcmpge>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <main+0x3f6>
 8001e88:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e8c:	e000      	b.n	8001e90 <main+0x3f8>
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
				DigiLed_setRGB(n,gradientTransition(
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	4631      	mov	r1, r6
 8001e94:	4628      	mov	r0, r5
 8001e96:	f7ff faef 	bl	8001478 <gradientTransition>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f7ff f9be 	bl	8001220 <DigiLed_setRGB>
 8001ea4:	e010      	b.n	8001ec8 <main+0x430>
				));
			else
				DigiLed_setRGB(n,gradientRGB(&gradients[currentGradient], noise));
 8001ea6:	8afb      	ldrh	r3, [r7, #22]
 8001ea8:	b2dc      	uxtb	r4, r3
 8001eaa:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <main+0x490>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	019b      	lsls	r3, r3, #6
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <main+0x494>)
 8001eb2:	4413      	add	r3, r2
 8001eb4:	79fa      	ldrb	r2, [r7, #7]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fcd5 	bl	8001868 <gradientRGB>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff f9ac 	bl	8001220 <DigiLed_setRGB>
		for(int16_t n = 0; n <= LED_FRAME_SIZE; n++) {
 8001ec8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	82fb      	strh	r3, [r7, #22]
 8001ed4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ed8:	2b30      	cmp	r3, #48	; 0x30
 8001eda:	f77f af4a 	ble.w	8001d72 <main+0x2da>
		}

		yPos += .1;
 8001ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ee0:	f7fe faa2 	bl	8000428 <__aeabi_f2d>
 8001ee4:	a30a      	add	r3, pc, #40	; (adr r3, 8001f10 <main+0x478>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe f93f 	bl	800016c <__adddf3>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	f7fe fde7 	bl	8000ac8 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		DigiLed_setAllIllumination(brightness);
 8001efe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f9e2 	bl	80012cc <DigiLed_setAllIllumination>
		DigiLed_update(FALSE);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fa05 	bl	8001318 <DigiLed_update>
	{
 8001f0e:	e5f6      	b.n	8001afe <main+0x66>
 8001f10:	9999999a 	.word	0x9999999a
 8001f14:	3fb99999 	.word	0x3fb99999
 8001f18:	43960000 	.word	0x43960000
 8001f1c:	42480000 	.word	0x42480000
 8001f20:	437f0000 	.word	0x437f0000
 8001f24:	2000083d 	.word	0x2000083d
 8001f28:	2000083c 	.word	0x2000083c
 8001f2c:	20000040 	.word	0x20000040

08001f30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b090      	sub	sp, #64	; 0x40
 8001f34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f36:	f107 0318 	add.w	r3, r7, #24
 8001f3a:	2228      	movs	r2, #40	; 0x28
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f001 ff64 	bl	8003e0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f56:	2301      	movs	r3, #1
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f5a:	2310      	movs	r3, #16
 8001f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001f66:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 feb5 	bl	8002ce0 <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001f7c:	f000 f8fe 	bl	800217c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f84:	2302      	movs	r3, #2
 8001f86:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 f921 	bl	80031e0 <HAL_RCC_ClockConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8001fa4:	f000 f8ea 	bl	800217c <Error_Handler>
	}
}
 8001fa8:	bf00      	nop
 8001faa:	3740      	adds	r7, #64	; 0x40
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <MX_SPI1_Init+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <MX_SPI1_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_SPI1_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <MX_SPI1_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_SPI1_Init+0x64>)
 8001ffc:	220a      	movs	r2, #10
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_SPI1_Init+0x64>)
 8002002:	f001 fa57 	bl	80034b4 <HAL_SPI_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800200c:	f000 f8b6 	bl	800217c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000a28 	.word	0x20000a28
 8002018:	40013000 	.word	0x40013000

0800201c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f001 feee 	bl	8003e0c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <MX_TIM1_Init+0xa4>)
 800203a:	4a22      	ldr	r2, [pc, #136]	; (80020c4 <MX_TIM1_Init+0xa8>)
 800203c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <MX_TIM1_Init+0xa4>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <MX_TIM1_Init+0xa4>)
 8002046:	2260      	movs	r2, #96	; 0x60
 8002048:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62;
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <MX_TIM1_Init+0xa4>)
 800204c:	223e      	movs	r2, #62	; 0x3e
 800204e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <MX_TIM1_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002056:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <MX_TIM1_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <MX_TIM1_Init+0xa4>)
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002062:	2301      	movs	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800206a:	2301      	movs	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 15;
 8002072:	230f      	movs	r3, #15
 8002074:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800207a:	2301      	movs	r3, #1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800207e:	2300      	movs	r3, #0
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 15;
 8002082:	230f      	movs	r3, #15
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	4619      	mov	r1, r3
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <MX_TIM1_Init+0xa4>)
 800208e:	f001 fc77 	bl	8003980 <HAL_TIM_Encoder_Init>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <MX_TIM1_Init+0x80>
	{
		Error_Handler();
 8002098:	f000 f870 	bl	800217c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_TIM1_Init+0xa4>)
 80020aa:	f001 fe1f 	bl	8003cec <HAL_TIMEx_MasterConfigSynchronization>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 80020b4:	f000 f862 	bl	800217c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80020b8:	bf00      	nop
 80020ba:	3730      	adds	r7, #48	; 0x30
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200009e0 	.word	0x200009e0
 80020c4:	40012c00 	.word	0x40012c00

080020c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ce:	f107 0310 	add.w	r3, r7, #16
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <MX_GPIO_Init+0xa8>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4a23      	ldr	r2, [pc, #140]	; (8002170 <MX_GPIO_Init+0xa8>)
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	6193      	str	r3, [r2, #24]
 80020e8:	4b21      	ldr	r3, [pc, #132]	; (8002170 <MX_GPIO_Init+0xa8>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <MX_GPIO_Init+0xa8>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <MX_GPIO_Init+0xa8>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6193      	str	r3, [r2, #24]
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <MX_GPIO_Init+0xa8>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b18      	ldr	r3, [pc, #96]	; (8002170 <MX_GPIO_Init+0xa8>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <MX_GPIO_Init+0xa8>)
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <MX_GPIO_Init+0xa8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800212a:	4812      	ldr	r0, [pc, #72]	; (8002174 <MX_GPIO_Init+0xac>)
 800212c:	f000 fdbf 	bl	8002cae <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002136:	2301      	movs	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2302      	movs	r3, #2
 8002140:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4619      	mov	r1, r3
 8002148:	480a      	ldr	r0, [pc, #40]	; (8002174 <MX_GPIO_Init+0xac>)
 800214a:	f000 fc3f 	bl	80029cc <HAL_GPIO_Init>

	/*Configure GPIO pin : KEY_ENC_Pin */
	GPIO_InitStruct.Pin = KEY_ENC_Pin;
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(KEY_ENC_GPIO_Port, &GPIO_InitStruct);
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4619      	mov	r1, r3
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_GPIO_Init+0xb0>)
 8002164:	f000 fc32 	bl	80029cc <HAL_GPIO_Init>

}
 8002168:	bf00      	nop
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	40011000 	.word	0x40011000
 8002178:	40010800 	.word	0x40010800

0800217c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <noise2>:
                     101,120,99,3,186,86,99,41,237,203,111,79,220,135,158,42,30,154,120,67,87,167,
                     135,176,183,191,253,115,184,21,233,58,129,233,142,39,128,211,118,137,139,255,
                     114,20,218,113,154,27,127,246,250,1,8,198,250,209,92,222,173,21,88,102,219};

int noise2(int x, int y)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    int tmp = hash[(y + SEED) % 256];
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <noise2+0x44>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	425a      	negs	r2, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	bf58      	it	pl
 80021a2:	4253      	negpl	r3, r2
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <noise2+0x48>)
 80021a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021aa:	60fb      	str	r3, [r7, #12]
    return hash[(tmp + x) % 256];
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	425a      	negs	r2, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	bf58      	it	pl
 80021ba:	4253      	negpl	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <noise2+0x48>)
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	20000840 	.word	0x20000840
 80021d0:	20000140 	.word	0x20000140

080021d4 <lin_inter>:

float lin_inter(float x, float y, float s)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
    return x + s * (y-x);
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	68b8      	ldr	r0, [r7, #8]
 80021e4:	f7fe fcc4 	bl	8000b70 <__aeabi_fsub>
 80021e8:	4603      	mov	r3, r0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fdc9 	bl	8000d84 <__aeabi_fmul>
 80021f2:	4603      	mov	r3, r0
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fcbc 	bl	8000b74 <__addsf3>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <smooth_inter>:

float smooth_inter(float x, float y, float s)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
    return lin_inter(x, y, s * s * (3-2*s));
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fdb4 	bl	8000d84 <__aeabi_fmul>
 800221c:	4603      	mov	r3, r0
 800221e:	461c      	mov	r4, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4619      	mov	r1, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe fca5 	bl	8000b74 <__addsf3>
 800222a:	4603      	mov	r3, r0
 800222c:	4619      	mov	r1, r3
 800222e:	4809      	ldr	r0, [pc, #36]	; (8002254 <smooth_inter+0x4c>)
 8002230:	f7fe fc9e 	bl	8000b70 <__aeabi_fsub>
 8002234:	4603      	mov	r3, r0
 8002236:	4619      	mov	r1, r3
 8002238:	4620      	mov	r0, r4
 800223a:	f7fe fda3 	bl	8000d84 <__aeabi_fmul>
 800223e:	4603      	mov	r3, r0
 8002240:	461a      	mov	r2, r3
 8002242:	68b9      	ldr	r1, [r7, #8]
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff ffc5 	bl	80021d4 <lin_inter>
 800224a:	4603      	mov	r3, r0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	bd90      	pop	{r4, r7, pc}
 8002254:	40400000 	.word	0x40400000

08002258 <noise2d>:

float noise2d(float x, float y)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b08d      	sub	sp, #52	; 0x34
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
    int x_int = x;
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe ff54 	bl	8001110 <__aeabi_f2iz>
 8002268:	4603      	mov	r3, r0
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    int y_int = y;
 800226c:	6838      	ldr	r0, [r7, #0]
 800226e:	f7fe ff4f 	bl	8001110 <__aeabi_f2iz>
 8002272:	4603      	mov	r3, r0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
    float x_frac = x - x_int;
 8002276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002278:	f7fe fd30 	bl	8000cdc <__aeabi_i2f>
 800227c:	4603      	mov	r3, r0
 800227e:	4619      	mov	r1, r3
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7fe fc75 	bl	8000b70 <__aeabi_fsub>
 8002286:	4603      	mov	r3, r0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
    float y_frac = y - y_int;
 800228a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800228c:	f7fe fd26 	bl	8000cdc <__aeabi_i2f>
 8002290:	4603      	mov	r3, r0
 8002292:	4619      	mov	r1, r3
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f7fe fc6b 	bl	8000b70 <__aeabi_fsub>
 800229a:	4603      	mov	r3, r0
 800229c:	623b      	str	r3, [r7, #32]
    int s = noise2(x_int, y_int);
 800229e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022a2:	f7ff ff71 	bl	8002188 <noise2>
 80022a6:	61f8      	str	r0, [r7, #28]
    int t = noise2(x_int+1, y_int);
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	3301      	adds	r3, #1
 80022ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff6a 	bl	8002188 <noise2>
 80022b4:	61b8      	str	r0, [r7, #24]
    int u = noise2(x_int, y_int+1);
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	3301      	adds	r3, #1
 80022ba:	4619      	mov	r1, r3
 80022bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022be:	f7ff ff63 	bl	8002188 <noise2>
 80022c2:	6178      	str	r0, [r7, #20]
    int v = noise2(x_int+1, y_int+1);
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	3301      	adds	r3, #1
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f7ff ff5a 	bl	8002188 <noise2>
 80022d4:	6138      	str	r0, [r7, #16]
    float low = smooth_inter(s, t, x_frac);
 80022d6:	69f8      	ldr	r0, [r7, #28]
 80022d8:	f7fe fd00 	bl	8000cdc <__aeabi_i2f>
 80022dc:	4604      	mov	r4, r0
 80022de:	69b8      	ldr	r0, [r7, #24]
 80022e0:	f7fe fcfc 	bl	8000cdc <__aeabi_i2f>
 80022e4:	4603      	mov	r3, r0
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	4619      	mov	r1, r3
 80022ea:	4620      	mov	r0, r4
 80022ec:	f7ff ff8c 	bl	8002208 <smooth_inter>
 80022f0:	60f8      	str	r0, [r7, #12]
    float high = smooth_inter(u, v, x_frac);
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7fe fcf2 	bl	8000cdc <__aeabi_i2f>
 80022f8:	4604      	mov	r4, r0
 80022fa:	6938      	ldr	r0, [r7, #16]
 80022fc:	f7fe fcee 	bl	8000cdc <__aeabi_i2f>
 8002300:	4603      	mov	r3, r0
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	4619      	mov	r1, r3
 8002306:	4620      	mov	r0, r4
 8002308:	f7ff ff7e 	bl	8002208 <smooth_inter>
 800230c:	60b8      	str	r0, [r7, #8]
    return smooth_inter(low, high, y_frac);
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f7ff ff78 	bl	8002208 <smooth_inter>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3734      	adds	r7, #52	; 0x34
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <perlin2d>:

float perlin2d(float x, float y, float freq, int depth)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b08a      	sub	sp, #40	; 0x28
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	603b      	str	r3, [r7, #0]
    float xa = x*freq;
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f7fe fd26 	bl	8000d84 <__aeabi_fmul>
 8002338:	4603      	mov	r3, r0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    float ya = y*freq;
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	68b8      	ldr	r0, [r7, #8]
 8002340:	f7fe fd20 	bl	8000d84 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	623b      	str	r3, [r7, #32]
    float amp = 1.0;
 8002348:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800234c:	61fb      	str	r3, [r7, #28]
    float fin = 0;
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
    float div = 0.0;
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	617b      	str	r3, [r7, #20]

    int i;
    for(i=0; i<depth; i++)
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	e033      	b.n	80023c8 <perlin2d+0xa6>
    {
        div += 256 * amp;
 8002360:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8002364:	69f8      	ldr	r0, [r7, #28]
 8002366:	f7fe fd0d 	bl	8000d84 <__aeabi_fmul>
 800236a:	4603      	mov	r3, r0
 800236c:	4619      	mov	r1, r3
 800236e:	6978      	ldr	r0, [r7, #20]
 8002370:	f7fe fc00 	bl	8000b74 <__addsf3>
 8002374:	4603      	mov	r3, r0
 8002376:	617b      	str	r3, [r7, #20]
        fin += noise2d(xa, ya) * amp;
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800237c:	f7ff ff6c 	bl	8002258 <noise2d>
 8002380:	4603      	mov	r3, r0
 8002382:	69f9      	ldr	r1, [r7, #28]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fcfd 	bl	8000d84 <__aeabi_fmul>
 800238a:	4603      	mov	r3, r0
 800238c:	4619      	mov	r1, r3
 800238e:	69b8      	ldr	r0, [r7, #24]
 8002390:	f7fe fbf0 	bl	8000b74 <__addsf3>
 8002394:	4603      	mov	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]
        amp /= 2;
 8002398:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800239c:	69f8      	ldr	r0, [r7, #28]
 800239e:	f7fe fda5 	bl	8000eec <__aeabi_fdiv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	61fb      	str	r3, [r7, #28]
        xa *= 2;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	4619      	mov	r1, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fbe2 	bl	8000b74 <__addsf3>
 80023b0:	4603      	mov	r3, r0
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
        ya *= 2;
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	4619      	mov	r1, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fbdb 	bl	8000b74 <__addsf3>
 80023be:	4603      	mov	r3, r0
 80023c0:	623b      	str	r3, [r7, #32]
    for(i=0; i<depth; i++)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	3301      	adds	r3, #1
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	dbc7      	blt.n	8002360 <perlin2d+0x3e>
    }

    return fin/div;
 80023d0:	6979      	ldr	r1, [r7, #20]
 80023d2:	69b8      	ldr	r0, [r7, #24]
 80023d4:	f7fe fd8a 	bl	8000eec <__aeabi_fdiv>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3728      	adds	r7, #40	; 0x28
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <HAL_MspInit+0x5c>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4a14      	ldr	r2, [pc, #80]	; (8002440 <HAL_MspInit+0x5c>)
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6193      	str	r3, [r2, #24]
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_MspInit+0x5c>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <HAL_MspInit+0x5c>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a0e      	ldr	r2, [pc, #56]	; (8002440 <HAL_MspInit+0x5c>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	61d3      	str	r3, [r2, #28]
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_MspInit+0x5c>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_MspInit+0x60>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_MspInit+0x60>)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	40021000 	.word	0x40021000
 8002444:	40010000 	.word	0x40010000

08002448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_SPI_MspInit+0x88>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d12f      	bne.n	80024c8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002468:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 800246e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <HAL_SPI_MspInit+0x8c>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002498:	23a0      	movs	r3, #160	; 0xa0
 800249a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	480b      	ldr	r0, [pc, #44]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 80024ac:	f000 fa8e 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024b0:	2340      	movs	r3, #64	; 0x40
 80024b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024bc:	f107 0310 	add.w	r3, r7, #16
 80024c0:	4619      	mov	r1, r3
 80024c2:	4805      	ldr	r0, [pc, #20]	; (80024d8 <HAL_SPI_MspInit+0x90>)
 80024c4:	f000 fa82 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013000 	.word	0x40013000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010800 	.word	0x40010800

080024dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0310 	add.w	r3, r7, #16
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_TIM_Encoder_MspInit+0x74>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d124      	bne.n	8002546 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_TIM_Encoder_MspInit+0x78>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_TIM_Encoder_MspInit+0x78>)
 8002502:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002506:	6193      	str	r3, [r2, #24]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_TIM_Encoder_MspInit+0x78>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <HAL_TIM_Encoder_MspInit+0x78>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a0e      	ldr	r2, [pc, #56]	; (8002554 <HAL_TIM_Encoder_MspInit+0x78>)
 800251a:	f043 0304 	orr.w	r3, r3, #4
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_TIM_Encoder_MspInit+0x78>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800252c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002542:	f000 fa43 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002546:	bf00      	nop
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40010800 	.word	0x40010800

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <HardFault_Handler+0x4>

0800256e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <MemManage_Handler+0x4>

08002574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <BusFault_Handler+0x4>

0800257a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257e:	e7fe      	b.n	800257e <UsageFault_Handler+0x4>

08002580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a8:	f000 f8ee 	bl	8002788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	e00a      	b.n	80025d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025c2:	f3af 8000 	nop.w
 80025c6:	4601      	mov	r1, r0
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	b2ca      	uxtb	r2, r1
 80025d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3301      	adds	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dbf0      	blt.n	80025c2 <_read+0x12>
	}

return len;
 80025e0:	687b      	ldr	r3, [r7, #4]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
	return -1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002610:	605a      	str	r2, [r3, #4]
	return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <_isatty>:

int _isatty(int file)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	return 1;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
	return 0;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002654:	4b11      	ldr	r3, [pc, #68]	; (800269c <_sbrk+0x50>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x16>
		heap_end = &end;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <_sbrk+0x50>)
 800265e:	4a10      	ldr	r2, [pc, #64]	; (80026a0 <_sbrk+0x54>)
 8002660:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <_sbrk+0x50>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <_sbrk+0x50>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4413      	add	r3, r2
 8002670:	466a      	mov	r2, sp
 8002672:	4293      	cmp	r3, r2
 8002674:	d907      	bls.n	8002686 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002676:	f001 fb97 	bl	8003da8 <__errno>
 800267a:	4602      	mov	r2, r0
 800267c:	230c      	movs	r3, #12
 800267e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002684:	e006      	b.n	8002694 <_sbrk+0x48>
	}

	heap_end += incr;
 8002686:	4b05      	ldr	r3, [pc, #20]	; (800269c <_sbrk+0x50>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a03      	ldr	r2, [pc, #12]	; (800269c <_sbrk+0x50>)
 8002690:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000844 	.word	0x20000844
 80026a0:	20000a88 	.word	0x20000a88

080026a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026b2:	e003      	b.n	80026bc <LoopCopyDataInit>

080026b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026ba:	3104      	adds	r1, #4

080026bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026bc:	480a      	ldr	r0, [pc, #40]	; (80026e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026c4:	d3f6      	bcc.n	80026b4 <CopyDataInit>
  ldr r2, =_sbss
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026c8:	e002      	b.n	80026d0 <LoopFillZerobss>

080026ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026cc:	f842 3b04 	str.w	r3, [r2], #4

080026d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026d0:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026d4:	d3f9      	bcc.n	80026ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026d6:	f7ff ffe5 	bl	80026a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026da:	f001 fb6b 	bl	8003db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026de:	f7ff f9db 	bl	8001a98 <main>
  bx lr
 80026e2:	4770      	bx	lr
  ldr r3, =_sidata
 80026e4:	080078d8 	.word	0x080078d8
  ldr r0, =_sdata
 80026e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026ec:	20000720 	.word	0x20000720
  ldr r2, =_sbss
 80026f0:	20000720 	.word	0x20000720
  ldr r3, = _ebss
 80026f4:	20000a88 	.word	0x20000a88

080026f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <ADC1_2_IRQHandler>
	...

080026fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_Init+0x28>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_Init+0x28>)
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270c:	2003      	movs	r0, #3
 800270e:	f000 f929 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002712:	2000      	movs	r0, #0
 8002714:	f000 f808 	bl	8002728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002718:	f7ff fe64 	bl	80023e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40022000 	.word	0x40022000

08002728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x54>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x58>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f000 f933 	bl	80029b2 <HAL_SYSTICK_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00e      	b.n	8002774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d80a      	bhi.n	8002772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275c:	2200      	movs	r2, #0
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002764:	f000 f909 	bl	800297a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_InitTick+0x5c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000540 	.word	0x20000540
 8002780:	20000548 	.word	0x20000548
 8002784:	20000544 	.word	0x20000544

08002788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_IncTick+0x1c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_IncTick+0x20>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_IncTick+0x20>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	20000548 	.word	0x20000548
 80027a8:	20000a80 	.word	0x20000a80

080027ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <HAL_GetTick+0x10>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	20000a80 	.word	0x20000a80

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff fff0 	bl	80027ac <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_Delay+0x40>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffe0 	bl	80027ac <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000548 	.word	0x20000548

08002804 <__NVIC_SetPriorityGrouping>:
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002820:	4013      	ands	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800282c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <__NVIC_SetPriorityGrouping+0x44>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	60d3      	str	r3, [r2, #12]
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_GetPriorityGrouping>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <__NVIC_GetPriorityGrouping+0x18>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	f003 0307 	and.w	r3, r3, #7
}
 800285a:	4618      	mov	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	e000ed00 	.word	0xe000ed00

08002868 <__NVIC_SetPriority>:
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <SysTick_Config>:
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002944:	f7ff ff90 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff49 	bl	8002804 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298c:	f7ff ff5e 	bl	800284c <__NVIC_GetPriorityGrouping>
 8002990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff90 	bl	80028bc <NVIC_EncodePriority>
 800299c:	4602      	mov	r2, r0
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff5f 	bl	8002868 <__NVIC_SetPriority>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffb0 	bl	8002920 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d6:	2300      	movs	r3, #0
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029de:	e127      	b.n	8002c30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029e0:	2201      	movs	r2, #1
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	f040 8116 	bne.w	8002c2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b12      	cmp	r3, #18
 8002a04:	d034      	beq.n	8002a70 <HAL_GPIO_Init+0xa4>
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d80d      	bhi.n	8002a26 <HAL_GPIO_Init+0x5a>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d02b      	beq.n	8002a66 <HAL_GPIO_Init+0x9a>
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d804      	bhi.n	8002a1c <HAL_GPIO_Init+0x50>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d031      	beq.n	8002a7a <HAL_GPIO_Init+0xae>
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d01c      	beq.n	8002a54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a1a:	e048      	b.n	8002aae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d043      	beq.n	8002aa8 <HAL_GPIO_Init+0xdc>
 8002a20:	2b11      	cmp	r3, #17
 8002a22:	d01b      	beq.n	8002a5c <HAL_GPIO_Init+0x90>
          break;
 8002a24:	e043      	b.n	8002aae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a26:	4a89      	ldr	r2, [pc, #548]	; (8002c4c <HAL_GPIO_Init+0x280>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d026      	beq.n	8002a7a <HAL_GPIO_Init+0xae>
 8002a2c:	4a87      	ldr	r2, [pc, #540]	; (8002c4c <HAL_GPIO_Init+0x280>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d806      	bhi.n	8002a40 <HAL_GPIO_Init+0x74>
 8002a32:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <HAL_GPIO_Init+0x284>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d020      	beq.n	8002a7a <HAL_GPIO_Init+0xae>
 8002a38:	4a86      	ldr	r2, [pc, #536]	; (8002c54 <HAL_GPIO_Init+0x288>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d01d      	beq.n	8002a7a <HAL_GPIO_Init+0xae>
          break;
 8002a3e:	e036      	b.n	8002aae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a40:	4a85      	ldr	r2, [pc, #532]	; (8002c58 <HAL_GPIO_Init+0x28c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d019      	beq.n	8002a7a <HAL_GPIO_Init+0xae>
 8002a46:	4a85      	ldr	r2, [pc, #532]	; (8002c5c <HAL_GPIO_Init+0x290>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d016      	beq.n	8002a7a <HAL_GPIO_Init+0xae>
 8002a4c:	4a84      	ldr	r2, [pc, #528]	; (8002c60 <HAL_GPIO_Init+0x294>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d013      	beq.n	8002a7a <HAL_GPIO_Init+0xae>
          break;
 8002a52:	e02c      	b.n	8002aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	623b      	str	r3, [r7, #32]
          break;
 8002a5a:	e028      	b.n	8002aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	3304      	adds	r3, #4
 8002a62:	623b      	str	r3, [r7, #32]
          break;
 8002a64:	e023      	b.n	8002aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	623b      	str	r3, [r7, #32]
          break;
 8002a6e:	e01e      	b.n	8002aae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	330c      	adds	r3, #12
 8002a76:	623b      	str	r3, [r7, #32]
          break;
 8002a78:	e019      	b.n	8002aae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a82:	2304      	movs	r3, #4
 8002a84:	623b      	str	r3, [r7, #32]
          break;
 8002a86:	e012      	b.n	8002aae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d105      	bne.n	8002a9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a90:	2308      	movs	r3, #8
 8002a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	611a      	str	r2, [r3, #16]
          break;
 8002a9a:	e008      	b.n	8002aae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	615a      	str	r2, [r3, #20]
          break;
 8002aa6:	e002      	b.n	8002aae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	623b      	str	r3, [r7, #32]
          break;
 8002aac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2bff      	cmp	r3, #255	; 0xff
 8002ab2:	d801      	bhi.n	8002ab8 <HAL_GPIO_Init+0xec>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	e001      	b.n	8002abc <HAL_GPIO_Init+0xf0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	2bff      	cmp	r3, #255	; 0xff
 8002ac2:	d802      	bhi.n	8002aca <HAL_GPIO_Init+0xfe>
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	e002      	b.n	8002ad0 <HAL_GPIO_Init+0x104>
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	3b08      	subs	r3, #8
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	6a39      	ldr	r1, [r7, #32]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	431a      	orrs	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8096 	beq.w	8002c2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002afe:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_GPIO_Init+0x298>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_GPIO_Init+0x298>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <HAL_GPIO_Init+0x298>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b16:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <HAL_GPIO_Init+0x29c>)
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <HAL_GPIO_Init+0x2a0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x19e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <HAL_GPIO_Init+0x2a4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x19a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a49      	ldr	r2, [pc, #292]	; (8002c74 <HAL_GPIO_Init+0x2a8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x196>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a48      	ldr	r2, [pc, #288]	; (8002c78 <HAL_GPIO_Init+0x2ac>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x192>
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x1a0>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_Init+0x1a0>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e002      	b.n	8002b6c <HAL_GPIO_Init+0x1a0>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_GPIO_Init+0x1a0>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6e:	f002 0203 	and.w	r2, r2, #3
 8002b72:	0092      	lsls	r2, r2, #2
 8002b74:	4093      	lsls	r3, r2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b7c:	493a      	ldr	r1, [pc, #232]	; (8002c68 <HAL_GPIO_Init+0x29c>)
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b96:	4b39      	ldr	r3, [pc, #228]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4938      	ldr	r1, [pc, #224]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
 8002ba2:	e006      	b.n	8002bb2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ba4:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	4933      	ldr	r1, [pc, #204]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bbe:	4b2f      	ldr	r3, [pc, #188]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	492e      	ldr	r1, [pc, #184]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
 8002bca:	e006      	b.n	8002bda <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	4929      	ldr	r1, [pc, #164]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	4924      	ldr	r1, [pc, #144]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	491f      	ldr	r1, [pc, #124]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	491a      	ldr	r1, [pc, #104]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60cb      	str	r3, [r1, #12]
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4915      	ldr	r1, [pc, #84]	; (8002c7c <HAL_GPIO_Init+0x2b0>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f aed0 	bne.w	80029e0 <HAL_GPIO_Init+0x14>
  }
}
 8002c40:	bf00      	nop
 8002c42:	372c      	adds	r7, #44	; 0x2c
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	10210000 	.word	0x10210000
 8002c50:	10110000 	.word	0x10110000
 8002c54:	10120000 	.word	0x10120000
 8002c58:	10310000 	.word	0x10310000
 8002c5c:	10320000 	.word	0x10320000
 8002c60:	10220000 	.word	0x10220000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40010000 	.word	0x40010000
 8002c6c:	40010800 	.word	0x40010800
 8002c70:	40010c00 	.word	0x40010c00
 8002c74:	40011000 	.word	0x40011000
 8002c78:	40011400 	.word	0x40011400
 8002c7c:	40010400 	.word	0x40010400

08002c80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
 8002c9c:	e001      	b.n	8002ca2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	807b      	strh	r3, [r7, #2]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cbe:	787b      	ldrb	r3, [r7, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc4:	887a      	ldrh	r2, [r7, #2]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cca:	e003      	b.n	8002cd4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	041a      	lsls	r2, r3, #16
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	611a      	str	r2, [r3, #16]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e26c      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8087 	beq.w	8002e0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d00:	4b92      	ldr	r3, [pc, #584]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d00c      	beq.n	8002d26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d0c:	4b8f      	ldr	r3, [pc, #572]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d112      	bne.n	8002d3e <HAL_RCC_OscConfig+0x5e>
 8002d18:	4b8c      	ldr	r3, [pc, #560]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	d10b      	bne.n	8002d3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	4b89      	ldr	r3, [pc, #548]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d06c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x12c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d168      	bne.n	8002e0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e246      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x76>
 8002d48:	4b80      	ldr	r3, [pc, #512]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a7f      	ldr	r2, [pc, #508]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e02e      	b.n	8002db4 <HAL_RCC_OscConfig+0xd4>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x98>
 8002d5e:	4b7b      	ldr	r3, [pc, #492]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7a      	ldr	r2, [pc, #488]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b78      	ldr	r3, [pc, #480]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a77      	ldr	r2, [pc, #476]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xd4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0xbc>
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a71      	ldr	r2, [pc, #452]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6e      	ldr	r2, [pc, #440]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xd4>
 8002d9c:	4b6b      	ldr	r3, [pc, #428]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b68      	ldr	r3, [pc, #416]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a67      	ldr	r2, [pc, #412]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fcf6 	bl	80027ac <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7ff fcf2 	bl	80027ac <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e1fa      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xe4>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff fce2 	bl	80027ac <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff fcde 	bl	80027ac <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1e6      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x10c>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d063      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x18c>
 8002e32:	4b46      	ldr	r3, [pc, #280]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x176>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1ba      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4939      	ldr	r1, [pc, #228]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7ff fc97 	bl	80027ac <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e82:	f7ff fc93 	bl	80027ac <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e19b      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b2a      	ldr	r3, [pc, #168]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4927      	ldr	r1, [pc, #156]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCC_OscConfig+0x270>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7ff fc76 	bl	80027ac <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7ff fc72 	bl	80027ac <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e17a      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d03a      	beq.n	8002f64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d019      	beq.n	8002f2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b17      	ldr	r3, [pc, #92]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efc:	f7ff fc56 	bl	80027ac <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f04:	f7ff fc52 	bl	80027ac <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e15a      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f000 faa8 	bl	8003478 <RCC_Delay>
 8002f28:	e01c      	b.n	8002f64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f30:	f7ff fc3c 	bl	80027ac <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f36:	e00f      	b.n	8002f58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f38:	f7ff fc38 	bl	80027ac <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d908      	bls.n	8002f58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e140      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	42420000 	.word	0x42420000
 8002f54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	4b9e      	ldr	r3, [pc, #632]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e9      	bne.n	8002f38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 80a6 	beq.w	80030be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f76:	4b97      	ldr	r3, [pc, #604]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10d      	bne.n	8002f9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	4b94      	ldr	r3, [pc, #592]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	4a93      	ldr	r2, [pc, #588]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	61d3      	str	r3, [r2, #28]
 8002f8e:	4b91      	ldr	r3, [pc, #580]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9e:	4b8e      	ldr	r3, [pc, #568]	; (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d118      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002faa:	4b8b      	ldr	r3, [pc, #556]	; (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a8a      	ldr	r2, [pc, #552]	; (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb6:	f7ff fbf9 	bl	80027ac <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbe:	f7ff fbf5 	bl	80027ac <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b64      	cmp	r3, #100	; 0x64
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e0fd      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	4b81      	ldr	r3, [pc, #516]	; (80031d8 <HAL_RCC_OscConfig+0x4f8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f0      	beq.n	8002fbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d106      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x312>
 8002fe4:	4b7b      	ldr	r3, [pc, #492]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	4a7a      	ldr	r2, [pc, #488]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6213      	str	r3, [r2, #32]
 8002ff0:	e02d      	b.n	800304e <HAL_RCC_OscConfig+0x36e>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10c      	bne.n	8003014 <HAL_RCC_OscConfig+0x334>
 8002ffa:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a75      	ldr	r2, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	4b73      	ldr	r3, [pc, #460]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a72      	ldr	r2, [pc, #456]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	e01c      	b.n	800304e <HAL_RCC_OscConfig+0x36e>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b05      	cmp	r3, #5
 800301a:	d10c      	bne.n	8003036 <HAL_RCC_OscConfig+0x356>
 800301c:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a6c      	ldr	r2, [pc, #432]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a69      	ldr	r2, [pc, #420]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	e00b      	b.n	800304e <HAL_RCC_OscConfig+0x36e>
 8003036:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a66      	ldr	r2, [pc, #408]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6213      	str	r3, [r2, #32]
 8003042:	4b64      	ldr	r3, [pc, #400]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a63      	ldr	r2, [pc, #396]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d015      	beq.n	8003082 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7ff fba9 	bl	80027ac <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305e:	f7ff fba5 	bl	80027ac <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	f241 3288 	movw	r2, #5000	; 0x1388
 800306c:	4293      	cmp	r3, r2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0ab      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003074:	4b57      	ldr	r3, [pc, #348]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ee      	beq.n	800305e <HAL_RCC_OscConfig+0x37e>
 8003080:	e014      	b.n	80030ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7ff fb93 	bl	80027ac <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7ff fb8f 	bl	80027ac <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e095      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a0:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ee      	bne.n	800308a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ac:	7dfb      	ldrb	r3, [r7, #23]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d105      	bne.n	80030be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b2:	4b48      	ldr	r3, [pc, #288]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8081 	beq.w	80031ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c8:	4b42      	ldr	r3, [pc, #264]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d061      	beq.n	8003198 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69db      	ldr	r3, [r3, #28]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d146      	bne.n	800316a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_OscConfig+0x4fc>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7ff fb63 	bl	80027ac <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ea:	f7ff fb5f 	bl	80027ac <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e067      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fc:	4b35      	ldr	r3, [pc, #212]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d108      	bne.n	8003124 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003112:	4b30      	ldr	r3, [pc, #192]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	492d      	ldr	r1, [pc, #180]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003124:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a19      	ldr	r1, [r3, #32]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003134:	430b      	orrs	r3, r1
 8003136:	4927      	ldr	r1, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x4fc>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7ff fb33 	bl	80027ac <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314a:	f7ff fb2f 	bl	80027ac <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e037      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x46a>
 8003168:	e02f      	b.n	80031ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_RCC_OscConfig+0x4fc>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7ff fb1c 	bl	80027ac <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003178:	f7ff fb18 	bl	80027ac <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e020      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318a:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x498>
 8003196:	e018      	b.n	80031ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e013      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <HAL_RCC_OscConfig+0x4f4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
 80031dc:	42420060 	.word	0x42420060

080031e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0d0      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b6a      	ldr	r3, [pc, #424]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d910      	bls.n	8003224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4965      	ldr	r1, [pc, #404]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0b8      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d020      	beq.n	8003272 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800323c:	4b59      	ldr	r3, [pc, #356]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a58      	ldr	r2, [pc, #352]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003246:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800325e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003260:	4b50      	ldr	r3, [pc, #320]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	494d      	ldr	r1, [pc, #308]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d040      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b47      	ldr	r3, [pc, #284]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d115      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e07f      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e073      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3d      	ldr	r3, [pc, #244]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06b      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4936      	ldr	r1, [pc, #216]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7ff fa6c 	bl	80027ac <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7ff fa68 	bl	80027ac <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e053      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d210      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b24      	ldr	r3, [pc, #144]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	4922      	ldr	r1, [pc, #136]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e032      	b.n	8003396 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4916      	ldr	r1, [pc, #88]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d009      	beq.n	800336e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800335a:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	490e      	ldr	r1, [pc, #56]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800336e:	f000 f821 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8003372:	4601      	mov	r1, r0
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	fa21 f303 	lsr.w	r3, r1, r3
 8003386:	4a09      	ldr	r2, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1cc>)
 8003388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1d0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff f9ca 	bl	8002728 <HAL_InitTick>

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	080075b4 	.word	0x080075b4
 80033ac:	20000540 	.word	0x20000540
 80033b0:	20000544 	.word	0x20000544

080033b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b490      	push	{r4, r7}
 80033b6:	b08a      	sub	sp, #40	; 0x28
 80033b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033bc:	1d3c      	adds	r4, r7, #4
 80033be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033c4:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x40>
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x46>
 80033f2:	e02d      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f4:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033f6:	623b      	str	r3, [r7, #32]
      break;
 80033f8:	e02d      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	0c9b      	lsrs	r3, r3, #18
 80033fe:	f003 030f 	and.w	r3, r3, #15
 8003402:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003406:	4413      	add	r3, r2
 8003408:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800340c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d013      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_RCC_GetSysClockFreq+0xb8>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0c5b      	lsrs	r3, r3, #17
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003426:	4413      	add	r3, r2
 8003428:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800342c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	4a0f      	ldr	r2, [pc, #60]	; (8003470 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003432:	fb02 f203 	mul.w	r2, r2, r3
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
 800343e:	e004      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4a0c      	ldr	r2, [pc, #48]	; (8003474 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003444:	fb02 f303 	mul.w	r3, r2, r3
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	623b      	str	r3, [r7, #32]
      break;
 800344e:	e002      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003452:	623b      	str	r3, [r7, #32]
      break;
 8003454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003456:	6a3b      	ldr	r3, [r7, #32]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3728      	adds	r7, #40	; 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bc90      	pop	{r4, r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	080075a0 	.word	0x080075a0
 8003468:	080075b0 	.word	0x080075b0
 800346c:	40021000 	.word	0x40021000
 8003470:	007a1200 	.word	0x007a1200
 8003474:	003d0900 	.word	0x003d0900

08003478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <RCC_Delay+0x34>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <RCC_Delay+0x38>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	0a5b      	lsrs	r3, r3, #9
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	fb02 f303 	mul.w	r3, r2, r3
 8003492:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003494:	bf00      	nop
  }
  while (Delay --);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	60fa      	str	r2, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f9      	bne.n	8003494 <RCC_Delay+0x1c>
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	20000540 	.word	0x20000540
 80034b0:	10624dd3 	.word	0x10624dd3

080034b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e076      	b.n	80035b4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d108      	bne.n	80034e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034d6:	d009      	beq.n	80034ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
 80034de:	e005      	b.n	80034ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fe ff9e 	bl	8002448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003522:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003570:	ea42 0103 	orr.w	r1, r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	0c1a      	lsrs	r2, r3, #16
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f002 0204 	and.w	r2, r2, #4
 8003592:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69da      	ldr	r2, [r3, #28]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	4613      	mov	r3, r2
 80035ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_SPI_Transmit+0x22>
 80035da:	2302      	movs	r3, #2
 80035dc:	e126      	b.n	800382c <HAL_SPI_Transmit+0x270>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035e6:	f7ff f8e1 	bl	80027ac <HAL_GetTick>
 80035ea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d002      	beq.n	8003602 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
 80035fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003600:	e10b      	b.n	800381a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <HAL_SPI_Transmit+0x52>
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003612:	e102      	b.n	800381a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2203      	movs	r2, #3
 8003618:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365a:	d10f      	bne.n	800367c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b40      	cmp	r3, #64	; 0x40
 8003688:	d007      	beq.n	800369a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003698:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d14b      	bne.n	800373c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_SPI_Transmit+0xf6>
 80036ac:	8afb      	ldrh	r3, [r7, #22]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d13e      	bne.n	8003730 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	881a      	ldrh	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	1c9a      	adds	r2, r3, #2
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036d6:	e02b      	b.n	8003730 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d112      	bne.n	800370c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	1c9a      	adds	r2, r3, #2
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	86da      	strh	r2, [r3, #54]	; 0x36
 800370a:	e011      	b.n	8003730 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800370c:	f7ff f84e 	bl	80027ac <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d803      	bhi.n	8003724 <HAL_SPI_Transmit+0x168>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003722:	d102      	bne.n	800372a <HAL_SPI_Transmit+0x16e>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800372e:	e074      	b.n	800381a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ce      	bne.n	80036d8 <HAL_SPI_Transmit+0x11c>
 800373a:	e04c      	b.n	80037d6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d002      	beq.n	800374a <HAL_SPI_Transmit+0x18e>
 8003744:	8afb      	ldrh	r3, [r7, #22]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d140      	bne.n	80037cc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003770:	e02c      	b.n	80037cc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b02      	cmp	r3, #2
 800377e:	d113      	bne.n	80037a8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	7812      	ldrb	r2, [r2, #0]
 800378c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80037a6:	e011      	b.n	80037cc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a8:	f7ff f800 	bl	80027ac <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d803      	bhi.n	80037c0 <HAL_SPI_Transmit+0x204>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037be:	d102      	bne.n	80037c6 <HAL_SPI_Transmit+0x20a>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037ca:	e026      	b.n	800381a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1cd      	bne.n	8003772 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	6839      	ldr	r1, [r7, #0]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f8b2 	bl	8003944 <SPI_EndRxTxTransaction>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037f4:	2300      	movs	r3, #0
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e000      	b.n	800381a <HAL_SPI_Transmit+0x25e>
  }

error:
 8003818:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800382a:	7ffb      	ldrb	r3, [r7, #31]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003844:	f7fe ffb2 	bl	80027ac <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	4413      	add	r3, r2
 8003852:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003854:	f7fe ffaa 	bl	80027ac <HAL_GetTick>
 8003858:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800385a:	4b39      	ldr	r3, [pc, #228]	; (8003940 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	015b      	lsls	r3, r3, #5
 8003860:	0d1b      	lsrs	r3, r3, #20
 8003862:	69fa      	ldr	r2, [r7, #28]
 8003864:	fb02 f303 	mul.w	r3, r2, r3
 8003868:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800386a:	e054      	b.n	8003916 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003872:	d050      	beq.n	8003916 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003874:	f7fe ff9a 	bl	80027ac <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	d902      	bls.n	800388a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d13d      	bne.n	8003906 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a2:	d111      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ac:	d004      	beq.n	80038b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d107      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d10f      	bne.n	80038f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e017      	b.n	8003936 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	3b01      	subs	r3, #1
 8003914:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4013      	ands	r3, r2
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	bf0c      	ite	eq
 8003926:	2301      	moveq	r3, #1
 8003928:	2300      	movne	r3, #0
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	429a      	cmp	r2, r3
 8003932:	d19b      	bne.n	800386c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3720      	adds	r7, #32
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000540 	.word	0x20000540

08003944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff ff6a 	bl	8003834 <SPI_WaitFlagStateUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e000      	b.n	8003978 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e093      	b.n	8003abc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fe fd97 	bl	80024dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c4:	f023 0307 	bic.w	r3, r3, #7
 80039c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f000 f903 	bl	8003be0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	4313      	orrs	r3, r2
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003a20:	f023 030c 	bic.w	r3, r3, #12
 8003a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	011a      	lsls	r2, r3, #4
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	031b      	lsls	r3, r3, #12
 8003a50:	4313      	orrs	r3, r2
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003adc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ae4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003aec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d110      	bne.n	8003b16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003afa:	7b7b      	ldrb	r3, [r7, #13]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d001      	beq.n	8003b04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e068      	b.n	8003bd6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b14:	e031      	b.n	8003b7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b04      	cmp	r3, #4
 8003b1a:	d110      	bne.n	8003b3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b22:	7b3b      	ldrb	r3, [r7, #12]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d001      	beq.n	8003b2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e054      	b.n	8003bd6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b3c:	e01d      	b.n	8003b7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d108      	bne.n	8003b56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b44:	7bbb      	ldrb	r3, [r7, #14]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b4a:	7b7b      	ldrb	r3, [r7, #13]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b50:	7b3b      	ldrb	r3, [r7, #12]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e03d      	b.n	8003bd6 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2202      	movs	r2, #2
 8003b76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_TIM_Encoder_Start+0xc2>
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d008      	beq.n	8003b96 <HAL_TIM_Encoder_Start+0xd2>
 8003b84:	e00f      	b.n	8003ba6 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f888 	bl	8003ca4 <TIM_CCxChannelCmd>
      break;
 8003b94:	e016      	b.n	8003bc4 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 f880 	bl	8003ca4 <TIM_CCxChannelCmd>
      break;
 8003ba4:	e00e      	b.n	8003bc4 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	2100      	movs	r1, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 f878 	bl	8003ca4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	2104      	movs	r1, #4
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f871 	bl	8003ca4 <TIM_CCxChannelCmd>
      break;
 8003bc2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a29      	ldr	r2, [pc, #164]	; (8003c98 <TIM_Base_SetConfig+0xb8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <TIM_Base_SetConfig+0x30>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0x30>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a26      	ldr	r2, [pc, #152]	; (8003c9c <TIM_Base_SetConfig+0xbc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0x30>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <TIM_Base_SetConfig+0xc0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <TIM_Base_SetConfig+0xb8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_Base_SetConfig+0x62>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c30:	d007      	beq.n	8003c42 <TIM_Base_SetConfig+0x62>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <TIM_Base_SetConfig+0xbc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_Base_SetConfig+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a18      	ldr	r2, [pc, #96]	; (8003ca0 <TIM_Base_SetConfig+0xc0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d108      	bne.n	8003c54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <TIM_Base_SetConfig+0xb8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691a      	ldr	r2, [r3, #16]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	615a      	str	r2, [r3, #20]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bc80      	pop	{r7}
 8003c96:	4770      	bx	lr
 8003c98:	40012c00 	.word	0x40012c00
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40000800 	.word	0x40000800

08003ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 031f 	and.w	r3, r3, #31
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a1a      	ldr	r2, [r3, #32]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e046      	b.n	8003d92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00e      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d009      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a12      	ldr	r2, [pc, #72]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10c      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	40012c00 	.word	0x40012c00
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800

08003da8 <__errno>:
 8003da8:	4b01      	ldr	r3, [pc, #4]	; (8003db0 <__errno+0x8>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	2000054c 	.word	0x2000054c

08003db4 <__libc_init_array>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	2500      	movs	r5, #0
 8003db8:	4e0c      	ldr	r6, [pc, #48]	; (8003dec <__libc_init_array+0x38>)
 8003dba:	4c0d      	ldr	r4, [pc, #52]	; (8003df0 <__libc_init_array+0x3c>)
 8003dbc:	1ba4      	subs	r4, r4, r6
 8003dbe:	10a4      	asrs	r4, r4, #2
 8003dc0:	42a5      	cmp	r5, r4
 8003dc2:	d109      	bne.n	8003dd8 <__libc_init_array+0x24>
 8003dc4:	f003 fbd4 	bl	8007570 <_init>
 8003dc8:	2500      	movs	r5, #0
 8003dca:	4e0a      	ldr	r6, [pc, #40]	; (8003df4 <__libc_init_array+0x40>)
 8003dcc:	4c0a      	ldr	r4, [pc, #40]	; (8003df8 <__libc_init_array+0x44>)
 8003dce:	1ba4      	subs	r4, r4, r6
 8003dd0:	10a4      	asrs	r4, r4, #2
 8003dd2:	42a5      	cmp	r5, r4
 8003dd4:	d105      	bne.n	8003de2 <__libc_init_array+0x2e>
 8003dd6:	bd70      	pop	{r4, r5, r6, pc}
 8003dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ddc:	4798      	blx	r3
 8003dde:	3501      	adds	r5, #1
 8003de0:	e7ee      	b.n	8003dc0 <__libc_init_array+0xc>
 8003de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de6:	4798      	blx	r3
 8003de8:	3501      	adds	r5, #1
 8003dea:	e7f2      	b.n	8003dd2 <__libc_init_array+0x1e>
 8003dec:	080078d0 	.word	0x080078d0
 8003df0:	080078d0 	.word	0x080078d0
 8003df4:	080078d0 	.word	0x080078d0
 8003df8:	080078d4 	.word	0x080078d4

08003dfc <malloc>:
 8003dfc:	4b02      	ldr	r3, [pc, #8]	; (8003e08 <malloc+0xc>)
 8003dfe:	4601      	mov	r1, r0
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	f000 b857 	b.w	8003eb4 <_malloc_r>
 8003e06:	bf00      	nop
 8003e08:	2000054c 	.word	0x2000054c

08003e0c <memset>:
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4402      	add	r2, r0
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d100      	bne.n	8003e16 <memset+0xa>
 8003e14:	4770      	bx	lr
 8003e16:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1a:	e7f9      	b.n	8003e10 <memset+0x4>

08003e1c <_free_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4605      	mov	r5, r0
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d043      	beq.n	8003eac <_free_r+0x90>
 8003e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e28:	1f0c      	subs	r4, r1, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfb8      	it	lt
 8003e2e:	18e4      	addlt	r4, r4, r3
 8003e30:	f001 fe7f 	bl	8005b32 <__malloc_lock>
 8003e34:	4a1e      	ldr	r2, [pc, #120]	; (8003eb0 <_free_r+0x94>)
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	4610      	mov	r0, r2
 8003e3a:	b933      	cbnz	r3, 8003e4a <_free_r+0x2e>
 8003e3c:	6063      	str	r3, [r4, #4]
 8003e3e:	6014      	str	r4, [r2, #0]
 8003e40:	4628      	mov	r0, r5
 8003e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e46:	f001 be75 	b.w	8005b34 <__malloc_unlock>
 8003e4a:	42a3      	cmp	r3, r4
 8003e4c:	d90b      	bls.n	8003e66 <_free_r+0x4a>
 8003e4e:	6821      	ldr	r1, [r4, #0]
 8003e50:	1862      	adds	r2, r4, r1
 8003e52:	4293      	cmp	r3, r2
 8003e54:	bf01      	itttt	eq
 8003e56:	681a      	ldreq	r2, [r3, #0]
 8003e58:	685b      	ldreq	r3, [r3, #4]
 8003e5a:	1852      	addeq	r2, r2, r1
 8003e5c:	6022      	streq	r2, [r4, #0]
 8003e5e:	6063      	str	r3, [r4, #4]
 8003e60:	6004      	str	r4, [r0, #0]
 8003e62:	e7ed      	b.n	8003e40 <_free_r+0x24>
 8003e64:	4613      	mov	r3, r2
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	b10a      	cbz	r2, 8003e6e <_free_r+0x52>
 8003e6a:	42a2      	cmp	r2, r4
 8003e6c:	d9fa      	bls.n	8003e64 <_free_r+0x48>
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	1858      	adds	r0, r3, r1
 8003e72:	42a0      	cmp	r0, r4
 8003e74:	d10b      	bne.n	8003e8e <_free_r+0x72>
 8003e76:	6820      	ldr	r0, [r4, #0]
 8003e78:	4401      	add	r1, r0
 8003e7a:	1858      	adds	r0, r3, r1
 8003e7c:	4282      	cmp	r2, r0
 8003e7e:	6019      	str	r1, [r3, #0]
 8003e80:	d1de      	bne.n	8003e40 <_free_r+0x24>
 8003e82:	6810      	ldr	r0, [r2, #0]
 8003e84:	6852      	ldr	r2, [r2, #4]
 8003e86:	4401      	add	r1, r0
 8003e88:	6019      	str	r1, [r3, #0]
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	e7d8      	b.n	8003e40 <_free_r+0x24>
 8003e8e:	d902      	bls.n	8003e96 <_free_r+0x7a>
 8003e90:	230c      	movs	r3, #12
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	e7d4      	b.n	8003e40 <_free_r+0x24>
 8003e96:	6820      	ldr	r0, [r4, #0]
 8003e98:	1821      	adds	r1, r4, r0
 8003e9a:	428a      	cmp	r2, r1
 8003e9c:	bf01      	itttt	eq
 8003e9e:	6811      	ldreq	r1, [r2, #0]
 8003ea0:	6852      	ldreq	r2, [r2, #4]
 8003ea2:	1809      	addeq	r1, r1, r0
 8003ea4:	6021      	streq	r1, [r4, #0]
 8003ea6:	6062      	str	r2, [r4, #4]
 8003ea8:	605c      	str	r4, [r3, #4]
 8003eaa:	e7c9      	b.n	8003e40 <_free_r+0x24>
 8003eac:	bd38      	pop	{r3, r4, r5, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000848 	.word	0x20000848

08003eb4 <_malloc_r>:
 8003eb4:	b570      	push	{r4, r5, r6, lr}
 8003eb6:	1ccd      	adds	r5, r1, #3
 8003eb8:	f025 0503 	bic.w	r5, r5, #3
 8003ebc:	3508      	adds	r5, #8
 8003ebe:	2d0c      	cmp	r5, #12
 8003ec0:	bf38      	it	cc
 8003ec2:	250c      	movcc	r5, #12
 8003ec4:	2d00      	cmp	r5, #0
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	db01      	blt.n	8003ece <_malloc_r+0x1a>
 8003eca:	42a9      	cmp	r1, r5
 8003ecc:	d903      	bls.n	8003ed6 <_malloc_r+0x22>
 8003ece:	230c      	movs	r3, #12
 8003ed0:	6033      	str	r3, [r6, #0]
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	bd70      	pop	{r4, r5, r6, pc}
 8003ed6:	f001 fe2c 	bl	8005b32 <__malloc_lock>
 8003eda:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <_malloc_r+0xac>)
 8003edc:	6814      	ldr	r4, [r2, #0]
 8003ede:	4621      	mov	r1, r4
 8003ee0:	b991      	cbnz	r1, 8003f08 <_malloc_r+0x54>
 8003ee2:	4c20      	ldr	r4, [pc, #128]	; (8003f64 <_malloc_r+0xb0>)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	b91b      	cbnz	r3, 8003ef0 <_malloc_r+0x3c>
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f000 fd09 	bl	8004900 <_sbrk_r>
 8003eee:	6020      	str	r0, [r4, #0]
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f000 fd04 	bl	8004900 <_sbrk_r>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	d124      	bne.n	8003f46 <_malloc_r+0x92>
 8003efc:	230c      	movs	r3, #12
 8003efe:	4630      	mov	r0, r6
 8003f00:	6033      	str	r3, [r6, #0]
 8003f02:	f001 fe17 	bl	8005b34 <__malloc_unlock>
 8003f06:	e7e4      	b.n	8003ed2 <_malloc_r+0x1e>
 8003f08:	680b      	ldr	r3, [r1, #0]
 8003f0a:	1b5b      	subs	r3, r3, r5
 8003f0c:	d418      	bmi.n	8003f40 <_malloc_r+0x8c>
 8003f0e:	2b0b      	cmp	r3, #11
 8003f10:	d90f      	bls.n	8003f32 <_malloc_r+0x7e>
 8003f12:	600b      	str	r3, [r1, #0]
 8003f14:	18cc      	adds	r4, r1, r3
 8003f16:	50cd      	str	r5, [r1, r3]
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f001 fe0b 	bl	8005b34 <__malloc_unlock>
 8003f1e:	f104 000b 	add.w	r0, r4, #11
 8003f22:	1d23      	adds	r3, r4, #4
 8003f24:	f020 0007 	bic.w	r0, r0, #7
 8003f28:	1ac3      	subs	r3, r0, r3
 8003f2a:	d0d3      	beq.n	8003ed4 <_malloc_r+0x20>
 8003f2c:	425a      	negs	r2, r3
 8003f2e:	50e2      	str	r2, [r4, r3]
 8003f30:	e7d0      	b.n	8003ed4 <_malloc_r+0x20>
 8003f32:	684b      	ldr	r3, [r1, #4]
 8003f34:	428c      	cmp	r4, r1
 8003f36:	bf16      	itet	ne
 8003f38:	6063      	strne	r3, [r4, #4]
 8003f3a:	6013      	streq	r3, [r2, #0]
 8003f3c:	460c      	movne	r4, r1
 8003f3e:	e7eb      	b.n	8003f18 <_malloc_r+0x64>
 8003f40:	460c      	mov	r4, r1
 8003f42:	6849      	ldr	r1, [r1, #4]
 8003f44:	e7cc      	b.n	8003ee0 <_malloc_r+0x2c>
 8003f46:	1cc4      	adds	r4, r0, #3
 8003f48:	f024 0403 	bic.w	r4, r4, #3
 8003f4c:	42a0      	cmp	r0, r4
 8003f4e:	d005      	beq.n	8003f5c <_malloc_r+0xa8>
 8003f50:	1a21      	subs	r1, r4, r0
 8003f52:	4630      	mov	r0, r6
 8003f54:	f000 fcd4 	bl	8004900 <_sbrk_r>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d0cf      	beq.n	8003efc <_malloc_r+0x48>
 8003f5c:	6025      	str	r5, [r4, #0]
 8003f5e:	e7db      	b.n	8003f18 <_malloc_r+0x64>
 8003f60:	20000848 	.word	0x20000848
 8003f64:	2000084c 	.word	0x2000084c

08003f68 <__cvt>:
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f6e:	461e      	mov	r6, r3
 8003f70:	bfbb      	ittet	lt
 8003f72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003f76:	461e      	movlt	r6, r3
 8003f78:	2300      	movge	r3, #0
 8003f7a:	232d      	movlt	r3, #45	; 0x2d
 8003f7c:	b088      	sub	sp, #32
 8003f7e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003f80:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003f84:	f027 0720 	bic.w	r7, r7, #32
 8003f88:	2f46      	cmp	r7, #70	; 0x46
 8003f8a:	4614      	mov	r4, r2
 8003f8c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003f8e:	700b      	strb	r3, [r1, #0]
 8003f90:	d004      	beq.n	8003f9c <__cvt+0x34>
 8003f92:	2f45      	cmp	r7, #69	; 0x45
 8003f94:	d100      	bne.n	8003f98 <__cvt+0x30>
 8003f96:	3501      	adds	r5, #1
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e000      	b.n	8003f9e <__cvt+0x36>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	aa07      	add	r2, sp, #28
 8003fa0:	9204      	str	r2, [sp, #16]
 8003fa2:	aa06      	add	r2, sp, #24
 8003fa4:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003fa8:	e9cd 3500 	strd	r3, r5, [sp]
 8003fac:	4622      	mov	r2, r4
 8003fae:	4633      	mov	r3, r6
 8003fb0:	f000 fe06 	bl	8004bc0 <_dtoa_r>
 8003fb4:	2f47      	cmp	r7, #71	; 0x47
 8003fb6:	4680      	mov	r8, r0
 8003fb8:	d102      	bne.n	8003fc0 <__cvt+0x58>
 8003fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fbc:	07db      	lsls	r3, r3, #31
 8003fbe:	d526      	bpl.n	800400e <__cvt+0xa6>
 8003fc0:	2f46      	cmp	r7, #70	; 0x46
 8003fc2:	eb08 0905 	add.w	r9, r8, r5
 8003fc6:	d111      	bne.n	8003fec <__cvt+0x84>
 8003fc8:	f898 3000 	ldrb.w	r3, [r8]
 8003fcc:	2b30      	cmp	r3, #48	; 0x30
 8003fce:	d10a      	bne.n	8003fe6 <__cvt+0x7e>
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	f7fc fce6 	bl	80009a8 <__aeabi_dcmpeq>
 8003fdc:	b918      	cbnz	r0, 8003fe6 <__cvt+0x7e>
 8003fde:	f1c5 0501 	rsb	r5, r5, #1
 8003fe2:	f8ca 5000 	str.w	r5, [sl]
 8003fe6:	f8da 3000 	ldr.w	r3, [sl]
 8003fea:	4499      	add	r9, r3
 8003fec:	2200      	movs	r2, #0
 8003fee:	2300      	movs	r3, #0
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	4631      	mov	r1, r6
 8003ff4:	f7fc fcd8 	bl	80009a8 <__aeabi_dcmpeq>
 8003ff8:	b938      	cbnz	r0, 800400a <__cvt+0xa2>
 8003ffa:	2230      	movs	r2, #48	; 0x30
 8003ffc:	9b07      	ldr	r3, [sp, #28]
 8003ffe:	454b      	cmp	r3, r9
 8004000:	d205      	bcs.n	800400e <__cvt+0xa6>
 8004002:	1c59      	adds	r1, r3, #1
 8004004:	9107      	str	r1, [sp, #28]
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	e7f8      	b.n	8003ffc <__cvt+0x94>
 800400a:	f8cd 901c 	str.w	r9, [sp, #28]
 800400e:	4640      	mov	r0, r8
 8004010:	9b07      	ldr	r3, [sp, #28]
 8004012:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004014:	eba3 0308 	sub.w	r3, r3, r8
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	b008      	add	sp, #32
 800401c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004020 <__exponent>:
 8004020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004022:	2900      	cmp	r1, #0
 8004024:	bfb4      	ite	lt
 8004026:	232d      	movlt	r3, #45	; 0x2d
 8004028:	232b      	movge	r3, #43	; 0x2b
 800402a:	4604      	mov	r4, r0
 800402c:	bfb8      	it	lt
 800402e:	4249      	neglt	r1, r1
 8004030:	2909      	cmp	r1, #9
 8004032:	f804 2b02 	strb.w	r2, [r4], #2
 8004036:	7043      	strb	r3, [r0, #1]
 8004038:	dd21      	ble.n	800407e <__exponent+0x5e>
 800403a:	f10d 0307 	add.w	r3, sp, #7
 800403e:	461f      	mov	r7, r3
 8004040:	260a      	movs	r6, #10
 8004042:	fb91 f5f6 	sdiv	r5, r1, r6
 8004046:	fb06 1115 	mls	r1, r6, r5, r1
 800404a:	2d09      	cmp	r5, #9
 800404c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004050:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004054:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004058:	4629      	mov	r1, r5
 800405a:	dc09      	bgt.n	8004070 <__exponent+0x50>
 800405c:	3130      	adds	r1, #48	; 0x30
 800405e:	3b02      	subs	r3, #2
 8004060:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004064:	42bb      	cmp	r3, r7
 8004066:	4622      	mov	r2, r4
 8004068:	d304      	bcc.n	8004074 <__exponent+0x54>
 800406a:	1a10      	subs	r0, r2, r0
 800406c:	b003      	add	sp, #12
 800406e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004070:	4613      	mov	r3, r2
 8004072:	e7e6      	b.n	8004042 <__exponent+0x22>
 8004074:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004078:	f804 2b01 	strb.w	r2, [r4], #1
 800407c:	e7f2      	b.n	8004064 <__exponent+0x44>
 800407e:	2330      	movs	r3, #48	; 0x30
 8004080:	4419      	add	r1, r3
 8004082:	7083      	strb	r3, [r0, #2]
 8004084:	1d02      	adds	r2, r0, #4
 8004086:	70c1      	strb	r1, [r0, #3]
 8004088:	e7ef      	b.n	800406a <__exponent+0x4a>
	...

0800408c <_printf_float>:
 800408c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	b091      	sub	sp, #68	; 0x44
 8004092:	460c      	mov	r4, r1
 8004094:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004096:	4693      	mov	fp, r2
 8004098:	461e      	mov	r6, r3
 800409a:	4605      	mov	r5, r0
 800409c:	f001 fcbe 	bl	8005a1c <_localeconv_r>
 80040a0:	6803      	ldr	r3, [r0, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	9309      	str	r3, [sp, #36]	; 0x24
 80040a6:	f7fc f853 	bl	8000150 <strlen>
 80040aa:	2300      	movs	r3, #0
 80040ac:	930e      	str	r3, [sp, #56]	; 0x38
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	900a      	str	r0, [sp, #40]	; 0x28
 80040b2:	3307      	adds	r3, #7
 80040b4:	f023 0307 	bic.w	r3, r3, #7
 80040b8:	f103 0208 	add.w	r2, r3, #8
 80040bc:	f894 8018 	ldrb.w	r8, [r4, #24]
 80040c0:	f8d4 a000 	ldr.w	sl, [r4]
 80040c4:	603a      	str	r2, [r7, #0]
 80040c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80040ce:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80040d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040dc:	4ba6      	ldr	r3, [pc, #664]	; (8004378 <_printf_float+0x2ec>)
 80040de:	4638      	mov	r0, r7
 80040e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040e2:	f7fc fc93 	bl	8000a0c <__aeabi_dcmpun>
 80040e6:	bb68      	cbnz	r0, 8004144 <_printf_float+0xb8>
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040ec:	4ba2      	ldr	r3, [pc, #648]	; (8004378 <_printf_float+0x2ec>)
 80040ee:	4638      	mov	r0, r7
 80040f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040f2:	f7fc fc6d 	bl	80009d0 <__aeabi_dcmple>
 80040f6:	bb28      	cbnz	r0, 8004144 <_printf_float+0xb8>
 80040f8:	2200      	movs	r2, #0
 80040fa:	2300      	movs	r3, #0
 80040fc:	4638      	mov	r0, r7
 80040fe:	4649      	mov	r1, r9
 8004100:	f7fc fc5c 	bl	80009bc <__aeabi_dcmplt>
 8004104:	b110      	cbz	r0, 800410c <_printf_float+0x80>
 8004106:	232d      	movs	r3, #45	; 0x2d
 8004108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410c:	4f9b      	ldr	r7, [pc, #620]	; (800437c <_printf_float+0x2f0>)
 800410e:	4b9c      	ldr	r3, [pc, #624]	; (8004380 <_printf_float+0x2f4>)
 8004110:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004114:	bf98      	it	ls
 8004116:	461f      	movls	r7, r3
 8004118:	2303      	movs	r3, #3
 800411a:	f04f 0900 	mov.w	r9, #0
 800411e:	6123      	str	r3, [r4, #16]
 8004120:	f02a 0304 	bic.w	r3, sl, #4
 8004124:	6023      	str	r3, [r4, #0]
 8004126:	9600      	str	r6, [sp, #0]
 8004128:	465b      	mov	r3, fp
 800412a:	aa0f      	add	r2, sp, #60	; 0x3c
 800412c:	4621      	mov	r1, r4
 800412e:	4628      	mov	r0, r5
 8004130:	f000 f9e2 	bl	80044f8 <_printf_common>
 8004134:	3001      	adds	r0, #1
 8004136:	f040 8090 	bne.w	800425a <_printf_float+0x1ce>
 800413a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800413e:	b011      	add	sp, #68	; 0x44
 8004140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004144:	463a      	mov	r2, r7
 8004146:	464b      	mov	r3, r9
 8004148:	4638      	mov	r0, r7
 800414a:	4649      	mov	r1, r9
 800414c:	f7fc fc5e 	bl	8000a0c <__aeabi_dcmpun>
 8004150:	b110      	cbz	r0, 8004158 <_printf_float+0xcc>
 8004152:	4f8c      	ldr	r7, [pc, #560]	; (8004384 <_printf_float+0x2f8>)
 8004154:	4b8c      	ldr	r3, [pc, #560]	; (8004388 <_printf_float+0x2fc>)
 8004156:	e7db      	b.n	8004110 <_printf_float+0x84>
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	a80d      	add	r0, sp, #52	; 0x34
 8004162:	a90e      	add	r1, sp, #56	; 0x38
 8004164:	d140      	bne.n	80041e8 <_printf_float+0x15c>
 8004166:	2306      	movs	r3, #6
 8004168:	6063      	str	r3, [r4, #4]
 800416a:	f04f 0c00 	mov.w	ip, #0
 800416e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004172:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8004176:	6863      	ldr	r3, [r4, #4]
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	463a      	mov	r2, r7
 8004182:	464b      	mov	r3, r9
 8004184:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004188:	4628      	mov	r0, r5
 800418a:	f7ff feed 	bl	8003f68 <__cvt>
 800418e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004192:	2b47      	cmp	r3, #71	; 0x47
 8004194:	4607      	mov	r7, r0
 8004196:	d109      	bne.n	80041ac <_printf_float+0x120>
 8004198:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800419a:	1cd8      	adds	r0, r3, #3
 800419c:	db02      	blt.n	80041a4 <_printf_float+0x118>
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	4293      	cmp	r3, r2
 80041a2:	dd47      	ble.n	8004234 <_printf_float+0x1a8>
 80041a4:	f1a8 0802 	sub.w	r8, r8, #2
 80041a8:	fa5f f888 	uxtb.w	r8, r8
 80041ac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80041b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80041b2:	d824      	bhi.n	80041fe <_printf_float+0x172>
 80041b4:	3901      	subs	r1, #1
 80041b6:	4642      	mov	r2, r8
 80041b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80041bc:	910d      	str	r1, [sp, #52]	; 0x34
 80041be:	f7ff ff2f 	bl	8004020 <__exponent>
 80041c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041c4:	4681      	mov	r9, r0
 80041c6:	1813      	adds	r3, r2, r0
 80041c8:	2a01      	cmp	r2, #1
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	dc02      	bgt.n	80041d4 <_printf_float+0x148>
 80041ce:	6822      	ldr	r2, [r4, #0]
 80041d0:	07d1      	lsls	r1, r2, #31
 80041d2:	d501      	bpl.n	80041d8 <_printf_float+0x14c>
 80041d4:	3301      	adds	r3, #1
 80041d6:	6123      	str	r3, [r4, #16]
 80041d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0a2      	beq.n	8004126 <_printf_float+0x9a>
 80041e0:	232d      	movs	r3, #45	; 0x2d
 80041e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e6:	e79e      	b.n	8004126 <_printf_float+0x9a>
 80041e8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80041ec:	f000 816e 	beq.w	80044cc <_printf_float+0x440>
 80041f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041f4:	d1b9      	bne.n	800416a <_printf_float+0xde>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1b7      	bne.n	800416a <_printf_float+0xde>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e7b4      	b.n	8004168 <_printf_float+0xdc>
 80041fe:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004202:	d119      	bne.n	8004238 <_printf_float+0x1ac>
 8004204:	2900      	cmp	r1, #0
 8004206:	6863      	ldr	r3, [r4, #4]
 8004208:	dd0c      	ble.n	8004224 <_printf_float+0x198>
 800420a:	6121      	str	r1, [r4, #16]
 800420c:	b913      	cbnz	r3, 8004214 <_printf_float+0x188>
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	07d2      	lsls	r2, r2, #31
 8004212:	d502      	bpl.n	800421a <_printf_float+0x18e>
 8004214:	3301      	adds	r3, #1
 8004216:	440b      	add	r3, r1
 8004218:	6123      	str	r3, [r4, #16]
 800421a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800421c:	f04f 0900 	mov.w	r9, #0
 8004220:	65a3      	str	r3, [r4, #88]	; 0x58
 8004222:	e7d9      	b.n	80041d8 <_printf_float+0x14c>
 8004224:	b913      	cbnz	r3, 800422c <_printf_float+0x1a0>
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	07d0      	lsls	r0, r2, #31
 800422a:	d501      	bpl.n	8004230 <_printf_float+0x1a4>
 800422c:	3302      	adds	r3, #2
 800422e:	e7f3      	b.n	8004218 <_printf_float+0x18c>
 8004230:	2301      	movs	r3, #1
 8004232:	e7f1      	b.n	8004218 <_printf_float+0x18c>
 8004234:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004238:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800423c:	4293      	cmp	r3, r2
 800423e:	db05      	blt.n	800424c <_printf_float+0x1c0>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	07d1      	lsls	r1, r2, #31
 8004246:	d5e8      	bpl.n	800421a <_printf_float+0x18e>
 8004248:	3301      	adds	r3, #1
 800424a:	e7e5      	b.n	8004218 <_printf_float+0x18c>
 800424c:	2b00      	cmp	r3, #0
 800424e:	bfcc      	ite	gt
 8004250:	2301      	movgt	r3, #1
 8004252:	f1c3 0302 	rsble	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	e7de      	b.n	8004218 <_printf_float+0x18c>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	055a      	lsls	r2, r3, #21
 800425e:	d407      	bmi.n	8004270 <_printf_float+0x1e4>
 8004260:	6923      	ldr	r3, [r4, #16]
 8004262:	463a      	mov	r2, r7
 8004264:	4659      	mov	r1, fp
 8004266:	4628      	mov	r0, r5
 8004268:	47b0      	blx	r6
 800426a:	3001      	adds	r0, #1
 800426c:	d129      	bne.n	80042c2 <_printf_float+0x236>
 800426e:	e764      	b.n	800413a <_printf_float+0xae>
 8004270:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004274:	f240 80d7 	bls.w	8004426 <_printf_float+0x39a>
 8004278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800427c:	2200      	movs	r2, #0
 800427e:	2300      	movs	r3, #0
 8004280:	f7fc fb92 	bl	80009a8 <__aeabi_dcmpeq>
 8004284:	b388      	cbz	r0, 80042ea <_printf_float+0x25e>
 8004286:	2301      	movs	r3, #1
 8004288:	4a40      	ldr	r2, [pc, #256]	; (800438c <_printf_float+0x300>)
 800428a:	4659      	mov	r1, fp
 800428c:	4628      	mov	r0, r5
 800428e:	47b0      	blx	r6
 8004290:	3001      	adds	r0, #1
 8004292:	f43f af52 	beq.w	800413a <_printf_float+0xae>
 8004296:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800429a:	429a      	cmp	r2, r3
 800429c:	db02      	blt.n	80042a4 <_printf_float+0x218>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	07d8      	lsls	r0, r3, #31
 80042a2:	d50e      	bpl.n	80042c2 <_printf_float+0x236>
 80042a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042a8:	4659      	mov	r1, fp
 80042aa:	4628      	mov	r0, r5
 80042ac:	47b0      	blx	r6
 80042ae:	3001      	adds	r0, #1
 80042b0:	f43f af43 	beq.w	800413a <_printf_float+0xae>
 80042b4:	2700      	movs	r7, #0
 80042b6:	f104 081a 	add.w	r8, r4, #26
 80042ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80042bc:	3b01      	subs	r3, #1
 80042be:	42bb      	cmp	r3, r7
 80042c0:	dc09      	bgt.n	80042d6 <_printf_float+0x24a>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	079f      	lsls	r7, r3, #30
 80042c6:	f100 80fd 	bmi.w	80044c4 <_printf_float+0x438>
 80042ca:	68e0      	ldr	r0, [r4, #12]
 80042cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80042ce:	4298      	cmp	r0, r3
 80042d0:	bfb8      	it	lt
 80042d2:	4618      	movlt	r0, r3
 80042d4:	e733      	b.n	800413e <_printf_float+0xb2>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4642      	mov	r2, r8
 80042da:	4659      	mov	r1, fp
 80042dc:	4628      	mov	r0, r5
 80042de:	47b0      	blx	r6
 80042e0:	3001      	adds	r0, #1
 80042e2:	f43f af2a 	beq.w	800413a <_printf_float+0xae>
 80042e6:	3701      	adds	r7, #1
 80042e8:	e7e7      	b.n	80042ba <_printf_float+0x22e>
 80042ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dc2b      	bgt.n	8004348 <_printf_float+0x2bc>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4a26      	ldr	r2, [pc, #152]	; (800438c <_printf_float+0x300>)
 80042f4:	4659      	mov	r1, fp
 80042f6:	4628      	mov	r0, r5
 80042f8:	47b0      	blx	r6
 80042fa:	3001      	adds	r0, #1
 80042fc:	f43f af1d 	beq.w	800413a <_printf_float+0xae>
 8004300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004302:	b923      	cbnz	r3, 800430e <_printf_float+0x282>
 8004304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004306:	b913      	cbnz	r3, 800430e <_printf_float+0x282>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	07d9      	lsls	r1, r3, #31
 800430c:	d5d9      	bpl.n	80042c2 <_printf_float+0x236>
 800430e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004312:	4659      	mov	r1, fp
 8004314:	4628      	mov	r0, r5
 8004316:	47b0      	blx	r6
 8004318:	3001      	adds	r0, #1
 800431a:	f43f af0e 	beq.w	800413a <_printf_float+0xae>
 800431e:	f04f 0800 	mov.w	r8, #0
 8004322:	f104 091a 	add.w	r9, r4, #26
 8004326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004328:	425b      	negs	r3, r3
 800432a:	4543      	cmp	r3, r8
 800432c:	dc01      	bgt.n	8004332 <_printf_float+0x2a6>
 800432e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004330:	e797      	b.n	8004262 <_printf_float+0x1d6>
 8004332:	2301      	movs	r3, #1
 8004334:	464a      	mov	r2, r9
 8004336:	4659      	mov	r1, fp
 8004338:	4628      	mov	r0, r5
 800433a:	47b0      	blx	r6
 800433c:	3001      	adds	r0, #1
 800433e:	f43f aefc 	beq.w	800413a <_printf_float+0xae>
 8004342:	f108 0801 	add.w	r8, r8, #1
 8004346:	e7ee      	b.n	8004326 <_printf_float+0x29a>
 8004348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800434a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800434c:	429a      	cmp	r2, r3
 800434e:	bfa8      	it	ge
 8004350:	461a      	movge	r2, r3
 8004352:	2a00      	cmp	r2, #0
 8004354:	4690      	mov	r8, r2
 8004356:	dd07      	ble.n	8004368 <_printf_float+0x2dc>
 8004358:	4613      	mov	r3, r2
 800435a:	4659      	mov	r1, fp
 800435c:	463a      	mov	r2, r7
 800435e:	4628      	mov	r0, r5
 8004360:	47b0      	blx	r6
 8004362:	3001      	adds	r0, #1
 8004364:	f43f aee9 	beq.w	800413a <_printf_float+0xae>
 8004368:	f104 031a 	add.w	r3, r4, #26
 800436c:	f04f 0a00 	mov.w	sl, #0
 8004370:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004374:	930b      	str	r3, [sp, #44]	; 0x2c
 8004376:	e015      	b.n	80043a4 <_printf_float+0x318>
 8004378:	7fefffff 	.word	0x7fefffff
 800437c:	080075cc 	.word	0x080075cc
 8004380:	080075c8 	.word	0x080075c8
 8004384:	080075d4 	.word	0x080075d4
 8004388:	080075d0 	.word	0x080075d0
 800438c:	080075d8 	.word	0x080075d8
 8004390:	2301      	movs	r3, #1
 8004392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004394:	4659      	mov	r1, fp
 8004396:	4628      	mov	r0, r5
 8004398:	47b0      	blx	r6
 800439a:	3001      	adds	r0, #1
 800439c:	f43f aecd 	beq.w	800413a <_printf_float+0xae>
 80043a0:	f10a 0a01 	add.w	sl, sl, #1
 80043a4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80043a8:	eba9 0308 	sub.w	r3, r9, r8
 80043ac:	4553      	cmp	r3, sl
 80043ae:	dcef      	bgt.n	8004390 <_printf_float+0x304>
 80043b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043b4:	429a      	cmp	r2, r3
 80043b6:	444f      	add	r7, r9
 80043b8:	db14      	blt.n	80043e4 <_printf_float+0x358>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	07da      	lsls	r2, r3, #31
 80043be:	d411      	bmi.n	80043e4 <_printf_float+0x358>
 80043c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80043c4:	eba3 0209 	sub.w	r2, r3, r9
 80043c8:	eba3 0901 	sub.w	r9, r3, r1
 80043cc:	4591      	cmp	r9, r2
 80043ce:	bfa8      	it	ge
 80043d0:	4691      	movge	r9, r2
 80043d2:	f1b9 0f00 	cmp.w	r9, #0
 80043d6:	dc0d      	bgt.n	80043f4 <_printf_float+0x368>
 80043d8:	2700      	movs	r7, #0
 80043da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043de:	f104 081a 	add.w	r8, r4, #26
 80043e2:	e018      	b.n	8004416 <_printf_float+0x38a>
 80043e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043e8:	4659      	mov	r1, fp
 80043ea:	4628      	mov	r0, r5
 80043ec:	47b0      	blx	r6
 80043ee:	3001      	adds	r0, #1
 80043f0:	d1e6      	bne.n	80043c0 <_printf_float+0x334>
 80043f2:	e6a2      	b.n	800413a <_printf_float+0xae>
 80043f4:	464b      	mov	r3, r9
 80043f6:	463a      	mov	r2, r7
 80043f8:	4659      	mov	r1, fp
 80043fa:	4628      	mov	r0, r5
 80043fc:	47b0      	blx	r6
 80043fe:	3001      	adds	r0, #1
 8004400:	d1ea      	bne.n	80043d8 <_printf_float+0x34c>
 8004402:	e69a      	b.n	800413a <_printf_float+0xae>
 8004404:	2301      	movs	r3, #1
 8004406:	4642      	mov	r2, r8
 8004408:	4659      	mov	r1, fp
 800440a:	4628      	mov	r0, r5
 800440c:	47b0      	blx	r6
 800440e:	3001      	adds	r0, #1
 8004410:	f43f ae93 	beq.w	800413a <_printf_float+0xae>
 8004414:	3701      	adds	r7, #1
 8004416:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	eba3 0309 	sub.w	r3, r3, r9
 8004420:	42bb      	cmp	r3, r7
 8004422:	dcef      	bgt.n	8004404 <_printf_float+0x378>
 8004424:	e74d      	b.n	80042c2 <_printf_float+0x236>
 8004426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004428:	2a01      	cmp	r2, #1
 800442a:	dc01      	bgt.n	8004430 <_printf_float+0x3a4>
 800442c:	07db      	lsls	r3, r3, #31
 800442e:	d538      	bpl.n	80044a2 <_printf_float+0x416>
 8004430:	2301      	movs	r3, #1
 8004432:	463a      	mov	r2, r7
 8004434:	4659      	mov	r1, fp
 8004436:	4628      	mov	r0, r5
 8004438:	47b0      	blx	r6
 800443a:	3001      	adds	r0, #1
 800443c:	f43f ae7d 	beq.w	800413a <_printf_float+0xae>
 8004440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004444:	4659      	mov	r1, fp
 8004446:	4628      	mov	r0, r5
 8004448:	47b0      	blx	r6
 800444a:	3001      	adds	r0, #1
 800444c:	f107 0701 	add.w	r7, r7, #1
 8004450:	f43f ae73 	beq.w	800413a <_printf_float+0xae>
 8004454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800445a:	2200      	movs	r2, #0
 800445c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004460:	2300      	movs	r3, #0
 8004462:	f7fc faa1 	bl	80009a8 <__aeabi_dcmpeq>
 8004466:	b9c0      	cbnz	r0, 800449a <_printf_float+0x40e>
 8004468:	4643      	mov	r3, r8
 800446a:	463a      	mov	r2, r7
 800446c:	4659      	mov	r1, fp
 800446e:	4628      	mov	r0, r5
 8004470:	47b0      	blx	r6
 8004472:	3001      	adds	r0, #1
 8004474:	d10d      	bne.n	8004492 <_printf_float+0x406>
 8004476:	e660      	b.n	800413a <_printf_float+0xae>
 8004478:	2301      	movs	r3, #1
 800447a:	4642      	mov	r2, r8
 800447c:	4659      	mov	r1, fp
 800447e:	4628      	mov	r0, r5
 8004480:	47b0      	blx	r6
 8004482:	3001      	adds	r0, #1
 8004484:	f43f ae59 	beq.w	800413a <_printf_float+0xae>
 8004488:	3701      	adds	r7, #1
 800448a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800448c:	3b01      	subs	r3, #1
 800448e:	42bb      	cmp	r3, r7
 8004490:	dcf2      	bgt.n	8004478 <_printf_float+0x3ec>
 8004492:	464b      	mov	r3, r9
 8004494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004498:	e6e4      	b.n	8004264 <_printf_float+0x1d8>
 800449a:	2700      	movs	r7, #0
 800449c:	f104 081a 	add.w	r8, r4, #26
 80044a0:	e7f3      	b.n	800448a <_printf_float+0x3fe>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e7e1      	b.n	800446a <_printf_float+0x3de>
 80044a6:	2301      	movs	r3, #1
 80044a8:	4642      	mov	r2, r8
 80044aa:	4659      	mov	r1, fp
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b0      	blx	r6
 80044b0:	3001      	adds	r0, #1
 80044b2:	f43f ae42 	beq.w	800413a <_printf_float+0xae>
 80044b6:	3701      	adds	r7, #1
 80044b8:	68e3      	ldr	r3, [r4, #12]
 80044ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	42bb      	cmp	r3, r7
 80044c0:	dcf1      	bgt.n	80044a6 <_printf_float+0x41a>
 80044c2:	e702      	b.n	80042ca <_printf_float+0x23e>
 80044c4:	2700      	movs	r7, #0
 80044c6:	f104 0819 	add.w	r8, r4, #25
 80044ca:	e7f5      	b.n	80044b8 <_printf_float+0x42c>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f43f ae94 	beq.w	80041fa <_printf_float+0x16e>
 80044d2:	f04f 0c00 	mov.w	ip, #0
 80044d6:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80044da:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80044e4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	463a      	mov	r2, r7
 80044ec:	464b      	mov	r3, r9
 80044ee:	4628      	mov	r0, r5
 80044f0:	f7ff fd3a 	bl	8003f68 <__cvt>
 80044f4:	4607      	mov	r7, r0
 80044f6:	e64f      	b.n	8004198 <_printf_float+0x10c>

080044f8 <_printf_common>:
 80044f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	4691      	mov	r9, r2
 80044fe:	461f      	mov	r7, r3
 8004500:	688a      	ldr	r2, [r1, #8]
 8004502:	690b      	ldr	r3, [r1, #16]
 8004504:	4606      	mov	r6, r0
 8004506:	4293      	cmp	r3, r2
 8004508:	bfb8      	it	lt
 800450a:	4613      	movlt	r3, r2
 800450c:	f8c9 3000 	str.w	r3, [r9]
 8004510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004514:	460c      	mov	r4, r1
 8004516:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800451a:	b112      	cbz	r2, 8004522 <_printf_common+0x2a>
 800451c:	3301      	adds	r3, #1
 800451e:	f8c9 3000 	str.w	r3, [r9]
 8004522:	6823      	ldr	r3, [r4, #0]
 8004524:	0699      	lsls	r1, r3, #26
 8004526:	bf42      	ittt	mi
 8004528:	f8d9 3000 	ldrmi.w	r3, [r9]
 800452c:	3302      	addmi	r3, #2
 800452e:	f8c9 3000 	strmi.w	r3, [r9]
 8004532:	6825      	ldr	r5, [r4, #0]
 8004534:	f015 0506 	ands.w	r5, r5, #6
 8004538:	d107      	bne.n	800454a <_printf_common+0x52>
 800453a:	f104 0a19 	add.w	sl, r4, #25
 800453e:	68e3      	ldr	r3, [r4, #12]
 8004540:	f8d9 2000 	ldr.w	r2, [r9]
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	42ab      	cmp	r3, r5
 8004548:	dc29      	bgt.n	800459e <_printf_common+0xa6>
 800454a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800454e:	6822      	ldr	r2, [r4, #0]
 8004550:	3300      	adds	r3, #0
 8004552:	bf18      	it	ne
 8004554:	2301      	movne	r3, #1
 8004556:	0692      	lsls	r2, r2, #26
 8004558:	d42e      	bmi.n	80045b8 <_printf_common+0xc0>
 800455a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800455e:	4639      	mov	r1, r7
 8004560:	4630      	mov	r0, r6
 8004562:	47c0      	blx	r8
 8004564:	3001      	adds	r0, #1
 8004566:	d021      	beq.n	80045ac <_printf_common+0xb4>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	68e5      	ldr	r5, [r4, #12]
 800456c:	f003 0306 	and.w	r3, r3, #6
 8004570:	2b04      	cmp	r3, #4
 8004572:	bf18      	it	ne
 8004574:	2500      	movne	r5, #0
 8004576:	f8d9 2000 	ldr.w	r2, [r9]
 800457a:	f04f 0900 	mov.w	r9, #0
 800457e:	bf08      	it	eq
 8004580:	1aad      	subeq	r5, r5, r2
 8004582:	68a3      	ldr	r3, [r4, #8]
 8004584:	6922      	ldr	r2, [r4, #16]
 8004586:	bf08      	it	eq
 8004588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800458c:	4293      	cmp	r3, r2
 800458e:	bfc4      	itt	gt
 8004590:	1a9b      	subgt	r3, r3, r2
 8004592:	18ed      	addgt	r5, r5, r3
 8004594:	341a      	adds	r4, #26
 8004596:	454d      	cmp	r5, r9
 8004598:	d11a      	bne.n	80045d0 <_printf_common+0xd8>
 800459a:	2000      	movs	r0, #0
 800459c:	e008      	b.n	80045b0 <_printf_common+0xb8>
 800459e:	2301      	movs	r3, #1
 80045a0:	4652      	mov	r2, sl
 80045a2:	4639      	mov	r1, r7
 80045a4:	4630      	mov	r0, r6
 80045a6:	47c0      	blx	r8
 80045a8:	3001      	adds	r0, #1
 80045aa:	d103      	bne.n	80045b4 <_printf_common+0xbc>
 80045ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045b4:	3501      	adds	r5, #1
 80045b6:	e7c2      	b.n	800453e <_printf_common+0x46>
 80045b8:	2030      	movs	r0, #48	; 0x30
 80045ba:	18e1      	adds	r1, r4, r3
 80045bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045c6:	4422      	add	r2, r4
 80045c8:	3302      	adds	r3, #2
 80045ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045ce:	e7c4      	b.n	800455a <_printf_common+0x62>
 80045d0:	2301      	movs	r3, #1
 80045d2:	4622      	mov	r2, r4
 80045d4:	4639      	mov	r1, r7
 80045d6:	4630      	mov	r0, r6
 80045d8:	47c0      	blx	r8
 80045da:	3001      	adds	r0, #1
 80045dc:	d0e6      	beq.n	80045ac <_printf_common+0xb4>
 80045de:	f109 0901 	add.w	r9, r9, #1
 80045e2:	e7d8      	b.n	8004596 <_printf_common+0x9e>

080045e4 <_printf_i>:
 80045e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045ec:	460c      	mov	r4, r1
 80045ee:	7e09      	ldrb	r1, [r1, #24]
 80045f0:	b085      	sub	sp, #20
 80045f2:	296e      	cmp	r1, #110	; 0x6e
 80045f4:	4617      	mov	r7, r2
 80045f6:	4606      	mov	r6, r0
 80045f8:	4698      	mov	r8, r3
 80045fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045fc:	f000 80b3 	beq.w	8004766 <_printf_i+0x182>
 8004600:	d822      	bhi.n	8004648 <_printf_i+0x64>
 8004602:	2963      	cmp	r1, #99	; 0x63
 8004604:	d036      	beq.n	8004674 <_printf_i+0x90>
 8004606:	d80a      	bhi.n	800461e <_printf_i+0x3a>
 8004608:	2900      	cmp	r1, #0
 800460a:	f000 80b9 	beq.w	8004780 <_printf_i+0x19c>
 800460e:	2958      	cmp	r1, #88	; 0x58
 8004610:	f000 8083 	beq.w	800471a <_printf_i+0x136>
 8004614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004618:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800461c:	e032      	b.n	8004684 <_printf_i+0xa0>
 800461e:	2964      	cmp	r1, #100	; 0x64
 8004620:	d001      	beq.n	8004626 <_printf_i+0x42>
 8004622:	2969      	cmp	r1, #105	; 0x69
 8004624:	d1f6      	bne.n	8004614 <_printf_i+0x30>
 8004626:	6820      	ldr	r0, [r4, #0]
 8004628:	6813      	ldr	r3, [r2, #0]
 800462a:	0605      	lsls	r5, r0, #24
 800462c:	f103 0104 	add.w	r1, r3, #4
 8004630:	d52a      	bpl.n	8004688 <_printf_i+0xa4>
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6011      	str	r1, [r2, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	da03      	bge.n	8004642 <_printf_i+0x5e>
 800463a:	222d      	movs	r2, #45	; 0x2d
 800463c:	425b      	negs	r3, r3
 800463e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004642:	486f      	ldr	r0, [pc, #444]	; (8004800 <_printf_i+0x21c>)
 8004644:	220a      	movs	r2, #10
 8004646:	e039      	b.n	80046bc <_printf_i+0xd8>
 8004648:	2973      	cmp	r1, #115	; 0x73
 800464a:	f000 809d 	beq.w	8004788 <_printf_i+0x1a4>
 800464e:	d808      	bhi.n	8004662 <_printf_i+0x7e>
 8004650:	296f      	cmp	r1, #111	; 0x6f
 8004652:	d020      	beq.n	8004696 <_printf_i+0xb2>
 8004654:	2970      	cmp	r1, #112	; 0x70
 8004656:	d1dd      	bne.n	8004614 <_printf_i+0x30>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	f043 0320 	orr.w	r3, r3, #32
 800465e:	6023      	str	r3, [r4, #0]
 8004660:	e003      	b.n	800466a <_printf_i+0x86>
 8004662:	2975      	cmp	r1, #117	; 0x75
 8004664:	d017      	beq.n	8004696 <_printf_i+0xb2>
 8004666:	2978      	cmp	r1, #120	; 0x78
 8004668:	d1d4      	bne.n	8004614 <_printf_i+0x30>
 800466a:	2378      	movs	r3, #120	; 0x78
 800466c:	4865      	ldr	r0, [pc, #404]	; (8004804 <_printf_i+0x220>)
 800466e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004672:	e055      	b.n	8004720 <_printf_i+0x13c>
 8004674:	6813      	ldr	r3, [r2, #0]
 8004676:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800467a:	1d19      	adds	r1, r3, #4
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6011      	str	r1, [r2, #0]
 8004680:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004684:	2301      	movs	r3, #1
 8004686:	e08c      	b.n	80047a2 <_printf_i+0x1be>
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800468e:	6011      	str	r1, [r2, #0]
 8004690:	bf18      	it	ne
 8004692:	b21b      	sxthne	r3, r3
 8004694:	e7cf      	b.n	8004636 <_printf_i+0x52>
 8004696:	6813      	ldr	r3, [r2, #0]
 8004698:	6825      	ldr	r5, [r4, #0]
 800469a:	1d18      	adds	r0, r3, #4
 800469c:	6010      	str	r0, [r2, #0]
 800469e:	0628      	lsls	r0, r5, #24
 80046a0:	d501      	bpl.n	80046a6 <_printf_i+0xc2>
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	e002      	b.n	80046ac <_printf_i+0xc8>
 80046a6:	0668      	lsls	r0, r5, #25
 80046a8:	d5fb      	bpl.n	80046a2 <_printf_i+0xbe>
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	296f      	cmp	r1, #111	; 0x6f
 80046ae:	bf14      	ite	ne
 80046b0:	220a      	movne	r2, #10
 80046b2:	2208      	moveq	r2, #8
 80046b4:	4852      	ldr	r0, [pc, #328]	; (8004800 <_printf_i+0x21c>)
 80046b6:	2100      	movs	r1, #0
 80046b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046bc:	6865      	ldr	r5, [r4, #4]
 80046be:	2d00      	cmp	r5, #0
 80046c0:	60a5      	str	r5, [r4, #8]
 80046c2:	f2c0 8095 	blt.w	80047f0 <_printf_i+0x20c>
 80046c6:	6821      	ldr	r1, [r4, #0]
 80046c8:	f021 0104 	bic.w	r1, r1, #4
 80046cc:	6021      	str	r1, [r4, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d13d      	bne.n	800474e <_printf_i+0x16a>
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	f040 808e 	bne.w	80047f4 <_printf_i+0x210>
 80046d8:	4665      	mov	r5, ip
 80046da:	2a08      	cmp	r2, #8
 80046dc:	d10b      	bne.n	80046f6 <_printf_i+0x112>
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	07db      	lsls	r3, r3, #31
 80046e2:	d508      	bpl.n	80046f6 <_printf_i+0x112>
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	bfde      	ittt	le
 80046ec:	2330      	movle	r3, #48	; 0x30
 80046ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80046f6:	ebac 0305 	sub.w	r3, ip, r5
 80046fa:	6123      	str	r3, [r4, #16]
 80046fc:	f8cd 8000 	str.w	r8, [sp]
 8004700:	463b      	mov	r3, r7
 8004702:	aa03      	add	r2, sp, #12
 8004704:	4621      	mov	r1, r4
 8004706:	4630      	mov	r0, r6
 8004708:	f7ff fef6 	bl	80044f8 <_printf_common>
 800470c:	3001      	adds	r0, #1
 800470e:	d14d      	bne.n	80047ac <_printf_i+0x1c8>
 8004710:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004714:	b005      	add	sp, #20
 8004716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800471a:	4839      	ldr	r0, [pc, #228]	; (8004800 <_printf_i+0x21c>)
 800471c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	6821      	ldr	r1, [r4, #0]
 8004724:	1d1d      	adds	r5, r3, #4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6015      	str	r5, [r2, #0]
 800472a:	060a      	lsls	r2, r1, #24
 800472c:	d50b      	bpl.n	8004746 <_printf_i+0x162>
 800472e:	07ca      	lsls	r2, r1, #31
 8004730:	bf44      	itt	mi
 8004732:	f041 0120 	orrmi.w	r1, r1, #32
 8004736:	6021      	strmi	r1, [r4, #0]
 8004738:	b91b      	cbnz	r3, 8004742 <_printf_i+0x15e>
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	f022 0220 	bic.w	r2, r2, #32
 8004740:	6022      	str	r2, [r4, #0]
 8004742:	2210      	movs	r2, #16
 8004744:	e7b7      	b.n	80046b6 <_printf_i+0xd2>
 8004746:	064d      	lsls	r5, r1, #25
 8004748:	bf48      	it	mi
 800474a:	b29b      	uxthmi	r3, r3
 800474c:	e7ef      	b.n	800472e <_printf_i+0x14a>
 800474e:	4665      	mov	r5, ip
 8004750:	fbb3 f1f2 	udiv	r1, r3, r2
 8004754:	fb02 3311 	mls	r3, r2, r1, r3
 8004758:	5cc3      	ldrb	r3, [r0, r3]
 800475a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800475e:	460b      	mov	r3, r1
 8004760:	2900      	cmp	r1, #0
 8004762:	d1f5      	bne.n	8004750 <_printf_i+0x16c>
 8004764:	e7b9      	b.n	80046da <_printf_i+0xf6>
 8004766:	6813      	ldr	r3, [r2, #0]
 8004768:	6825      	ldr	r5, [r4, #0]
 800476a:	1d18      	adds	r0, r3, #4
 800476c:	6961      	ldr	r1, [r4, #20]
 800476e:	6010      	str	r0, [r2, #0]
 8004770:	0628      	lsls	r0, r5, #24
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	d501      	bpl.n	800477a <_printf_i+0x196>
 8004776:	6019      	str	r1, [r3, #0]
 8004778:	e002      	b.n	8004780 <_printf_i+0x19c>
 800477a:	066a      	lsls	r2, r5, #25
 800477c:	d5fb      	bpl.n	8004776 <_printf_i+0x192>
 800477e:	8019      	strh	r1, [r3, #0]
 8004780:	2300      	movs	r3, #0
 8004782:	4665      	mov	r5, ip
 8004784:	6123      	str	r3, [r4, #16]
 8004786:	e7b9      	b.n	80046fc <_printf_i+0x118>
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	1d19      	adds	r1, r3, #4
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	681d      	ldr	r5, [r3, #0]
 8004790:	6862      	ldr	r2, [r4, #4]
 8004792:	2100      	movs	r1, #0
 8004794:	4628      	mov	r0, r5
 8004796:	f001 f9b3 	bl	8005b00 <memchr>
 800479a:	b108      	cbz	r0, 80047a0 <_printf_i+0x1bc>
 800479c:	1b40      	subs	r0, r0, r5
 800479e:	6060      	str	r0, [r4, #4]
 80047a0:	6863      	ldr	r3, [r4, #4]
 80047a2:	6123      	str	r3, [r4, #16]
 80047a4:	2300      	movs	r3, #0
 80047a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047aa:	e7a7      	b.n	80046fc <_printf_i+0x118>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	462a      	mov	r2, r5
 80047b0:	4639      	mov	r1, r7
 80047b2:	4630      	mov	r0, r6
 80047b4:	47c0      	blx	r8
 80047b6:	3001      	adds	r0, #1
 80047b8:	d0aa      	beq.n	8004710 <_printf_i+0x12c>
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	079b      	lsls	r3, r3, #30
 80047be:	d413      	bmi.n	80047e8 <_printf_i+0x204>
 80047c0:	68e0      	ldr	r0, [r4, #12]
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	4298      	cmp	r0, r3
 80047c6:	bfb8      	it	lt
 80047c8:	4618      	movlt	r0, r3
 80047ca:	e7a3      	b.n	8004714 <_printf_i+0x130>
 80047cc:	2301      	movs	r3, #1
 80047ce:	464a      	mov	r2, r9
 80047d0:	4639      	mov	r1, r7
 80047d2:	4630      	mov	r0, r6
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d09a      	beq.n	8004710 <_printf_i+0x12c>
 80047da:	3501      	adds	r5, #1
 80047dc:	68e3      	ldr	r3, [r4, #12]
 80047de:	9a03      	ldr	r2, [sp, #12]
 80047e0:	1a9b      	subs	r3, r3, r2
 80047e2:	42ab      	cmp	r3, r5
 80047e4:	dcf2      	bgt.n	80047cc <_printf_i+0x1e8>
 80047e6:	e7eb      	b.n	80047c0 <_printf_i+0x1dc>
 80047e8:	2500      	movs	r5, #0
 80047ea:	f104 0919 	add.w	r9, r4, #25
 80047ee:	e7f5      	b.n	80047dc <_printf_i+0x1f8>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ac      	bne.n	800474e <_printf_i+0x16a>
 80047f4:	7803      	ldrb	r3, [r0, #0]
 80047f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047fe:	e76c      	b.n	80046da <_printf_i+0xf6>
 8004800:	080075da 	.word	0x080075da
 8004804:	080075eb 	.word	0x080075eb

08004808 <iprintf>:
 8004808:	b40f      	push	{r0, r1, r2, r3}
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <iprintf+0x2c>)
 800480c:	b513      	push	{r0, r1, r4, lr}
 800480e:	681c      	ldr	r4, [r3, #0]
 8004810:	b124      	cbz	r4, 800481c <iprintf+0x14>
 8004812:	69a3      	ldr	r3, [r4, #24]
 8004814:	b913      	cbnz	r3, 800481c <iprintf+0x14>
 8004816:	4620      	mov	r0, r4
 8004818:	f001 f876 	bl	8005908 <__sinit>
 800481c:	ab05      	add	r3, sp, #20
 800481e:	9a04      	ldr	r2, [sp, #16]
 8004820:	68a1      	ldr	r1, [r4, #8]
 8004822:	4620      	mov	r0, r4
 8004824:	9301      	str	r3, [sp, #4]
 8004826:	f001 fc97 	bl	8006158 <_vfiprintf_r>
 800482a:	b002      	add	sp, #8
 800482c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004830:	b004      	add	sp, #16
 8004832:	4770      	bx	lr
 8004834:	2000054c 	.word	0x2000054c

08004838 <_puts_r>:
 8004838:	b570      	push	{r4, r5, r6, lr}
 800483a:	460e      	mov	r6, r1
 800483c:	4605      	mov	r5, r0
 800483e:	b118      	cbz	r0, 8004848 <_puts_r+0x10>
 8004840:	6983      	ldr	r3, [r0, #24]
 8004842:	b90b      	cbnz	r3, 8004848 <_puts_r+0x10>
 8004844:	f001 f860 	bl	8005908 <__sinit>
 8004848:	69ab      	ldr	r3, [r5, #24]
 800484a:	68ac      	ldr	r4, [r5, #8]
 800484c:	b913      	cbnz	r3, 8004854 <_puts_r+0x1c>
 800484e:	4628      	mov	r0, r5
 8004850:	f001 f85a 	bl	8005908 <__sinit>
 8004854:	4b23      	ldr	r3, [pc, #140]	; (80048e4 <_puts_r+0xac>)
 8004856:	429c      	cmp	r4, r3
 8004858:	d117      	bne.n	800488a <_puts_r+0x52>
 800485a:	686c      	ldr	r4, [r5, #4]
 800485c:	89a3      	ldrh	r3, [r4, #12]
 800485e:	071b      	lsls	r3, r3, #28
 8004860:	d51d      	bpl.n	800489e <_puts_r+0x66>
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	b1db      	cbz	r3, 800489e <_puts_r+0x66>
 8004866:	3e01      	subs	r6, #1
 8004868:	68a3      	ldr	r3, [r4, #8]
 800486a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800486e:	3b01      	subs	r3, #1
 8004870:	60a3      	str	r3, [r4, #8]
 8004872:	b9e9      	cbnz	r1, 80048b0 <_puts_r+0x78>
 8004874:	2b00      	cmp	r3, #0
 8004876:	da2e      	bge.n	80048d6 <_puts_r+0x9e>
 8004878:	4622      	mov	r2, r4
 800487a:	210a      	movs	r1, #10
 800487c:	4628      	mov	r0, r5
 800487e:	f000 f84f 	bl	8004920 <__swbuf_r>
 8004882:	3001      	adds	r0, #1
 8004884:	d011      	beq.n	80048aa <_puts_r+0x72>
 8004886:	200a      	movs	r0, #10
 8004888:	e011      	b.n	80048ae <_puts_r+0x76>
 800488a:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <_puts_r+0xb0>)
 800488c:	429c      	cmp	r4, r3
 800488e:	d101      	bne.n	8004894 <_puts_r+0x5c>
 8004890:	68ac      	ldr	r4, [r5, #8]
 8004892:	e7e3      	b.n	800485c <_puts_r+0x24>
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <_puts_r+0xb4>)
 8004896:	429c      	cmp	r4, r3
 8004898:	bf08      	it	eq
 800489a:	68ec      	ldreq	r4, [r5, #12]
 800489c:	e7de      	b.n	800485c <_puts_r+0x24>
 800489e:	4621      	mov	r1, r4
 80048a0:	4628      	mov	r0, r5
 80048a2:	f000 f88f 	bl	80049c4 <__swsetup_r>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d0dd      	beq.n	8004866 <_puts_r+0x2e>
 80048aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da04      	bge.n	80048be <_puts_r+0x86>
 80048b4:	69a2      	ldr	r2, [r4, #24]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	dc06      	bgt.n	80048c8 <_puts_r+0x90>
 80048ba:	290a      	cmp	r1, #10
 80048bc:	d004      	beq.n	80048c8 <_puts_r+0x90>
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	6022      	str	r2, [r4, #0]
 80048c4:	7019      	strb	r1, [r3, #0]
 80048c6:	e7cf      	b.n	8004868 <_puts_r+0x30>
 80048c8:	4622      	mov	r2, r4
 80048ca:	4628      	mov	r0, r5
 80048cc:	f000 f828 	bl	8004920 <__swbuf_r>
 80048d0:	3001      	adds	r0, #1
 80048d2:	d1c9      	bne.n	8004868 <_puts_r+0x30>
 80048d4:	e7e9      	b.n	80048aa <_puts_r+0x72>
 80048d6:	200a      	movs	r0, #10
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	6022      	str	r2, [r4, #0]
 80048de:	7018      	strb	r0, [r3, #0]
 80048e0:	e7e5      	b.n	80048ae <_puts_r+0x76>
 80048e2:	bf00      	nop
 80048e4:	0800762c 	.word	0x0800762c
 80048e8:	0800764c 	.word	0x0800764c
 80048ec:	0800760c 	.word	0x0800760c

080048f0 <puts>:
 80048f0:	4b02      	ldr	r3, [pc, #8]	; (80048fc <puts+0xc>)
 80048f2:	4601      	mov	r1, r0
 80048f4:	6818      	ldr	r0, [r3, #0]
 80048f6:	f7ff bf9f 	b.w	8004838 <_puts_r>
 80048fa:	bf00      	nop
 80048fc:	2000054c 	.word	0x2000054c

08004900 <_sbrk_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	2300      	movs	r3, #0
 8004904:	4c05      	ldr	r4, [pc, #20]	; (800491c <_sbrk_r+0x1c>)
 8004906:	4605      	mov	r5, r0
 8004908:	4608      	mov	r0, r1
 800490a:	6023      	str	r3, [r4, #0]
 800490c:	f7fd fe9e 	bl	800264c <_sbrk>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_sbrk_r+0x1a>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	b103      	cbz	r3, 800491a <_sbrk_r+0x1a>
 8004918:	602b      	str	r3, [r5, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20000a84 	.word	0x20000a84

08004920 <__swbuf_r>:
 8004920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004922:	460e      	mov	r6, r1
 8004924:	4614      	mov	r4, r2
 8004926:	4605      	mov	r5, r0
 8004928:	b118      	cbz	r0, 8004932 <__swbuf_r+0x12>
 800492a:	6983      	ldr	r3, [r0, #24]
 800492c:	b90b      	cbnz	r3, 8004932 <__swbuf_r+0x12>
 800492e:	f000 ffeb 	bl	8005908 <__sinit>
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <__swbuf_r+0x98>)
 8004934:	429c      	cmp	r4, r3
 8004936:	d12a      	bne.n	800498e <__swbuf_r+0x6e>
 8004938:	686c      	ldr	r4, [r5, #4]
 800493a:	69a3      	ldr	r3, [r4, #24]
 800493c:	60a3      	str	r3, [r4, #8]
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	071a      	lsls	r2, r3, #28
 8004942:	d52e      	bpl.n	80049a2 <__swbuf_r+0x82>
 8004944:	6923      	ldr	r3, [r4, #16]
 8004946:	b363      	cbz	r3, 80049a2 <__swbuf_r+0x82>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	6820      	ldr	r0, [r4, #0]
 800494c:	b2f6      	uxtb	r6, r6
 800494e:	1ac0      	subs	r0, r0, r3
 8004950:	6963      	ldr	r3, [r4, #20]
 8004952:	4637      	mov	r7, r6
 8004954:	4283      	cmp	r3, r0
 8004956:	dc04      	bgt.n	8004962 <__swbuf_r+0x42>
 8004958:	4621      	mov	r1, r4
 800495a:	4628      	mov	r0, r5
 800495c:	f000 ff6a 	bl	8005834 <_fflush_r>
 8004960:	bb28      	cbnz	r0, 80049ae <__swbuf_r+0x8e>
 8004962:	68a3      	ldr	r3, [r4, #8]
 8004964:	3001      	adds	r0, #1
 8004966:	3b01      	subs	r3, #1
 8004968:	60a3      	str	r3, [r4, #8]
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	6022      	str	r2, [r4, #0]
 8004970:	701e      	strb	r6, [r3, #0]
 8004972:	6963      	ldr	r3, [r4, #20]
 8004974:	4283      	cmp	r3, r0
 8004976:	d004      	beq.n	8004982 <__swbuf_r+0x62>
 8004978:	89a3      	ldrh	r3, [r4, #12]
 800497a:	07db      	lsls	r3, r3, #31
 800497c:	d519      	bpl.n	80049b2 <__swbuf_r+0x92>
 800497e:	2e0a      	cmp	r6, #10
 8004980:	d117      	bne.n	80049b2 <__swbuf_r+0x92>
 8004982:	4621      	mov	r1, r4
 8004984:	4628      	mov	r0, r5
 8004986:	f000 ff55 	bl	8005834 <_fflush_r>
 800498a:	b190      	cbz	r0, 80049b2 <__swbuf_r+0x92>
 800498c:	e00f      	b.n	80049ae <__swbuf_r+0x8e>
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <__swbuf_r+0x9c>)
 8004990:	429c      	cmp	r4, r3
 8004992:	d101      	bne.n	8004998 <__swbuf_r+0x78>
 8004994:	68ac      	ldr	r4, [r5, #8]
 8004996:	e7d0      	b.n	800493a <__swbuf_r+0x1a>
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <__swbuf_r+0xa0>)
 800499a:	429c      	cmp	r4, r3
 800499c:	bf08      	it	eq
 800499e:	68ec      	ldreq	r4, [r5, #12]
 80049a0:	e7cb      	b.n	800493a <__swbuf_r+0x1a>
 80049a2:	4621      	mov	r1, r4
 80049a4:	4628      	mov	r0, r5
 80049a6:	f000 f80d 	bl	80049c4 <__swsetup_r>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d0cc      	beq.n	8004948 <__swbuf_r+0x28>
 80049ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80049b2:	4638      	mov	r0, r7
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b6:	bf00      	nop
 80049b8:	0800762c 	.word	0x0800762c
 80049bc:	0800764c 	.word	0x0800764c
 80049c0:	0800760c 	.word	0x0800760c

080049c4 <__swsetup_r>:
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <__swsetup_r+0xcc>)
 80049c6:	b570      	push	{r4, r5, r6, lr}
 80049c8:	681d      	ldr	r5, [r3, #0]
 80049ca:	4606      	mov	r6, r0
 80049cc:	460c      	mov	r4, r1
 80049ce:	b125      	cbz	r5, 80049da <__swsetup_r+0x16>
 80049d0:	69ab      	ldr	r3, [r5, #24]
 80049d2:	b913      	cbnz	r3, 80049da <__swsetup_r+0x16>
 80049d4:	4628      	mov	r0, r5
 80049d6:	f000 ff97 	bl	8005908 <__sinit>
 80049da:	4b2e      	ldr	r3, [pc, #184]	; (8004a94 <__swsetup_r+0xd0>)
 80049dc:	429c      	cmp	r4, r3
 80049de:	d10f      	bne.n	8004a00 <__swsetup_r+0x3c>
 80049e0:	686c      	ldr	r4, [r5, #4]
 80049e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	0715      	lsls	r5, r2, #28
 80049ea:	d42c      	bmi.n	8004a46 <__swsetup_r+0x82>
 80049ec:	06d0      	lsls	r0, r2, #27
 80049ee:	d411      	bmi.n	8004a14 <__swsetup_r+0x50>
 80049f0:	2209      	movs	r2, #9
 80049f2:	6032      	str	r2, [r6, #0]
 80049f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f8:	81a3      	strh	r3, [r4, #12]
 80049fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049fe:	e03e      	b.n	8004a7e <__swsetup_r+0xba>
 8004a00:	4b25      	ldr	r3, [pc, #148]	; (8004a98 <__swsetup_r+0xd4>)
 8004a02:	429c      	cmp	r4, r3
 8004a04:	d101      	bne.n	8004a0a <__swsetup_r+0x46>
 8004a06:	68ac      	ldr	r4, [r5, #8]
 8004a08:	e7eb      	b.n	80049e2 <__swsetup_r+0x1e>
 8004a0a:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <__swsetup_r+0xd8>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	bf08      	it	eq
 8004a10:	68ec      	ldreq	r4, [r5, #12]
 8004a12:	e7e6      	b.n	80049e2 <__swsetup_r+0x1e>
 8004a14:	0751      	lsls	r1, r2, #29
 8004a16:	d512      	bpl.n	8004a3e <__swsetup_r+0x7a>
 8004a18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a1a:	b141      	cbz	r1, 8004a2e <__swsetup_r+0x6a>
 8004a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a20:	4299      	cmp	r1, r3
 8004a22:	d002      	beq.n	8004a2a <__swsetup_r+0x66>
 8004a24:	4630      	mov	r0, r6
 8004a26:	f7ff f9f9 	bl	8003e1c <_free_r>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6363      	str	r3, [r4, #52]	; 0x34
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a34:	81a3      	strh	r3, [r4, #12]
 8004a36:	2300      	movs	r3, #0
 8004a38:	6063      	str	r3, [r4, #4]
 8004a3a:	6923      	ldr	r3, [r4, #16]
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	89a3      	ldrh	r3, [r4, #12]
 8004a40:	f043 0308 	orr.w	r3, r3, #8
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	b94b      	cbnz	r3, 8004a5e <__swsetup_r+0x9a>
 8004a4a:	89a3      	ldrh	r3, [r4, #12]
 8004a4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a54:	d003      	beq.n	8004a5e <__swsetup_r+0x9a>
 8004a56:	4621      	mov	r1, r4
 8004a58:	4630      	mov	r0, r6
 8004a5a:	f001 f811 	bl	8005a80 <__smakebuf_r>
 8004a5e:	89a2      	ldrh	r2, [r4, #12]
 8004a60:	f012 0301 	ands.w	r3, r2, #1
 8004a64:	d00c      	beq.n	8004a80 <__swsetup_r+0xbc>
 8004a66:	2300      	movs	r3, #0
 8004a68:	60a3      	str	r3, [r4, #8]
 8004a6a:	6963      	ldr	r3, [r4, #20]
 8004a6c:	425b      	negs	r3, r3
 8004a6e:	61a3      	str	r3, [r4, #24]
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	b953      	cbnz	r3, 8004a8a <__swsetup_r+0xc6>
 8004a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004a7c:	d1ba      	bne.n	80049f4 <__swsetup_r+0x30>
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	0792      	lsls	r2, r2, #30
 8004a82:	bf58      	it	pl
 8004a84:	6963      	ldrpl	r3, [r4, #20]
 8004a86:	60a3      	str	r3, [r4, #8]
 8004a88:	e7f2      	b.n	8004a70 <__swsetup_r+0xac>
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e7f7      	b.n	8004a7e <__swsetup_r+0xba>
 8004a8e:	bf00      	nop
 8004a90:	2000054c 	.word	0x2000054c
 8004a94:	0800762c 	.word	0x0800762c
 8004a98:	0800764c 	.word	0x0800764c
 8004a9c:	0800760c 	.word	0x0800760c

08004aa0 <quorem>:
 8004aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	6903      	ldr	r3, [r0, #16]
 8004aa6:	690c      	ldr	r4, [r1, #16]
 8004aa8:	4680      	mov	r8, r0
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	f2c0 8084 	blt.w	8004bb8 <quorem+0x118>
 8004ab0:	3c01      	subs	r4, #1
 8004ab2:	f101 0714 	add.w	r7, r1, #20
 8004ab6:	f100 0614 	add.w	r6, r0, #20
 8004aba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004abe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004ac2:	3501      	adds	r5, #1
 8004ac4:	fbb0 f5f5 	udiv	r5, r0, r5
 8004ac8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004acc:	eb06 030c 	add.w	r3, r6, ip
 8004ad0:	eb07 090c 	add.w	r9, r7, ip
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	b39d      	cbz	r5, 8004b40 <quorem+0xa0>
 8004ad8:	f04f 0a00 	mov.w	sl, #0
 8004adc:	4638      	mov	r0, r7
 8004ade:	46b6      	mov	lr, r6
 8004ae0:	46d3      	mov	fp, sl
 8004ae2:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ae6:	b293      	uxth	r3, r2
 8004ae8:	fb05 a303 	mla	r3, r5, r3, sl
 8004aec:	0c12      	lsrs	r2, r2, #16
 8004aee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004af2:	fb05 a202 	mla	r2, r5, r2, sl
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	ebab 0303 	sub.w	r3, fp, r3
 8004afc:	f8de b000 	ldr.w	fp, [lr]
 8004b00:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b04:	fa1f fb8b 	uxth.w	fp, fp
 8004b08:	445b      	add	r3, fp
 8004b0a:	fa1f fb82 	uxth.w	fp, r2
 8004b0e:	f8de 2000 	ldr.w	r2, [lr]
 8004b12:	4581      	cmp	r9, r0
 8004b14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b22:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004b26:	f84e 3b04 	str.w	r3, [lr], #4
 8004b2a:	d2da      	bcs.n	8004ae2 <quorem+0x42>
 8004b2c:	f856 300c 	ldr.w	r3, [r6, ip]
 8004b30:	b933      	cbnz	r3, 8004b40 <quorem+0xa0>
 8004b32:	9b01      	ldr	r3, [sp, #4]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	429e      	cmp	r6, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	d331      	bcc.n	8004ba0 <quorem+0x100>
 8004b3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b40:	4640      	mov	r0, r8
 8004b42:	f001 fa0d 	bl	8005f60 <__mcmp>
 8004b46:	2800      	cmp	r0, #0
 8004b48:	db26      	blt.n	8004b98 <quorem+0xf8>
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f04f 0c00 	mov.w	ip, #0
 8004b50:	3501      	adds	r5, #1
 8004b52:	f857 1b04 	ldr.w	r1, [r7], #4
 8004b56:	f8d0 e000 	ldr.w	lr, [r0]
 8004b5a:	b28b      	uxth	r3, r1
 8004b5c:	ebac 0303 	sub.w	r3, ip, r3
 8004b60:	fa1f f28e 	uxth.w	r2, lr
 8004b64:	4413      	add	r3, r2
 8004b66:	0c0a      	lsrs	r2, r1, #16
 8004b68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b76:	45b9      	cmp	r9, r7
 8004b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b7c:	f840 3b04 	str.w	r3, [r0], #4
 8004b80:	d2e7      	bcs.n	8004b52 <quorem+0xb2>
 8004b82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004b86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004b8a:	b92a      	cbnz	r2, 8004b98 <quorem+0xf8>
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	429e      	cmp	r6, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	d30b      	bcc.n	8004bac <quorem+0x10c>
 8004b94:	f8c8 4010 	str.w	r4, [r8, #16]
 8004b98:	4628      	mov	r0, r5
 8004b9a:	b003      	add	sp, #12
 8004b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	3b04      	subs	r3, #4
 8004ba4:	2a00      	cmp	r2, #0
 8004ba6:	d1c9      	bne.n	8004b3c <quorem+0x9c>
 8004ba8:	3c01      	subs	r4, #1
 8004baa:	e7c4      	b.n	8004b36 <quorem+0x96>
 8004bac:	6812      	ldr	r2, [r2, #0]
 8004bae:	3b04      	subs	r3, #4
 8004bb0:	2a00      	cmp	r2, #0
 8004bb2:	d1ef      	bne.n	8004b94 <quorem+0xf4>
 8004bb4:	3c01      	subs	r4, #1
 8004bb6:	e7ea      	b.n	8004b8e <quorem+0xee>
 8004bb8:	2000      	movs	r0, #0
 8004bba:	e7ee      	b.n	8004b9a <quorem+0xfa>
 8004bbc:	0000      	movs	r0, r0
	...

08004bc0 <_dtoa_r>:
 8004bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc4:	4616      	mov	r6, r2
 8004bc6:	461f      	mov	r7, r3
 8004bc8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004bca:	b095      	sub	sp, #84	; 0x54
 8004bcc:	4604      	mov	r4, r0
 8004bce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004bd2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004bd6:	b93d      	cbnz	r5, 8004be8 <_dtoa_r+0x28>
 8004bd8:	2010      	movs	r0, #16
 8004bda:	f7ff f90f 	bl	8003dfc <malloc>
 8004bde:	6260      	str	r0, [r4, #36]	; 0x24
 8004be0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004be4:	6005      	str	r5, [r0, #0]
 8004be6:	60c5      	str	r5, [r0, #12]
 8004be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	b151      	cbz	r1, 8004c04 <_dtoa_r+0x44>
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	4093      	lsls	r3, r2
 8004bf4:	604a      	str	r2, [r1, #4]
 8004bf6:	608b      	str	r3, [r1, #8]
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f000 ffd0 	bl	8005b9e <_Bfree>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	1e3b      	subs	r3, r7, #0
 8004c06:	bfaf      	iteee	ge
 8004c08:	2300      	movge	r3, #0
 8004c0a:	2201      	movlt	r2, #1
 8004c0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c10:	9303      	strlt	r3, [sp, #12]
 8004c12:	bfac      	ite	ge
 8004c14:	f8c8 3000 	strge.w	r3, [r8]
 8004c18:	f8c8 2000 	strlt.w	r2, [r8]
 8004c1c:	4bae      	ldr	r3, [pc, #696]	; (8004ed8 <_dtoa_r+0x318>)
 8004c1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004c22:	ea33 0308 	bics.w	r3, r3, r8
 8004c26:	d11b      	bne.n	8004c60 <_dtoa_r+0xa0>
 8004c28:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	9b02      	ldr	r3, [sp, #8]
 8004c32:	b923      	cbnz	r3, 8004c3e <_dtoa_r+0x7e>
 8004c34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f000 8545 	beq.w	80056c8 <_dtoa_r+0xb08>
 8004c3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c40:	b953      	cbnz	r3, 8004c58 <_dtoa_r+0x98>
 8004c42:	4ba6      	ldr	r3, [pc, #664]	; (8004edc <_dtoa_r+0x31c>)
 8004c44:	e021      	b.n	8004c8a <_dtoa_r+0xca>
 8004c46:	4ba6      	ldr	r3, [pc, #664]	; (8004ee0 <_dtoa_r+0x320>)
 8004c48:	9306      	str	r3, [sp, #24]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	9806      	ldr	r0, [sp, #24]
 8004c52:	b015      	add	sp, #84	; 0x54
 8004c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c58:	4ba0      	ldr	r3, [pc, #640]	; (8004edc <_dtoa_r+0x31c>)
 8004c5a:	9306      	str	r3, [sp, #24]
 8004c5c:	3303      	adds	r3, #3
 8004c5e:	e7f5      	b.n	8004c4c <_dtoa_r+0x8c>
 8004c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c64:	2200      	movs	r2, #0
 8004c66:	2300      	movs	r3, #0
 8004c68:	4630      	mov	r0, r6
 8004c6a:	4639      	mov	r1, r7
 8004c6c:	f7fb fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004c70:	4682      	mov	sl, r0
 8004c72:	b160      	cbz	r0, 8004c8e <_dtoa_r+0xce>
 8004c74:	2301      	movs	r3, #1
 8004c76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8520 	beq.w	80056c2 <_dtoa_r+0xb02>
 8004c82:	4b98      	ldr	r3, [pc, #608]	; (8004ee4 <_dtoa_r+0x324>)
 8004c84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	9306      	str	r3, [sp, #24]
 8004c8c:	e7e0      	b.n	8004c50 <_dtoa_r+0x90>
 8004c8e:	ab12      	add	r3, sp, #72	; 0x48
 8004c90:	9301      	str	r3, [sp, #4]
 8004c92:	ab13      	add	r3, sp, #76	; 0x4c
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	4632      	mov	r2, r6
 8004c98:	463b      	mov	r3, r7
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f001 f9d8 	bl	8006050 <__d2b>
 8004ca0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004ca4:	4683      	mov	fp, r0
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	d07d      	beq.n	8004da6 <_dtoa_r+0x1e6>
 8004caa:	46b0      	mov	r8, r6
 8004cac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004cb0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004cb4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004cb8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004cbc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4b89      	ldr	r3, [pc, #548]	; (8004ee8 <_dtoa_r+0x328>)
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	f7fb fa4e 	bl	8000168 <__aeabi_dsub>
 8004ccc:	a37c      	add	r3, pc, #496	; (adr r3, 8004ec0 <_dtoa_r+0x300>)
 8004cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd2:	f7fb fc01 	bl	80004d8 <__aeabi_dmul>
 8004cd6:	a37c      	add	r3, pc, #496	; (adr r3, 8004ec8 <_dtoa_r+0x308>)
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	f7fb fa46 	bl	800016c <__adddf3>
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	460f      	mov	r7, r1
 8004ce6:	f7fb fb8d 	bl	8000404 <__aeabi_i2d>
 8004cea:	a379      	add	r3, pc, #484	; (adr r3, 8004ed0 <_dtoa_r+0x310>)
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f7fb fbf2 	bl	80004d8 <__aeabi_dmul>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	4639      	mov	r1, r7
 8004cfc:	f7fb fa36 	bl	800016c <__adddf3>
 8004d00:	4606      	mov	r6, r0
 8004d02:	460f      	mov	r7, r1
 8004d04:	f7fb fe98 	bl	8000a38 <__aeabi_d2iz>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4682      	mov	sl, r0
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4630      	mov	r0, r6
 8004d10:	4639      	mov	r1, r7
 8004d12:	f7fb fe53 	bl	80009bc <__aeabi_dcmplt>
 8004d16:	b148      	cbz	r0, 8004d2c <_dtoa_r+0x16c>
 8004d18:	4650      	mov	r0, sl
 8004d1a:	f7fb fb73 	bl	8000404 <__aeabi_i2d>
 8004d1e:	4632      	mov	r2, r6
 8004d20:	463b      	mov	r3, r7
 8004d22:	f7fb fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8004d26:	b908      	cbnz	r0, 8004d2c <_dtoa_r+0x16c>
 8004d28:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d2c:	f1ba 0f16 	cmp.w	sl, #22
 8004d30:	d85a      	bhi.n	8004de8 <_dtoa_r+0x228>
 8004d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d36:	496d      	ldr	r1, [pc, #436]	; (8004eec <_dtoa_r+0x32c>)
 8004d38:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004d3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004d40:	f7fb fe5a 	bl	80009f8 <__aeabi_dcmpgt>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	d051      	beq.n	8004dec <_dtoa_r+0x22c>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004d4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004d50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d52:	1b5d      	subs	r5, r3, r5
 8004d54:	1e6b      	subs	r3, r5, #1
 8004d56:	9307      	str	r3, [sp, #28]
 8004d58:	bf43      	ittte	mi
 8004d5a:	2300      	movmi	r3, #0
 8004d5c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004d60:	9307      	strmi	r3, [sp, #28]
 8004d62:	f04f 0900 	movpl.w	r9, #0
 8004d66:	f1ba 0f00 	cmp.w	sl, #0
 8004d6a:	db41      	blt.n	8004df0 <_dtoa_r+0x230>
 8004d6c:	9b07      	ldr	r3, [sp, #28]
 8004d6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004d72:	4453      	add	r3, sl
 8004d74:	9307      	str	r3, [sp, #28]
 8004d76:	2300      	movs	r3, #0
 8004d78:	9308      	str	r3, [sp, #32]
 8004d7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d7c:	2b09      	cmp	r3, #9
 8004d7e:	f200 808f 	bhi.w	8004ea0 <_dtoa_r+0x2e0>
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	bfc4      	itt	gt
 8004d86:	3b04      	subgt	r3, #4
 8004d88:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004d8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004d8c:	bfc8      	it	gt
 8004d8e:	2500      	movgt	r5, #0
 8004d90:	f1a3 0302 	sub.w	r3, r3, #2
 8004d94:	bfd8      	it	le
 8004d96:	2501      	movle	r5, #1
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	f200 808d 	bhi.w	8004eb8 <_dtoa_r+0x2f8>
 8004d9e:	e8df f003 	tbb	[pc, r3]
 8004da2:	7d7b      	.short	0x7d7b
 8004da4:	6f2f      	.short	0x6f2f
 8004da6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004daa:	441d      	add	r5, r3
 8004dac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004db0:	2820      	cmp	r0, #32
 8004db2:	dd13      	ble.n	8004ddc <_dtoa_r+0x21c>
 8004db4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004db8:	9b02      	ldr	r3, [sp, #8]
 8004dba:	fa08 f800 	lsl.w	r8, r8, r0
 8004dbe:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004dc2:	fa23 f000 	lsr.w	r0, r3, r0
 8004dc6:	ea48 0000 	orr.w	r0, r8, r0
 8004dca:	f7fb fb0b 	bl	80003e4 <__aeabi_ui2d>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	4680      	mov	r8, r0
 8004dd2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004dd6:	3d01      	subs	r5, #1
 8004dd8:	9310      	str	r3, [sp, #64]	; 0x40
 8004dda:	e771      	b.n	8004cc0 <_dtoa_r+0x100>
 8004ddc:	9b02      	ldr	r3, [sp, #8]
 8004dde:	f1c0 0020 	rsb	r0, r0, #32
 8004de2:	fa03 f000 	lsl.w	r0, r3, r0
 8004de6:	e7f0      	b.n	8004dca <_dtoa_r+0x20a>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e7b0      	b.n	8004d4e <_dtoa_r+0x18e>
 8004dec:	900d      	str	r0, [sp, #52]	; 0x34
 8004dee:	e7af      	b.n	8004d50 <_dtoa_r+0x190>
 8004df0:	f1ca 0300 	rsb	r3, sl, #0
 8004df4:	9308      	str	r3, [sp, #32]
 8004df6:	2300      	movs	r3, #0
 8004df8:	eba9 090a 	sub.w	r9, r9, sl
 8004dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8004dfe:	e7bc      	b.n	8004d7a <_dtoa_r+0x1ba>
 8004e00:	2301      	movs	r3, #1
 8004e02:	9309      	str	r3, [sp, #36]	; 0x24
 8004e04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dd74      	ble.n	8004ef4 <_dtoa_r+0x334>
 8004e0a:	4698      	mov	r8, r3
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e12:	6072      	str	r2, [r6, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	f102 0014 	add.w	r0, r2, #20
 8004e1a:	4298      	cmp	r0, r3
 8004e1c:	6871      	ldr	r1, [r6, #4]
 8004e1e:	d96e      	bls.n	8004efe <_dtoa_r+0x33e>
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 fe88 	bl	8005b36 <_Balloc>
 8004e26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e28:	6030      	str	r0, [r6, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b8 0f0e 	cmp.w	r8, #14
 8004e30:	9306      	str	r3, [sp, #24]
 8004e32:	f200 80ed 	bhi.w	8005010 <_dtoa_r+0x450>
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	f000 80ea 	beq.w	8005010 <_dtoa_r+0x450>
 8004e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e40:	f1ba 0f00 	cmp.w	sl, #0
 8004e44:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004e48:	dd77      	ble.n	8004f3a <_dtoa_r+0x37a>
 8004e4a:	4a28      	ldr	r2, [pc, #160]	; (8004eec <_dtoa_r+0x32c>)
 8004e4c:	f00a 030f 	and.w	r3, sl, #15
 8004e50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004e54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e58:	06f0      	lsls	r0, r6, #27
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004e62:	d568      	bpl.n	8004f36 <_dtoa_r+0x376>
 8004e64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <_dtoa_r+0x330>)
 8004e6a:	2503      	movs	r5, #3
 8004e6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e70:	f7fb fc5c 	bl	800072c <__aeabi_ddiv>
 8004e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e78:	f006 060f 	and.w	r6, r6, #15
 8004e7c:	4f1c      	ldr	r7, [pc, #112]	; (8004ef0 <_dtoa_r+0x330>)
 8004e7e:	e04f      	b.n	8004f20 <_dtoa_r+0x360>
 8004e80:	2301      	movs	r3, #1
 8004e82:	9309      	str	r3, [sp, #36]	; 0x24
 8004e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004e86:	4453      	add	r3, sl
 8004e88:	f103 0801 	add.w	r8, r3, #1
 8004e8c:	9304      	str	r3, [sp, #16]
 8004e8e:	4643      	mov	r3, r8
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bfb8      	it	lt
 8004e94:	2301      	movlt	r3, #1
 8004e96:	e7ba      	b.n	8004e0e <_dtoa_r+0x24e>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e7b2      	b.n	8004e02 <_dtoa_r+0x242>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	e7f0      	b.n	8004e82 <_dtoa_r+0x2c2>
 8004ea0:	2501      	movs	r5, #1
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9509      	str	r5, [sp, #36]	; 0x24
 8004ea6:	931e      	str	r3, [sp, #120]	; 0x78
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eac:	2200      	movs	r2, #0
 8004eae:	9304      	str	r3, [sp, #16]
 8004eb0:	4698      	mov	r8, r3
 8004eb2:	2312      	movs	r3, #18
 8004eb4:	921f      	str	r2, [sp, #124]	; 0x7c
 8004eb6:	e7aa      	b.n	8004e0e <_dtoa_r+0x24e>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	9309      	str	r3, [sp, #36]	; 0x24
 8004ebc:	e7f4      	b.n	8004ea8 <_dtoa_r+0x2e8>
 8004ebe:	bf00      	nop
 8004ec0:	636f4361 	.word	0x636f4361
 8004ec4:	3fd287a7 	.word	0x3fd287a7
 8004ec8:	8b60c8b3 	.word	0x8b60c8b3
 8004ecc:	3fc68a28 	.word	0x3fc68a28
 8004ed0:	509f79fb 	.word	0x509f79fb
 8004ed4:	3fd34413 	.word	0x3fd34413
 8004ed8:	7ff00000 	.word	0x7ff00000
 8004edc:	08007605 	.word	0x08007605
 8004ee0:	080075fc 	.word	0x080075fc
 8004ee4:	080075d9 	.word	0x080075d9
 8004ee8:	3ff80000 	.word	0x3ff80000
 8004eec:	08007698 	.word	0x08007698
 8004ef0:	08007670 	.word	0x08007670
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	4698      	mov	r8, r3
 8004efa:	461a      	mov	r2, r3
 8004efc:	e7da      	b.n	8004eb4 <_dtoa_r+0x2f4>
 8004efe:	3101      	adds	r1, #1
 8004f00:	6071      	str	r1, [r6, #4]
 8004f02:	0052      	lsls	r2, r2, #1
 8004f04:	e787      	b.n	8004e16 <_dtoa_r+0x256>
 8004f06:	07f1      	lsls	r1, r6, #31
 8004f08:	d508      	bpl.n	8004f1c <_dtoa_r+0x35c>
 8004f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f12:	f7fb fae1 	bl	80004d8 <__aeabi_dmul>
 8004f16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	1076      	asrs	r6, r6, #1
 8004f1e:	3708      	adds	r7, #8
 8004f20:	2e00      	cmp	r6, #0
 8004f22:	d1f0      	bne.n	8004f06 <_dtoa_r+0x346>
 8004f24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f2c:	f7fb fbfe 	bl	800072c <__aeabi_ddiv>
 8004f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f34:	e01b      	b.n	8004f6e <_dtoa_r+0x3ae>
 8004f36:	2502      	movs	r5, #2
 8004f38:	e7a0      	b.n	8004e7c <_dtoa_r+0x2bc>
 8004f3a:	f000 80a4 	beq.w	8005086 <_dtoa_r+0x4c6>
 8004f3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004f42:	f1ca 0600 	rsb	r6, sl, #0
 8004f46:	4ba0      	ldr	r3, [pc, #640]	; (80051c8 <_dtoa_r+0x608>)
 8004f48:	f006 020f 	and.w	r2, r6, #15
 8004f4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f7fb fac0 	bl	80004d8 <__aeabi_dmul>
 8004f58:	2502      	movs	r5, #2
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f60:	4f9a      	ldr	r7, [pc, #616]	; (80051cc <_dtoa_r+0x60c>)
 8004f62:	1136      	asrs	r6, r6, #4
 8004f64:	2e00      	cmp	r6, #0
 8004f66:	f040 8083 	bne.w	8005070 <_dtoa_r+0x4b0>
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e0      	bne.n	8004f30 <_dtoa_r+0x370>
 8004f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 808a 	beq.w	800508a <_dtoa_r+0x4ca>
 8004f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f82:	2200      	movs	r2, #0
 8004f84:	4b92      	ldr	r3, [pc, #584]	; (80051d0 <_dtoa_r+0x610>)
 8004f86:	f7fb fd19 	bl	80009bc <__aeabi_dcmplt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d07d      	beq.n	800508a <_dtoa_r+0x4ca>
 8004f8e:	f1b8 0f00 	cmp.w	r8, #0
 8004f92:	d07a      	beq.n	800508a <_dtoa_r+0x4ca>
 8004f94:	9b04      	ldr	r3, [sp, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	dd36      	ble.n	8005008 <_dtoa_r+0x448>
 8004f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	4b8c      	ldr	r3, [pc, #560]	; (80051d4 <_dtoa_r+0x614>)
 8004fa2:	f7fb fa99 	bl	80004d8 <__aeabi_dmul>
 8004fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004faa:	9e04      	ldr	r6, [sp, #16]
 8004fac:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8004fb0:	3501      	adds	r5, #1
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f7fb fa26 	bl	8000404 <__aeabi_i2d>
 8004fb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fbc:	f7fb fa8c 	bl	80004d8 <__aeabi_dmul>
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <_dtoa_r+0x618>)
 8004fc4:	f7fb f8d2 	bl	800016c <__adddf3>
 8004fc8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004fcc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d15c      	bne.n	8005090 <_dtoa_r+0x4d0>
 8004fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	4b7f      	ldr	r3, [pc, #508]	; (80051dc <_dtoa_r+0x61c>)
 8004fde:	f7fb f8c3 	bl	8000168 <__aeabi_dsub>
 8004fe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fea:	f7fb fd05 	bl	80009f8 <__aeabi_dcmpgt>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f040 8281 	bne.w	80054f6 <_dtoa_r+0x936>
 8004ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ffa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ffe:	f7fb fcdd 	bl	80009bc <__aeabi_dcmplt>
 8005002:	2800      	cmp	r0, #0
 8005004:	f040 8275 	bne.w	80054f2 <_dtoa_r+0x932>
 8005008:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800500c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005012:	2b00      	cmp	r3, #0
 8005014:	f2c0 814b 	blt.w	80052ae <_dtoa_r+0x6ee>
 8005018:	f1ba 0f0e 	cmp.w	sl, #14
 800501c:	f300 8147 	bgt.w	80052ae <_dtoa_r+0x6ee>
 8005020:	4b69      	ldr	r3, [pc, #420]	; (80051c8 <_dtoa_r+0x608>)
 8005022:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800502e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005030:	2b00      	cmp	r3, #0
 8005032:	f280 80d7 	bge.w	80051e4 <_dtoa_r+0x624>
 8005036:	f1b8 0f00 	cmp.w	r8, #0
 800503a:	f300 80d3 	bgt.w	80051e4 <_dtoa_r+0x624>
 800503e:	f040 8257 	bne.w	80054f0 <_dtoa_r+0x930>
 8005042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005046:	2200      	movs	r2, #0
 8005048:	4b64      	ldr	r3, [pc, #400]	; (80051dc <_dtoa_r+0x61c>)
 800504a:	f7fb fa45 	bl	80004d8 <__aeabi_dmul>
 800504e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005052:	f7fb fcc7 	bl	80009e4 <__aeabi_dcmpge>
 8005056:	4646      	mov	r6, r8
 8005058:	4647      	mov	r7, r8
 800505a:	2800      	cmp	r0, #0
 800505c:	f040 822d 	bne.w	80054ba <_dtoa_r+0x8fa>
 8005060:	9b06      	ldr	r3, [sp, #24]
 8005062:	9a06      	ldr	r2, [sp, #24]
 8005064:	1c5d      	adds	r5, r3, #1
 8005066:	2331      	movs	r3, #49	; 0x31
 8005068:	f10a 0a01 	add.w	sl, sl, #1
 800506c:	7013      	strb	r3, [r2, #0]
 800506e:	e228      	b.n	80054c2 <_dtoa_r+0x902>
 8005070:	07f2      	lsls	r2, r6, #31
 8005072:	d505      	bpl.n	8005080 <_dtoa_r+0x4c0>
 8005074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005078:	f7fb fa2e 	bl	80004d8 <__aeabi_dmul>
 800507c:	2301      	movs	r3, #1
 800507e:	3501      	adds	r5, #1
 8005080:	1076      	asrs	r6, r6, #1
 8005082:	3708      	adds	r7, #8
 8005084:	e76e      	b.n	8004f64 <_dtoa_r+0x3a4>
 8005086:	2502      	movs	r5, #2
 8005088:	e771      	b.n	8004f6e <_dtoa_r+0x3ae>
 800508a:	4657      	mov	r7, sl
 800508c:	4646      	mov	r6, r8
 800508e:	e790      	b.n	8004fb2 <_dtoa_r+0x3f2>
 8005090:	4b4d      	ldr	r3, [pc, #308]	; (80051c8 <_dtoa_r+0x608>)
 8005092:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005096:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800509a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	d048      	beq.n	8005132 <_dtoa_r+0x572>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	2000      	movs	r0, #0
 80050a6:	494e      	ldr	r1, [pc, #312]	; (80051e0 <_dtoa_r+0x620>)
 80050a8:	f7fb fb40 	bl	800072c <__aeabi_ddiv>
 80050ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050b0:	f7fb f85a 	bl	8000168 <__aeabi_dsub>
 80050b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050b8:	9d06      	ldr	r5, [sp, #24]
 80050ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050be:	f7fb fcbb 	bl	8000a38 <__aeabi_d2iz>
 80050c2:	9011      	str	r0, [sp, #68]	; 0x44
 80050c4:	f7fb f99e 	bl	8000404 <__aeabi_i2d>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d0:	f7fb f84a 	bl	8000168 <__aeabi_dsub>
 80050d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050da:	3330      	adds	r3, #48	; 0x30
 80050dc:	f805 3b01 	strb.w	r3, [r5], #1
 80050e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050e4:	f7fb fc6a 	bl	80009bc <__aeabi_dcmplt>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	d163      	bne.n	80051b4 <_dtoa_r+0x5f4>
 80050ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050f0:	2000      	movs	r0, #0
 80050f2:	4937      	ldr	r1, [pc, #220]	; (80051d0 <_dtoa_r+0x610>)
 80050f4:	f7fb f838 	bl	8000168 <__aeabi_dsub>
 80050f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050fc:	f7fb fc5e 	bl	80009bc <__aeabi_dcmplt>
 8005100:	2800      	cmp	r0, #0
 8005102:	f040 80b5 	bne.w	8005270 <_dtoa_r+0x6b0>
 8005106:	9b06      	ldr	r3, [sp, #24]
 8005108:	1aeb      	subs	r3, r5, r3
 800510a:	429e      	cmp	r6, r3
 800510c:	f77f af7c 	ble.w	8005008 <_dtoa_r+0x448>
 8005110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005114:	2200      	movs	r2, #0
 8005116:	4b2f      	ldr	r3, [pc, #188]	; (80051d4 <_dtoa_r+0x614>)
 8005118:	f7fb f9de 	bl	80004d8 <__aeabi_dmul>
 800511c:	2200      	movs	r2, #0
 800511e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005126:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <_dtoa_r+0x614>)
 8005128:	f7fb f9d6 	bl	80004d8 <__aeabi_dmul>
 800512c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005130:	e7c3      	b.n	80050ba <_dtoa_r+0x4fa>
 8005132:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005136:	f7fb f9cf 	bl	80004d8 <__aeabi_dmul>
 800513a:	9b06      	ldr	r3, [sp, #24]
 800513c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005140:	199d      	adds	r5, r3, r6
 8005142:	461e      	mov	r6, r3
 8005144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005148:	f7fb fc76 	bl	8000a38 <__aeabi_d2iz>
 800514c:	9011      	str	r0, [sp, #68]	; 0x44
 800514e:	f7fb f959 	bl	8000404 <__aeabi_i2d>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800515a:	f7fb f805 	bl	8000168 <__aeabi_dsub>
 800515e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005164:	3330      	adds	r3, #48	; 0x30
 8005166:	f806 3b01 	strb.w	r3, [r6], #1
 800516a:	42ae      	cmp	r6, r5
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	d124      	bne.n	80051bc <_dtoa_r+0x5fc>
 8005172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <_dtoa_r+0x620>)
 8005178:	f7fa fff8 	bl	800016c <__adddf3>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005184:	f7fb fc38 	bl	80009f8 <__aeabi_dcmpgt>
 8005188:	2800      	cmp	r0, #0
 800518a:	d171      	bne.n	8005270 <_dtoa_r+0x6b0>
 800518c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005190:	2000      	movs	r0, #0
 8005192:	4913      	ldr	r1, [pc, #76]	; (80051e0 <_dtoa_r+0x620>)
 8005194:	f7fa ffe8 	bl	8000168 <__aeabi_dsub>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a0:	f7fb fc0c 	bl	80009bc <__aeabi_dcmplt>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	f43f af2f 	beq.w	8005008 <_dtoa_r+0x448>
 80051aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051ae:	1e6a      	subs	r2, r5, #1
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d001      	beq.n	80051b8 <_dtoa_r+0x5f8>
 80051b4:	46ba      	mov	sl, r7
 80051b6:	e04a      	b.n	800524e <_dtoa_r+0x68e>
 80051b8:	4615      	mov	r5, r2
 80051ba:	e7f6      	b.n	80051aa <_dtoa_r+0x5ea>
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <_dtoa_r+0x614>)
 80051be:	f7fb f98b 	bl	80004d8 <__aeabi_dmul>
 80051c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051c6:	e7bd      	b.n	8005144 <_dtoa_r+0x584>
 80051c8:	08007698 	.word	0x08007698
 80051cc:	08007670 	.word	0x08007670
 80051d0:	3ff00000 	.word	0x3ff00000
 80051d4:	40240000 	.word	0x40240000
 80051d8:	401c0000 	.word	0x401c0000
 80051dc:	40140000 	.word	0x40140000
 80051e0:	3fe00000 	.word	0x3fe00000
 80051e4:	9d06      	ldr	r5, [sp, #24]
 80051e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80051ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ee:	4630      	mov	r0, r6
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fb fa9b 	bl	800072c <__aeabi_ddiv>
 80051f6:	f7fb fc1f 	bl	8000a38 <__aeabi_d2iz>
 80051fa:	4681      	mov	r9, r0
 80051fc:	f7fb f902 	bl	8000404 <__aeabi_i2d>
 8005200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005204:	f7fb f968 	bl	80004d8 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4630      	mov	r0, r6
 800520e:	4639      	mov	r1, r7
 8005210:	f7fa ffaa 	bl	8000168 <__aeabi_dsub>
 8005214:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005218:	f805 6b01 	strb.w	r6, [r5], #1
 800521c:	9e06      	ldr	r6, [sp, #24]
 800521e:	4602      	mov	r2, r0
 8005220:	1bae      	subs	r6, r5, r6
 8005222:	45b0      	cmp	r8, r6
 8005224:	460b      	mov	r3, r1
 8005226:	d135      	bne.n	8005294 <_dtoa_r+0x6d4>
 8005228:	f7fa ffa0 	bl	800016c <__adddf3>
 800522c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005230:	4606      	mov	r6, r0
 8005232:	460f      	mov	r7, r1
 8005234:	f7fb fbe0 	bl	80009f8 <__aeabi_dcmpgt>
 8005238:	b9c8      	cbnz	r0, 800526e <_dtoa_r+0x6ae>
 800523a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800523e:	4630      	mov	r0, r6
 8005240:	4639      	mov	r1, r7
 8005242:	f7fb fbb1 	bl	80009a8 <__aeabi_dcmpeq>
 8005246:	b110      	cbz	r0, 800524e <_dtoa_r+0x68e>
 8005248:	f019 0f01 	tst.w	r9, #1
 800524c:	d10f      	bne.n	800526e <_dtoa_r+0x6ae>
 800524e:	4659      	mov	r1, fp
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fca4 	bl	8005b9e <_Bfree>
 8005256:	2300      	movs	r3, #0
 8005258:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800525a:	702b      	strb	r3, [r5, #0]
 800525c:	f10a 0301 	add.w	r3, sl, #1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005264:	2b00      	cmp	r3, #0
 8005266:	f43f acf3 	beq.w	8004c50 <_dtoa_r+0x90>
 800526a:	601d      	str	r5, [r3, #0]
 800526c:	e4f0      	b.n	8004c50 <_dtoa_r+0x90>
 800526e:	4657      	mov	r7, sl
 8005270:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005274:	1e6b      	subs	r3, r5, #1
 8005276:	2a39      	cmp	r2, #57	; 0x39
 8005278:	d106      	bne.n	8005288 <_dtoa_r+0x6c8>
 800527a:	9a06      	ldr	r2, [sp, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d107      	bne.n	8005290 <_dtoa_r+0x6d0>
 8005280:	2330      	movs	r3, #48	; 0x30
 8005282:	7013      	strb	r3, [r2, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	3701      	adds	r7, #1
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	3201      	adds	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e791      	b.n	80051b4 <_dtoa_r+0x5f4>
 8005290:	461d      	mov	r5, r3
 8005292:	e7ed      	b.n	8005270 <_dtoa_r+0x6b0>
 8005294:	2200      	movs	r2, #0
 8005296:	4b99      	ldr	r3, [pc, #612]	; (80054fc <_dtoa_r+0x93c>)
 8005298:	f7fb f91e 	bl	80004d8 <__aeabi_dmul>
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	f7fb fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d09e      	beq.n	80051ea <_dtoa_r+0x62a>
 80052ac:	e7cf      	b.n	800524e <_dtoa_r+0x68e>
 80052ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	f000 8088 	beq.w	80053c6 <_dtoa_r+0x806>
 80052b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80052b8:	2a01      	cmp	r2, #1
 80052ba:	dc6d      	bgt.n	8005398 <_dtoa_r+0x7d8>
 80052bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d066      	beq.n	8005390 <_dtoa_r+0x7d0>
 80052c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052c6:	464d      	mov	r5, r9
 80052c8:	9e08      	ldr	r6, [sp, #32]
 80052ca:	9a07      	ldr	r2, [sp, #28]
 80052cc:	2101      	movs	r1, #1
 80052ce:	441a      	add	r2, r3
 80052d0:	4620      	mov	r0, r4
 80052d2:	4499      	add	r9, r3
 80052d4:	9207      	str	r2, [sp, #28]
 80052d6:	f000 fd02 	bl	8005cde <__i2b>
 80052da:	4607      	mov	r7, r0
 80052dc:	2d00      	cmp	r5, #0
 80052de:	dd0b      	ble.n	80052f8 <_dtoa_r+0x738>
 80052e0:	9b07      	ldr	r3, [sp, #28]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	dd08      	ble.n	80052f8 <_dtoa_r+0x738>
 80052e6:	42ab      	cmp	r3, r5
 80052e8:	bfa8      	it	ge
 80052ea:	462b      	movge	r3, r5
 80052ec:	9a07      	ldr	r2, [sp, #28]
 80052ee:	eba9 0903 	sub.w	r9, r9, r3
 80052f2:	1aed      	subs	r5, r5, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	9307      	str	r3, [sp, #28]
 80052f8:	9b08      	ldr	r3, [sp, #32]
 80052fa:	b1eb      	cbz	r3, 8005338 <_dtoa_r+0x778>
 80052fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d065      	beq.n	80053ce <_dtoa_r+0x80e>
 8005302:	b18e      	cbz	r6, 8005328 <_dtoa_r+0x768>
 8005304:	4639      	mov	r1, r7
 8005306:	4632      	mov	r2, r6
 8005308:	4620      	mov	r0, r4
 800530a:	f000 fd87 	bl	8005e1c <__pow5mult>
 800530e:	465a      	mov	r2, fp
 8005310:	4601      	mov	r1, r0
 8005312:	4607      	mov	r7, r0
 8005314:	4620      	mov	r0, r4
 8005316:	f000 fceb 	bl	8005cf0 <__multiply>
 800531a:	4659      	mov	r1, fp
 800531c:	900a      	str	r0, [sp, #40]	; 0x28
 800531e:	4620      	mov	r0, r4
 8005320:	f000 fc3d 	bl	8005b9e <_Bfree>
 8005324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005326:	469b      	mov	fp, r3
 8005328:	9b08      	ldr	r3, [sp, #32]
 800532a:	1b9a      	subs	r2, r3, r6
 800532c:	d004      	beq.n	8005338 <_dtoa_r+0x778>
 800532e:	4659      	mov	r1, fp
 8005330:	4620      	mov	r0, r4
 8005332:	f000 fd73 	bl	8005e1c <__pow5mult>
 8005336:	4683      	mov	fp, r0
 8005338:	2101      	movs	r1, #1
 800533a:	4620      	mov	r0, r4
 800533c:	f000 fccf 	bl	8005cde <__i2b>
 8005340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005342:	4606      	mov	r6, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 81c6 	beq.w	80056d6 <_dtoa_r+0xb16>
 800534a:	461a      	mov	r2, r3
 800534c:	4601      	mov	r1, r0
 800534e:	4620      	mov	r0, r4
 8005350:	f000 fd64 	bl	8005e1c <__pow5mult>
 8005354:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005356:	4606      	mov	r6, r0
 8005358:	2b01      	cmp	r3, #1
 800535a:	dc3e      	bgt.n	80053da <_dtoa_r+0x81a>
 800535c:	9b02      	ldr	r3, [sp, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d137      	bne.n	80053d2 <_dtoa_r+0x812>
 8005362:	9b03      	ldr	r3, [sp, #12]
 8005364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005368:	2b00      	cmp	r3, #0
 800536a:	d134      	bne.n	80053d6 <_dtoa_r+0x816>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005372:	0d1b      	lsrs	r3, r3, #20
 8005374:	051b      	lsls	r3, r3, #20
 8005376:	b12b      	cbz	r3, 8005384 <_dtoa_r+0x7c4>
 8005378:	9b07      	ldr	r3, [sp, #28]
 800537a:	f109 0901 	add.w	r9, r9, #1
 800537e:	3301      	adds	r3, #1
 8005380:	9307      	str	r3, [sp, #28]
 8005382:	2301      	movs	r3, #1
 8005384:	9308      	str	r3, [sp, #32]
 8005386:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d128      	bne.n	80053de <_dtoa_r+0x81e>
 800538c:	2001      	movs	r0, #1
 800538e:	e02e      	b.n	80053ee <_dtoa_r+0x82e>
 8005390:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005392:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005396:	e796      	b.n	80052c6 <_dtoa_r+0x706>
 8005398:	9b08      	ldr	r3, [sp, #32]
 800539a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800539e:	42b3      	cmp	r3, r6
 80053a0:	bfb7      	itett	lt
 80053a2:	9b08      	ldrlt	r3, [sp, #32]
 80053a4:	1b9e      	subge	r6, r3, r6
 80053a6:	1af2      	sublt	r2, r6, r3
 80053a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80053aa:	bfbf      	itttt	lt
 80053ac:	9608      	strlt	r6, [sp, #32]
 80053ae:	189b      	addlt	r3, r3, r2
 80053b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80053b2:	2600      	movlt	r6, #0
 80053b4:	f1b8 0f00 	cmp.w	r8, #0
 80053b8:	bfb9      	ittee	lt
 80053ba:	eba9 0508 	sublt.w	r5, r9, r8
 80053be:	2300      	movlt	r3, #0
 80053c0:	464d      	movge	r5, r9
 80053c2:	4643      	movge	r3, r8
 80053c4:	e781      	b.n	80052ca <_dtoa_r+0x70a>
 80053c6:	9e08      	ldr	r6, [sp, #32]
 80053c8:	464d      	mov	r5, r9
 80053ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80053cc:	e786      	b.n	80052dc <_dtoa_r+0x71c>
 80053ce:	9a08      	ldr	r2, [sp, #32]
 80053d0:	e7ad      	b.n	800532e <_dtoa_r+0x76e>
 80053d2:	2300      	movs	r3, #0
 80053d4:	e7d6      	b.n	8005384 <_dtoa_r+0x7c4>
 80053d6:	9b02      	ldr	r3, [sp, #8]
 80053d8:	e7d4      	b.n	8005384 <_dtoa_r+0x7c4>
 80053da:	2300      	movs	r3, #0
 80053dc:	9308      	str	r3, [sp, #32]
 80053de:	6933      	ldr	r3, [r6, #16]
 80053e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80053e4:	6918      	ldr	r0, [r3, #16]
 80053e6:	f000 fc2c 	bl	8005c42 <__hi0bits>
 80053ea:	f1c0 0020 	rsb	r0, r0, #32
 80053ee:	9b07      	ldr	r3, [sp, #28]
 80053f0:	4418      	add	r0, r3
 80053f2:	f010 001f 	ands.w	r0, r0, #31
 80053f6:	d047      	beq.n	8005488 <_dtoa_r+0x8c8>
 80053f8:	f1c0 0320 	rsb	r3, r0, #32
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	dd3b      	ble.n	8005478 <_dtoa_r+0x8b8>
 8005400:	9b07      	ldr	r3, [sp, #28]
 8005402:	f1c0 001c 	rsb	r0, r0, #28
 8005406:	4481      	add	r9, r0
 8005408:	4405      	add	r5, r0
 800540a:	4403      	add	r3, r0
 800540c:	9307      	str	r3, [sp, #28]
 800540e:	f1b9 0f00 	cmp.w	r9, #0
 8005412:	dd05      	ble.n	8005420 <_dtoa_r+0x860>
 8005414:	4659      	mov	r1, fp
 8005416:	464a      	mov	r2, r9
 8005418:	4620      	mov	r0, r4
 800541a:	f000 fd4d 	bl	8005eb8 <__lshift>
 800541e:	4683      	mov	fp, r0
 8005420:	9b07      	ldr	r3, [sp, #28]
 8005422:	2b00      	cmp	r3, #0
 8005424:	dd05      	ble.n	8005432 <_dtoa_r+0x872>
 8005426:	4631      	mov	r1, r6
 8005428:	461a      	mov	r2, r3
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fd44 	bl	8005eb8 <__lshift>
 8005430:	4606      	mov	r6, r0
 8005432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005434:	b353      	cbz	r3, 800548c <_dtoa_r+0x8cc>
 8005436:	4631      	mov	r1, r6
 8005438:	4658      	mov	r0, fp
 800543a:	f000 fd91 	bl	8005f60 <__mcmp>
 800543e:	2800      	cmp	r0, #0
 8005440:	da24      	bge.n	800548c <_dtoa_r+0x8cc>
 8005442:	2300      	movs	r3, #0
 8005444:	4659      	mov	r1, fp
 8005446:	220a      	movs	r2, #10
 8005448:	4620      	mov	r0, r4
 800544a:	f000 fbbf 	bl	8005bcc <__multadd>
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005454:	4683      	mov	fp, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8144 	beq.w	80056e4 <_dtoa_r+0xb24>
 800545c:	2300      	movs	r3, #0
 800545e:	4639      	mov	r1, r7
 8005460:	220a      	movs	r2, #10
 8005462:	4620      	mov	r0, r4
 8005464:	f000 fbb2 	bl	8005bcc <__multadd>
 8005468:	9b04      	ldr	r3, [sp, #16]
 800546a:	4607      	mov	r7, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	dc4d      	bgt.n	800550c <_dtoa_r+0x94c>
 8005470:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005472:	2b02      	cmp	r3, #2
 8005474:	dd4a      	ble.n	800550c <_dtoa_r+0x94c>
 8005476:	e011      	b.n	800549c <_dtoa_r+0x8dc>
 8005478:	d0c9      	beq.n	800540e <_dtoa_r+0x84e>
 800547a:	9a07      	ldr	r2, [sp, #28]
 800547c:	331c      	adds	r3, #28
 800547e:	441a      	add	r2, r3
 8005480:	4499      	add	r9, r3
 8005482:	441d      	add	r5, r3
 8005484:	4613      	mov	r3, r2
 8005486:	e7c1      	b.n	800540c <_dtoa_r+0x84c>
 8005488:	4603      	mov	r3, r0
 800548a:	e7f6      	b.n	800547a <_dtoa_r+0x8ba>
 800548c:	f1b8 0f00 	cmp.w	r8, #0
 8005490:	dc36      	bgt.n	8005500 <_dtoa_r+0x940>
 8005492:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005494:	2b02      	cmp	r3, #2
 8005496:	dd33      	ble.n	8005500 <_dtoa_r+0x940>
 8005498:	f8cd 8010 	str.w	r8, [sp, #16]
 800549c:	9b04      	ldr	r3, [sp, #16]
 800549e:	b963      	cbnz	r3, 80054ba <_dtoa_r+0x8fa>
 80054a0:	4631      	mov	r1, r6
 80054a2:	2205      	movs	r2, #5
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fb91 	bl	8005bcc <__multadd>
 80054aa:	4601      	mov	r1, r0
 80054ac:	4606      	mov	r6, r0
 80054ae:	4658      	mov	r0, fp
 80054b0:	f000 fd56 	bl	8005f60 <__mcmp>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	f73f add3 	bgt.w	8005060 <_dtoa_r+0x4a0>
 80054ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054bc:	9d06      	ldr	r5, [sp, #24]
 80054be:	ea6f 0a03 	mvn.w	sl, r3
 80054c2:	f04f 0900 	mov.w	r9, #0
 80054c6:	4631      	mov	r1, r6
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 fb68 	bl	8005b9e <_Bfree>
 80054ce:	2f00      	cmp	r7, #0
 80054d0:	f43f aebd 	beq.w	800524e <_dtoa_r+0x68e>
 80054d4:	f1b9 0f00 	cmp.w	r9, #0
 80054d8:	d005      	beq.n	80054e6 <_dtoa_r+0x926>
 80054da:	45b9      	cmp	r9, r7
 80054dc:	d003      	beq.n	80054e6 <_dtoa_r+0x926>
 80054de:	4649      	mov	r1, r9
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 fb5c 	bl	8005b9e <_Bfree>
 80054e6:	4639      	mov	r1, r7
 80054e8:	4620      	mov	r0, r4
 80054ea:	f000 fb58 	bl	8005b9e <_Bfree>
 80054ee:	e6ae      	b.n	800524e <_dtoa_r+0x68e>
 80054f0:	2600      	movs	r6, #0
 80054f2:	4637      	mov	r7, r6
 80054f4:	e7e1      	b.n	80054ba <_dtoa_r+0x8fa>
 80054f6:	46ba      	mov	sl, r7
 80054f8:	4637      	mov	r7, r6
 80054fa:	e5b1      	b.n	8005060 <_dtoa_r+0x4a0>
 80054fc:	40240000 	.word	0x40240000
 8005500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005502:	f8cd 8010 	str.w	r8, [sp, #16]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80f3 	beq.w	80056f2 <_dtoa_r+0xb32>
 800550c:	2d00      	cmp	r5, #0
 800550e:	dd05      	ble.n	800551c <_dtoa_r+0x95c>
 8005510:	4639      	mov	r1, r7
 8005512:	462a      	mov	r2, r5
 8005514:	4620      	mov	r0, r4
 8005516:	f000 fccf 	bl	8005eb8 <__lshift>
 800551a:	4607      	mov	r7, r0
 800551c:	9b08      	ldr	r3, [sp, #32]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04c      	beq.n	80055bc <_dtoa_r+0x9fc>
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4620      	mov	r0, r4
 8005526:	f000 fb06 	bl	8005b36 <_Balloc>
 800552a:	4605      	mov	r5, r0
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	f107 010c 	add.w	r1, r7, #12
 8005532:	3202      	adds	r2, #2
 8005534:	0092      	lsls	r2, r2, #2
 8005536:	300c      	adds	r0, #12
 8005538:	f000 faf0 	bl	8005b1c <memcpy>
 800553c:	2201      	movs	r2, #1
 800553e:	4629      	mov	r1, r5
 8005540:	4620      	mov	r0, r4
 8005542:	f000 fcb9 	bl	8005eb8 <__lshift>
 8005546:	46b9      	mov	r9, r7
 8005548:	4607      	mov	r7, r0
 800554a:	9b06      	ldr	r3, [sp, #24]
 800554c:	9307      	str	r3, [sp, #28]
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	9308      	str	r3, [sp, #32]
 8005556:	4631      	mov	r1, r6
 8005558:	4658      	mov	r0, fp
 800555a:	f7ff faa1 	bl	8004aa0 <quorem>
 800555e:	4649      	mov	r1, r9
 8005560:	4605      	mov	r5, r0
 8005562:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005566:	4658      	mov	r0, fp
 8005568:	f000 fcfa 	bl	8005f60 <__mcmp>
 800556c:	463a      	mov	r2, r7
 800556e:	9002      	str	r0, [sp, #8]
 8005570:	4631      	mov	r1, r6
 8005572:	4620      	mov	r0, r4
 8005574:	f000 fd0e 	bl	8005f94 <__mdiff>
 8005578:	68c3      	ldr	r3, [r0, #12]
 800557a:	4602      	mov	r2, r0
 800557c:	bb03      	cbnz	r3, 80055c0 <_dtoa_r+0xa00>
 800557e:	4601      	mov	r1, r0
 8005580:	9009      	str	r0, [sp, #36]	; 0x24
 8005582:	4658      	mov	r0, fp
 8005584:	f000 fcec 	bl	8005f60 <__mcmp>
 8005588:	4603      	mov	r3, r0
 800558a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800558c:	4611      	mov	r1, r2
 800558e:	4620      	mov	r0, r4
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	f000 fb04 	bl	8005b9e <_Bfree>
 8005596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005598:	b9a3      	cbnz	r3, 80055c4 <_dtoa_r+0xa04>
 800559a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800559c:	b992      	cbnz	r2, 80055c4 <_dtoa_r+0xa04>
 800559e:	9a08      	ldr	r2, [sp, #32]
 80055a0:	b982      	cbnz	r2, 80055c4 <_dtoa_r+0xa04>
 80055a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055a6:	d029      	beq.n	80055fc <_dtoa_r+0xa3c>
 80055a8:	9b02      	ldr	r3, [sp, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd01      	ble.n	80055b2 <_dtoa_r+0x9f2>
 80055ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80055b2:	9b07      	ldr	r3, [sp, #28]
 80055b4:	1c5d      	adds	r5, r3, #1
 80055b6:	f883 8000 	strb.w	r8, [r3]
 80055ba:	e784      	b.n	80054c6 <_dtoa_r+0x906>
 80055bc:	4638      	mov	r0, r7
 80055be:	e7c2      	b.n	8005546 <_dtoa_r+0x986>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e7e3      	b.n	800558c <_dtoa_r+0x9cc>
 80055c4:	9a02      	ldr	r2, [sp, #8]
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	db04      	blt.n	80055d4 <_dtoa_r+0xa14>
 80055ca:	d123      	bne.n	8005614 <_dtoa_r+0xa54>
 80055cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80055ce:	bb0a      	cbnz	r2, 8005614 <_dtoa_r+0xa54>
 80055d0:	9a08      	ldr	r2, [sp, #32]
 80055d2:	b9fa      	cbnz	r2, 8005614 <_dtoa_r+0xa54>
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	ddec      	ble.n	80055b2 <_dtoa_r+0x9f2>
 80055d8:	4659      	mov	r1, fp
 80055da:	2201      	movs	r2, #1
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 fc6b 	bl	8005eb8 <__lshift>
 80055e2:	4631      	mov	r1, r6
 80055e4:	4683      	mov	fp, r0
 80055e6:	f000 fcbb 	bl	8005f60 <__mcmp>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	dc03      	bgt.n	80055f6 <_dtoa_r+0xa36>
 80055ee:	d1e0      	bne.n	80055b2 <_dtoa_r+0x9f2>
 80055f0:	f018 0f01 	tst.w	r8, #1
 80055f4:	d0dd      	beq.n	80055b2 <_dtoa_r+0x9f2>
 80055f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80055fa:	d1d8      	bne.n	80055ae <_dtoa_r+0x9ee>
 80055fc:	9b07      	ldr	r3, [sp, #28]
 80055fe:	9a07      	ldr	r2, [sp, #28]
 8005600:	1c5d      	adds	r5, r3, #1
 8005602:	2339      	movs	r3, #57	; 0x39
 8005604:	7013      	strb	r3, [r2, #0]
 8005606:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800560a:	1e6a      	subs	r2, r5, #1
 800560c:	2b39      	cmp	r3, #57	; 0x39
 800560e:	d04d      	beq.n	80056ac <_dtoa_r+0xaec>
 8005610:	3301      	adds	r3, #1
 8005612:	e052      	b.n	80056ba <_dtoa_r+0xafa>
 8005614:	9a07      	ldr	r2, [sp, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f102 0501 	add.w	r5, r2, #1
 800561c:	dd06      	ble.n	800562c <_dtoa_r+0xa6c>
 800561e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005622:	d0eb      	beq.n	80055fc <_dtoa_r+0xa3c>
 8005624:	f108 0801 	add.w	r8, r8, #1
 8005628:	9b07      	ldr	r3, [sp, #28]
 800562a:	e7c4      	b.n	80055b6 <_dtoa_r+0x9f6>
 800562c:	9b06      	ldr	r3, [sp, #24]
 800562e:	9a04      	ldr	r2, [sp, #16]
 8005630:	1aeb      	subs	r3, r5, r3
 8005632:	4293      	cmp	r3, r2
 8005634:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005638:	d021      	beq.n	800567e <_dtoa_r+0xabe>
 800563a:	4659      	mov	r1, fp
 800563c:	2300      	movs	r3, #0
 800563e:	220a      	movs	r2, #10
 8005640:	4620      	mov	r0, r4
 8005642:	f000 fac3 	bl	8005bcc <__multadd>
 8005646:	45b9      	cmp	r9, r7
 8005648:	4683      	mov	fp, r0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	f04f 020a 	mov.w	r2, #10
 8005652:	4649      	mov	r1, r9
 8005654:	4620      	mov	r0, r4
 8005656:	d105      	bne.n	8005664 <_dtoa_r+0xaa4>
 8005658:	f000 fab8 	bl	8005bcc <__multadd>
 800565c:	4681      	mov	r9, r0
 800565e:	4607      	mov	r7, r0
 8005660:	9507      	str	r5, [sp, #28]
 8005662:	e778      	b.n	8005556 <_dtoa_r+0x996>
 8005664:	f000 fab2 	bl	8005bcc <__multadd>
 8005668:	4639      	mov	r1, r7
 800566a:	4681      	mov	r9, r0
 800566c:	2300      	movs	r3, #0
 800566e:	220a      	movs	r2, #10
 8005670:	4620      	mov	r0, r4
 8005672:	f000 faab 	bl	8005bcc <__multadd>
 8005676:	4607      	mov	r7, r0
 8005678:	e7f2      	b.n	8005660 <_dtoa_r+0xaa0>
 800567a:	f04f 0900 	mov.w	r9, #0
 800567e:	4659      	mov	r1, fp
 8005680:	2201      	movs	r2, #1
 8005682:	4620      	mov	r0, r4
 8005684:	f000 fc18 	bl	8005eb8 <__lshift>
 8005688:	4631      	mov	r1, r6
 800568a:	4683      	mov	fp, r0
 800568c:	f000 fc68 	bl	8005f60 <__mcmp>
 8005690:	2800      	cmp	r0, #0
 8005692:	dcb8      	bgt.n	8005606 <_dtoa_r+0xa46>
 8005694:	d102      	bne.n	800569c <_dtoa_r+0xadc>
 8005696:	f018 0f01 	tst.w	r8, #1
 800569a:	d1b4      	bne.n	8005606 <_dtoa_r+0xa46>
 800569c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80056a0:	1e6a      	subs	r2, r5, #1
 80056a2:	2b30      	cmp	r3, #48	; 0x30
 80056a4:	f47f af0f 	bne.w	80054c6 <_dtoa_r+0x906>
 80056a8:	4615      	mov	r5, r2
 80056aa:	e7f7      	b.n	800569c <_dtoa_r+0xadc>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d105      	bne.n	80056be <_dtoa_r+0xafe>
 80056b2:	2331      	movs	r3, #49	; 0x31
 80056b4:	9a06      	ldr	r2, [sp, #24]
 80056b6:	f10a 0a01 	add.w	sl, sl, #1
 80056ba:	7013      	strb	r3, [r2, #0]
 80056bc:	e703      	b.n	80054c6 <_dtoa_r+0x906>
 80056be:	4615      	mov	r5, r2
 80056c0:	e7a1      	b.n	8005606 <_dtoa_r+0xa46>
 80056c2:	4b17      	ldr	r3, [pc, #92]	; (8005720 <_dtoa_r+0xb60>)
 80056c4:	f7ff bae1 	b.w	8004c8a <_dtoa_r+0xca>
 80056c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f47f aabb 	bne.w	8004c46 <_dtoa_r+0x86>
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <_dtoa_r+0xb64>)
 80056d2:	f7ff bada 	b.w	8004c8a <_dtoa_r+0xca>
 80056d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056d8:	2b01      	cmp	r3, #1
 80056da:	f77f ae3f 	ble.w	800535c <_dtoa_r+0x79c>
 80056de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056e0:	9308      	str	r3, [sp, #32]
 80056e2:	e653      	b.n	800538c <_dtoa_r+0x7cc>
 80056e4:	9b04      	ldr	r3, [sp, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	dc03      	bgt.n	80056f2 <_dtoa_r+0xb32>
 80056ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	f73f aed5 	bgt.w	800549c <_dtoa_r+0x8dc>
 80056f2:	9d06      	ldr	r5, [sp, #24]
 80056f4:	4631      	mov	r1, r6
 80056f6:	4658      	mov	r0, fp
 80056f8:	f7ff f9d2 	bl	8004aa0 <quorem>
 80056fc:	9b06      	ldr	r3, [sp, #24]
 80056fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005702:	f805 8b01 	strb.w	r8, [r5], #1
 8005706:	9a04      	ldr	r2, [sp, #16]
 8005708:	1aeb      	subs	r3, r5, r3
 800570a:	429a      	cmp	r2, r3
 800570c:	ddb5      	ble.n	800567a <_dtoa_r+0xaba>
 800570e:	4659      	mov	r1, fp
 8005710:	2300      	movs	r3, #0
 8005712:	220a      	movs	r2, #10
 8005714:	4620      	mov	r0, r4
 8005716:	f000 fa59 	bl	8005bcc <__multadd>
 800571a:	4683      	mov	fp, r0
 800571c:	e7ea      	b.n	80056f4 <_dtoa_r+0xb34>
 800571e:	bf00      	nop
 8005720:	080075d8 	.word	0x080075d8
 8005724:	080075fc 	.word	0x080075fc

08005728 <__sflush_r>:
 8005728:	898a      	ldrh	r2, [r1, #12]
 800572a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572e:	4605      	mov	r5, r0
 8005730:	0710      	lsls	r0, r2, #28
 8005732:	460c      	mov	r4, r1
 8005734:	d458      	bmi.n	80057e8 <__sflush_r+0xc0>
 8005736:	684b      	ldr	r3, [r1, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	dc05      	bgt.n	8005748 <__sflush_r+0x20>
 800573c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800573e:	2b00      	cmp	r3, #0
 8005740:	dc02      	bgt.n	8005748 <__sflush_r+0x20>
 8005742:	2000      	movs	r0, #0
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800574a:	2e00      	cmp	r6, #0
 800574c:	d0f9      	beq.n	8005742 <__sflush_r+0x1a>
 800574e:	2300      	movs	r3, #0
 8005750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005754:	682f      	ldr	r7, [r5, #0]
 8005756:	6a21      	ldr	r1, [r4, #32]
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	d032      	beq.n	80057c2 <__sflush_r+0x9a>
 800575c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	075a      	lsls	r2, r3, #29
 8005762:	d505      	bpl.n	8005770 <__sflush_r+0x48>
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	1ac0      	subs	r0, r0, r3
 8005768:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800576a:	b10b      	cbz	r3, 8005770 <__sflush_r+0x48>
 800576c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800576e:	1ac0      	subs	r0, r0, r3
 8005770:	2300      	movs	r3, #0
 8005772:	4602      	mov	r2, r0
 8005774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005776:	6a21      	ldr	r1, [r4, #32]
 8005778:	4628      	mov	r0, r5
 800577a:	47b0      	blx	r6
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	d106      	bne.n	8005790 <__sflush_r+0x68>
 8005782:	6829      	ldr	r1, [r5, #0]
 8005784:	291d      	cmp	r1, #29
 8005786:	d848      	bhi.n	800581a <__sflush_r+0xf2>
 8005788:	4a29      	ldr	r2, [pc, #164]	; (8005830 <__sflush_r+0x108>)
 800578a:	40ca      	lsrs	r2, r1
 800578c:	07d6      	lsls	r6, r2, #31
 800578e:	d544      	bpl.n	800581a <__sflush_r+0xf2>
 8005790:	2200      	movs	r2, #0
 8005792:	6062      	str	r2, [r4, #4]
 8005794:	6922      	ldr	r2, [r4, #16]
 8005796:	04d9      	lsls	r1, r3, #19
 8005798:	6022      	str	r2, [r4, #0]
 800579a:	d504      	bpl.n	80057a6 <__sflush_r+0x7e>
 800579c:	1c42      	adds	r2, r0, #1
 800579e:	d101      	bne.n	80057a4 <__sflush_r+0x7c>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b903      	cbnz	r3, 80057a6 <__sflush_r+0x7e>
 80057a4:	6560      	str	r0, [r4, #84]	; 0x54
 80057a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057a8:	602f      	str	r7, [r5, #0]
 80057aa:	2900      	cmp	r1, #0
 80057ac:	d0c9      	beq.n	8005742 <__sflush_r+0x1a>
 80057ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057b2:	4299      	cmp	r1, r3
 80057b4:	d002      	beq.n	80057bc <__sflush_r+0x94>
 80057b6:	4628      	mov	r0, r5
 80057b8:	f7fe fb30 	bl	8003e1c <_free_r>
 80057bc:	2000      	movs	r0, #0
 80057be:	6360      	str	r0, [r4, #52]	; 0x34
 80057c0:	e7c0      	b.n	8005744 <__sflush_r+0x1c>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4628      	mov	r0, r5
 80057c6:	47b0      	blx	r6
 80057c8:	1c41      	adds	r1, r0, #1
 80057ca:	d1c8      	bne.n	800575e <__sflush_r+0x36>
 80057cc:	682b      	ldr	r3, [r5, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0c5      	beq.n	800575e <__sflush_r+0x36>
 80057d2:	2b1d      	cmp	r3, #29
 80057d4:	d001      	beq.n	80057da <__sflush_r+0xb2>
 80057d6:	2b16      	cmp	r3, #22
 80057d8:	d101      	bne.n	80057de <__sflush_r+0xb6>
 80057da:	602f      	str	r7, [r5, #0]
 80057dc:	e7b1      	b.n	8005742 <__sflush_r+0x1a>
 80057de:	89a3      	ldrh	r3, [r4, #12]
 80057e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057e4:	81a3      	strh	r3, [r4, #12]
 80057e6:	e7ad      	b.n	8005744 <__sflush_r+0x1c>
 80057e8:	690f      	ldr	r7, [r1, #16]
 80057ea:	2f00      	cmp	r7, #0
 80057ec:	d0a9      	beq.n	8005742 <__sflush_r+0x1a>
 80057ee:	0793      	lsls	r3, r2, #30
 80057f0:	bf18      	it	ne
 80057f2:	2300      	movne	r3, #0
 80057f4:	680e      	ldr	r6, [r1, #0]
 80057f6:	bf08      	it	eq
 80057f8:	694b      	ldreq	r3, [r1, #20]
 80057fa:	eba6 0807 	sub.w	r8, r6, r7
 80057fe:	600f      	str	r7, [r1, #0]
 8005800:	608b      	str	r3, [r1, #8]
 8005802:	f1b8 0f00 	cmp.w	r8, #0
 8005806:	dd9c      	ble.n	8005742 <__sflush_r+0x1a>
 8005808:	4643      	mov	r3, r8
 800580a:	463a      	mov	r2, r7
 800580c:	6a21      	ldr	r1, [r4, #32]
 800580e:	4628      	mov	r0, r5
 8005810:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005812:	47b0      	blx	r6
 8005814:	2800      	cmp	r0, #0
 8005816:	dc06      	bgt.n	8005826 <__sflush_r+0xfe>
 8005818:	89a3      	ldrh	r3, [r4, #12]
 800581a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005824:	e78e      	b.n	8005744 <__sflush_r+0x1c>
 8005826:	4407      	add	r7, r0
 8005828:	eba8 0800 	sub.w	r8, r8, r0
 800582c:	e7e9      	b.n	8005802 <__sflush_r+0xda>
 800582e:	bf00      	nop
 8005830:	20400001 	.word	0x20400001

08005834 <_fflush_r>:
 8005834:	b538      	push	{r3, r4, r5, lr}
 8005836:	690b      	ldr	r3, [r1, #16]
 8005838:	4605      	mov	r5, r0
 800583a:	460c      	mov	r4, r1
 800583c:	b1db      	cbz	r3, 8005876 <_fflush_r+0x42>
 800583e:	b118      	cbz	r0, 8005848 <_fflush_r+0x14>
 8005840:	6983      	ldr	r3, [r0, #24]
 8005842:	b90b      	cbnz	r3, 8005848 <_fflush_r+0x14>
 8005844:	f000 f860 	bl	8005908 <__sinit>
 8005848:	4b0c      	ldr	r3, [pc, #48]	; (800587c <_fflush_r+0x48>)
 800584a:	429c      	cmp	r4, r3
 800584c:	d109      	bne.n	8005862 <_fflush_r+0x2e>
 800584e:	686c      	ldr	r4, [r5, #4]
 8005850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005854:	b17b      	cbz	r3, 8005876 <_fflush_r+0x42>
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800585e:	f7ff bf63 	b.w	8005728 <__sflush_r>
 8005862:	4b07      	ldr	r3, [pc, #28]	; (8005880 <_fflush_r+0x4c>)
 8005864:	429c      	cmp	r4, r3
 8005866:	d101      	bne.n	800586c <_fflush_r+0x38>
 8005868:	68ac      	ldr	r4, [r5, #8]
 800586a:	e7f1      	b.n	8005850 <_fflush_r+0x1c>
 800586c:	4b05      	ldr	r3, [pc, #20]	; (8005884 <_fflush_r+0x50>)
 800586e:	429c      	cmp	r4, r3
 8005870:	bf08      	it	eq
 8005872:	68ec      	ldreq	r4, [r5, #12]
 8005874:	e7ec      	b.n	8005850 <_fflush_r+0x1c>
 8005876:	2000      	movs	r0, #0
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	0800762c 	.word	0x0800762c
 8005880:	0800764c 	.word	0x0800764c
 8005884:	0800760c 	.word	0x0800760c

08005888 <std>:
 8005888:	2300      	movs	r3, #0
 800588a:	b510      	push	{r4, lr}
 800588c:	4604      	mov	r4, r0
 800588e:	e9c0 3300 	strd	r3, r3, [r0]
 8005892:	6083      	str	r3, [r0, #8]
 8005894:	8181      	strh	r1, [r0, #12]
 8005896:	6643      	str	r3, [r0, #100]	; 0x64
 8005898:	81c2      	strh	r2, [r0, #14]
 800589a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800589e:	6183      	str	r3, [r0, #24]
 80058a0:	4619      	mov	r1, r3
 80058a2:	2208      	movs	r2, #8
 80058a4:	305c      	adds	r0, #92	; 0x5c
 80058a6:	f7fe fab1 	bl	8003e0c <memset>
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <std+0x38>)
 80058ac:	6224      	str	r4, [r4, #32]
 80058ae:	6263      	str	r3, [r4, #36]	; 0x24
 80058b0:	4b04      	ldr	r3, [pc, #16]	; (80058c4 <std+0x3c>)
 80058b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80058b4:	4b04      	ldr	r3, [pc, #16]	; (80058c8 <std+0x40>)
 80058b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <std+0x44>)
 80058ba:	6323      	str	r3, [r4, #48]	; 0x30
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	bf00      	nop
 80058c0:	08006385 	.word	0x08006385
 80058c4:	080063a7 	.word	0x080063a7
 80058c8:	080063df 	.word	0x080063df
 80058cc:	08006403 	.word	0x08006403

080058d0 <_cleanup_r>:
 80058d0:	4901      	ldr	r1, [pc, #4]	; (80058d8 <_cleanup_r+0x8>)
 80058d2:	f000 b885 	b.w	80059e0 <_fwalk_reent>
 80058d6:	bf00      	nop
 80058d8:	08005835 	.word	0x08005835

080058dc <__sfmoreglue>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	2568      	movs	r5, #104	; 0x68
 80058e0:	1e4a      	subs	r2, r1, #1
 80058e2:	4355      	muls	r5, r2
 80058e4:	460e      	mov	r6, r1
 80058e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058ea:	f7fe fae3 	bl	8003eb4 <_malloc_r>
 80058ee:	4604      	mov	r4, r0
 80058f0:	b140      	cbz	r0, 8005904 <__sfmoreglue+0x28>
 80058f2:	2100      	movs	r1, #0
 80058f4:	e9c0 1600 	strd	r1, r6, [r0]
 80058f8:	300c      	adds	r0, #12
 80058fa:	60a0      	str	r0, [r4, #8]
 80058fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005900:	f7fe fa84 	bl	8003e0c <memset>
 8005904:	4620      	mov	r0, r4
 8005906:	bd70      	pop	{r4, r5, r6, pc}

08005908 <__sinit>:
 8005908:	6983      	ldr	r3, [r0, #24]
 800590a:	b510      	push	{r4, lr}
 800590c:	4604      	mov	r4, r0
 800590e:	bb33      	cbnz	r3, 800595e <__sinit+0x56>
 8005910:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005914:	6503      	str	r3, [r0, #80]	; 0x50
 8005916:	4b12      	ldr	r3, [pc, #72]	; (8005960 <__sinit+0x58>)
 8005918:	4a12      	ldr	r2, [pc, #72]	; (8005964 <__sinit+0x5c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6282      	str	r2, [r0, #40]	; 0x28
 800591e:	4298      	cmp	r0, r3
 8005920:	bf04      	itt	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	6183      	streq	r3, [r0, #24]
 8005926:	f000 f81f 	bl	8005968 <__sfp>
 800592a:	6060      	str	r0, [r4, #4]
 800592c:	4620      	mov	r0, r4
 800592e:	f000 f81b 	bl	8005968 <__sfp>
 8005932:	60a0      	str	r0, [r4, #8]
 8005934:	4620      	mov	r0, r4
 8005936:	f000 f817 	bl	8005968 <__sfp>
 800593a:	2200      	movs	r2, #0
 800593c:	60e0      	str	r0, [r4, #12]
 800593e:	2104      	movs	r1, #4
 8005940:	6860      	ldr	r0, [r4, #4]
 8005942:	f7ff ffa1 	bl	8005888 <std>
 8005946:	2201      	movs	r2, #1
 8005948:	2109      	movs	r1, #9
 800594a:	68a0      	ldr	r0, [r4, #8]
 800594c:	f7ff ff9c 	bl	8005888 <std>
 8005950:	2202      	movs	r2, #2
 8005952:	2112      	movs	r1, #18
 8005954:	68e0      	ldr	r0, [r4, #12]
 8005956:	f7ff ff97 	bl	8005888 <std>
 800595a:	2301      	movs	r3, #1
 800595c:	61a3      	str	r3, [r4, #24]
 800595e:	bd10      	pop	{r4, pc}
 8005960:	080075c4 	.word	0x080075c4
 8005964:	080058d1 	.word	0x080058d1

08005968 <__sfp>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <__sfp+0x70>)
 800596c:	4607      	mov	r7, r0
 800596e:	681e      	ldr	r6, [r3, #0]
 8005970:	69b3      	ldr	r3, [r6, #24]
 8005972:	b913      	cbnz	r3, 800597a <__sfp+0x12>
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff ffc7 	bl	8005908 <__sinit>
 800597a:	3648      	adds	r6, #72	; 0x48
 800597c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005980:	3b01      	subs	r3, #1
 8005982:	d503      	bpl.n	800598c <__sfp+0x24>
 8005984:	6833      	ldr	r3, [r6, #0]
 8005986:	b133      	cbz	r3, 8005996 <__sfp+0x2e>
 8005988:	6836      	ldr	r6, [r6, #0]
 800598a:	e7f7      	b.n	800597c <__sfp+0x14>
 800598c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005990:	b16d      	cbz	r5, 80059ae <__sfp+0x46>
 8005992:	3468      	adds	r4, #104	; 0x68
 8005994:	e7f4      	b.n	8005980 <__sfp+0x18>
 8005996:	2104      	movs	r1, #4
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff ff9f 	bl	80058dc <__sfmoreglue>
 800599e:	6030      	str	r0, [r6, #0]
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d1f1      	bne.n	8005988 <__sfp+0x20>
 80059a4:	230c      	movs	r3, #12
 80059a6:	4604      	mov	r4, r0
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4620      	mov	r0, r4
 80059ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ae:	4b0b      	ldr	r3, [pc, #44]	; (80059dc <__sfp+0x74>)
 80059b0:	6665      	str	r5, [r4, #100]	; 0x64
 80059b2:	e9c4 5500 	strd	r5, r5, [r4]
 80059b6:	60a5      	str	r5, [r4, #8]
 80059b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80059bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80059c0:	2208      	movs	r2, #8
 80059c2:	4629      	mov	r1, r5
 80059c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059c8:	f7fe fa20 	bl	8003e0c <memset>
 80059cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059d4:	e7e9      	b.n	80059aa <__sfp+0x42>
 80059d6:	bf00      	nop
 80059d8:	080075c4 	.word	0x080075c4
 80059dc:	ffff0001 	.word	0xffff0001

080059e0 <_fwalk_reent>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4680      	mov	r8, r0
 80059e6:	4689      	mov	r9, r1
 80059e8:	2600      	movs	r6, #0
 80059ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059ee:	b914      	cbnz	r4, 80059f6 <_fwalk_reent+0x16>
 80059f0:	4630      	mov	r0, r6
 80059f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80059fa:	3f01      	subs	r7, #1
 80059fc:	d501      	bpl.n	8005a02 <_fwalk_reent+0x22>
 80059fe:	6824      	ldr	r4, [r4, #0]
 8005a00:	e7f5      	b.n	80059ee <_fwalk_reent+0xe>
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d907      	bls.n	8005a18 <_fwalk_reent+0x38>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <_fwalk_reent+0x38>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4640      	mov	r0, r8
 8005a14:	47c8      	blx	r9
 8005a16:	4306      	orrs	r6, r0
 8005a18:	3568      	adds	r5, #104	; 0x68
 8005a1a:	e7ee      	b.n	80059fa <_fwalk_reent+0x1a>

08005a1c <_localeconv_r>:
 8005a1c:	4b04      	ldr	r3, [pc, #16]	; (8005a30 <_localeconv_r+0x14>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6a18      	ldr	r0, [r3, #32]
 8005a22:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <_localeconv_r+0x18>)
 8005a24:	2800      	cmp	r0, #0
 8005a26:	bf08      	it	eq
 8005a28:	4618      	moveq	r0, r3
 8005a2a:	30f0      	adds	r0, #240	; 0xf0
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	2000054c 	.word	0x2000054c
 8005a34:	200005b0 	.word	0x200005b0

08005a38 <__swhatbuf_r>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a40:	b096      	sub	sp, #88	; 0x58
 8005a42:	2900      	cmp	r1, #0
 8005a44:	4614      	mov	r4, r2
 8005a46:	461d      	mov	r5, r3
 8005a48:	da07      	bge.n	8005a5a <__swhatbuf_r+0x22>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	89b3      	ldrh	r3, [r6, #12]
 8005a50:	061a      	lsls	r2, r3, #24
 8005a52:	d410      	bmi.n	8005a76 <__swhatbuf_r+0x3e>
 8005a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a58:	e00e      	b.n	8005a78 <__swhatbuf_r+0x40>
 8005a5a:	466a      	mov	r2, sp
 8005a5c:	f000 fcf8 	bl	8006450 <_fstat_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	dbf2      	blt.n	8005a4a <__swhatbuf_r+0x12>
 8005a64:	9a01      	ldr	r2, [sp, #4]
 8005a66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a6e:	425a      	negs	r2, r3
 8005a70:	415a      	adcs	r2, r3
 8005a72:	602a      	str	r2, [r5, #0]
 8005a74:	e7ee      	b.n	8005a54 <__swhatbuf_r+0x1c>
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	2000      	movs	r0, #0
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	b016      	add	sp, #88	; 0x58
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}

08005a80 <__smakebuf_r>:
 8005a80:	898b      	ldrh	r3, [r1, #12]
 8005a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a84:	079d      	lsls	r5, r3, #30
 8005a86:	4606      	mov	r6, r0
 8005a88:	460c      	mov	r4, r1
 8005a8a:	d507      	bpl.n	8005a9c <__smakebuf_r+0x1c>
 8005a8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	6123      	str	r3, [r4, #16]
 8005a94:	2301      	movs	r3, #1
 8005a96:	6163      	str	r3, [r4, #20]
 8005a98:	b002      	add	sp, #8
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	ab01      	add	r3, sp, #4
 8005a9e:	466a      	mov	r2, sp
 8005aa0:	f7ff ffca 	bl	8005a38 <__swhatbuf_r>
 8005aa4:	9900      	ldr	r1, [sp, #0]
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7fe fa03 	bl	8003eb4 <_malloc_r>
 8005aae:	b948      	cbnz	r0, 8005ac4 <__smakebuf_r+0x44>
 8005ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab4:	059a      	lsls	r2, r3, #22
 8005ab6:	d4ef      	bmi.n	8005a98 <__smakebuf_r+0x18>
 8005ab8:	f023 0303 	bic.w	r3, r3, #3
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	81a3      	strh	r3, [r4, #12]
 8005ac2:	e7e3      	b.n	8005a8c <__smakebuf_r+0xc>
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <__smakebuf_r+0x7c>)
 8005ac6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	6020      	str	r0, [r4, #0]
 8005acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ad0:	81a3      	strh	r3, [r4, #12]
 8005ad2:	9b00      	ldr	r3, [sp, #0]
 8005ad4:	6120      	str	r0, [r4, #16]
 8005ad6:	6163      	str	r3, [r4, #20]
 8005ad8:	9b01      	ldr	r3, [sp, #4]
 8005ada:	b15b      	cbz	r3, 8005af4 <__smakebuf_r+0x74>
 8005adc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae0:	4630      	mov	r0, r6
 8005ae2:	f000 fcc7 	bl	8006474 <_isatty_r>
 8005ae6:	b128      	cbz	r0, 8005af4 <__smakebuf_r+0x74>
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	f023 0303 	bic.w	r3, r3, #3
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	81a3      	strh	r3, [r4, #12]
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	431d      	orrs	r5, r3
 8005af8:	81a5      	strh	r5, [r4, #12]
 8005afa:	e7cd      	b.n	8005a98 <__smakebuf_r+0x18>
 8005afc:	080058d1 	.word	0x080058d1

08005b00 <memchr>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	b2c9      	uxtb	r1, r1
 8005b04:	4402      	add	r2, r0
 8005b06:	4290      	cmp	r0, r2
 8005b08:	4603      	mov	r3, r0
 8005b0a:	d101      	bne.n	8005b10 <memchr+0x10>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e003      	b.n	8005b18 <memchr+0x18>
 8005b10:	781c      	ldrb	r4, [r3, #0]
 8005b12:	3001      	adds	r0, #1
 8005b14:	428c      	cmp	r4, r1
 8005b16:	d1f6      	bne.n	8005b06 <memchr+0x6>
 8005b18:	4618      	mov	r0, r3
 8005b1a:	bd10      	pop	{r4, pc}

08005b1c <memcpy>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	1e43      	subs	r3, r0, #1
 8005b20:	440a      	add	r2, r1
 8005b22:	4291      	cmp	r1, r2
 8005b24:	d100      	bne.n	8005b28 <memcpy+0xc>
 8005b26:	bd10      	pop	{r4, pc}
 8005b28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b30:	e7f7      	b.n	8005b22 <memcpy+0x6>

08005b32 <__malloc_lock>:
 8005b32:	4770      	bx	lr

08005b34 <__malloc_unlock>:
 8005b34:	4770      	bx	lr

08005b36 <_Balloc>:
 8005b36:	b570      	push	{r4, r5, r6, lr}
 8005b38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460e      	mov	r6, r1
 8005b3e:	b93d      	cbnz	r5, 8005b50 <_Balloc+0x1a>
 8005b40:	2010      	movs	r0, #16
 8005b42:	f7fe f95b 	bl	8003dfc <malloc>
 8005b46:	6260      	str	r0, [r4, #36]	; 0x24
 8005b48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b4c:	6005      	str	r5, [r0, #0]
 8005b4e:	60c5      	str	r5, [r0, #12]
 8005b50:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b52:	68eb      	ldr	r3, [r5, #12]
 8005b54:	b183      	cbz	r3, 8005b78 <_Balloc+0x42>
 8005b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b5e:	b9b8      	cbnz	r0, 8005b90 <_Balloc+0x5a>
 8005b60:	2101      	movs	r1, #1
 8005b62:	fa01 f506 	lsl.w	r5, r1, r6
 8005b66:	1d6a      	adds	r2, r5, #5
 8005b68:	0092      	lsls	r2, r2, #2
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 fabf 	bl	80060ee <_calloc_r>
 8005b70:	b160      	cbz	r0, 8005b8c <_Balloc+0x56>
 8005b72:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b76:	e00e      	b.n	8005b96 <_Balloc+0x60>
 8005b78:	2221      	movs	r2, #33	; 0x21
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fab6 	bl	80060ee <_calloc_r>
 8005b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b84:	60e8      	str	r0, [r5, #12]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e4      	bne.n	8005b56 <_Balloc+0x20>
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	6802      	ldr	r2, [r0, #0]
 8005b92:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005b96:	2300      	movs	r3, #0
 8005b98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b9c:	e7f7      	b.n	8005b8e <_Balloc+0x58>

08005b9e <_Bfree>:
 8005b9e:	b570      	push	{r4, r5, r6, lr}
 8005ba0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460d      	mov	r5, r1
 8005ba6:	b93c      	cbnz	r4, 8005bb8 <_Bfree+0x1a>
 8005ba8:	2010      	movs	r0, #16
 8005baa:	f7fe f927 	bl	8003dfc <malloc>
 8005bae:	6270      	str	r0, [r6, #36]	; 0x24
 8005bb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bb4:	6004      	str	r4, [r0, #0]
 8005bb6:	60c4      	str	r4, [r0, #12]
 8005bb8:	b13d      	cbz	r5, 8005bca <_Bfree+0x2c>
 8005bba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005bbc:	686a      	ldr	r2, [r5, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bc4:	6029      	str	r1, [r5, #0]
 8005bc6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005bca:	bd70      	pop	{r4, r5, r6, pc}

08005bcc <__multadd>:
 8005bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd0:	461f      	mov	r7, r3
 8005bd2:	4606      	mov	r6, r0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	690d      	ldr	r5, [r1, #16]
 8005bda:	f101 0c14 	add.w	ip, r1, #20
 8005bde:	f8dc 0000 	ldr.w	r0, [ip]
 8005be2:	3301      	adds	r3, #1
 8005be4:	b281      	uxth	r1, r0
 8005be6:	fb02 7101 	mla	r1, r2, r1, r7
 8005bea:	0c00      	lsrs	r0, r0, #16
 8005bec:	0c0f      	lsrs	r7, r1, #16
 8005bee:	fb02 7000 	mla	r0, r2, r0, r7
 8005bf2:	b289      	uxth	r1, r1
 8005bf4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005bf8:	429d      	cmp	r5, r3
 8005bfa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005bfe:	f84c 1b04 	str.w	r1, [ip], #4
 8005c02:	dcec      	bgt.n	8005bde <__multadd+0x12>
 8005c04:	b1d7      	cbz	r7, 8005c3c <__multadd+0x70>
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	42ab      	cmp	r3, r5
 8005c0a:	dc12      	bgt.n	8005c32 <__multadd+0x66>
 8005c0c:	6861      	ldr	r1, [r4, #4]
 8005c0e:	4630      	mov	r0, r6
 8005c10:	3101      	adds	r1, #1
 8005c12:	f7ff ff90 	bl	8005b36 <_Balloc>
 8005c16:	4680      	mov	r8, r0
 8005c18:	6922      	ldr	r2, [r4, #16]
 8005c1a:	f104 010c 	add.w	r1, r4, #12
 8005c1e:	3202      	adds	r2, #2
 8005c20:	0092      	lsls	r2, r2, #2
 8005c22:	300c      	adds	r0, #12
 8005c24:	f7ff ff7a 	bl	8005b1c <memcpy>
 8005c28:	4621      	mov	r1, r4
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7ff ffb7 	bl	8005b9e <_Bfree>
 8005c30:	4644      	mov	r4, r8
 8005c32:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c36:	3501      	adds	r5, #1
 8005c38:	615f      	str	r7, [r3, #20]
 8005c3a:	6125      	str	r5, [r4, #16]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c42 <__hi0bits>:
 8005c42:	0c02      	lsrs	r2, r0, #16
 8005c44:	0412      	lsls	r2, r2, #16
 8005c46:	4603      	mov	r3, r0
 8005c48:	b9b2      	cbnz	r2, 8005c78 <__hi0bits+0x36>
 8005c4a:	0403      	lsls	r3, r0, #16
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c52:	bf04      	itt	eq
 8005c54:	021b      	lsleq	r3, r3, #8
 8005c56:	3008      	addeq	r0, #8
 8005c58:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c5c:	bf04      	itt	eq
 8005c5e:	011b      	lsleq	r3, r3, #4
 8005c60:	3004      	addeq	r0, #4
 8005c62:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c66:	bf04      	itt	eq
 8005c68:	009b      	lsleq	r3, r3, #2
 8005c6a:	3002      	addeq	r0, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	db06      	blt.n	8005c7e <__hi0bits+0x3c>
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	d503      	bpl.n	8005c7c <__hi0bits+0x3a>
 8005c74:	3001      	adds	r0, #1
 8005c76:	4770      	bx	lr
 8005c78:	2000      	movs	r0, #0
 8005c7a:	e7e8      	b.n	8005c4e <__hi0bits+0xc>
 8005c7c:	2020      	movs	r0, #32
 8005c7e:	4770      	bx	lr

08005c80 <__lo0bits>:
 8005c80:	6803      	ldr	r3, [r0, #0]
 8005c82:	4601      	mov	r1, r0
 8005c84:	f013 0207 	ands.w	r2, r3, #7
 8005c88:	d00b      	beq.n	8005ca2 <__lo0bits+0x22>
 8005c8a:	07da      	lsls	r2, r3, #31
 8005c8c:	d423      	bmi.n	8005cd6 <__lo0bits+0x56>
 8005c8e:	0798      	lsls	r0, r3, #30
 8005c90:	bf49      	itett	mi
 8005c92:	085b      	lsrmi	r3, r3, #1
 8005c94:	089b      	lsrpl	r3, r3, #2
 8005c96:	2001      	movmi	r0, #1
 8005c98:	600b      	strmi	r3, [r1, #0]
 8005c9a:	bf5c      	itt	pl
 8005c9c:	600b      	strpl	r3, [r1, #0]
 8005c9e:	2002      	movpl	r0, #2
 8005ca0:	4770      	bx	lr
 8005ca2:	b298      	uxth	r0, r3
 8005ca4:	b9a8      	cbnz	r0, 8005cd2 <__lo0bits+0x52>
 8005ca6:	2010      	movs	r0, #16
 8005ca8:	0c1b      	lsrs	r3, r3, #16
 8005caa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cae:	bf04      	itt	eq
 8005cb0:	0a1b      	lsreq	r3, r3, #8
 8005cb2:	3008      	addeq	r0, #8
 8005cb4:	071a      	lsls	r2, r3, #28
 8005cb6:	bf04      	itt	eq
 8005cb8:	091b      	lsreq	r3, r3, #4
 8005cba:	3004      	addeq	r0, #4
 8005cbc:	079a      	lsls	r2, r3, #30
 8005cbe:	bf04      	itt	eq
 8005cc0:	089b      	lsreq	r3, r3, #2
 8005cc2:	3002      	addeq	r0, #2
 8005cc4:	07da      	lsls	r2, r3, #31
 8005cc6:	d402      	bmi.n	8005cce <__lo0bits+0x4e>
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	d006      	beq.n	8005cda <__lo0bits+0x5a>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	600b      	str	r3, [r1, #0]
 8005cd0:	4770      	bx	lr
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	e7e9      	b.n	8005caa <__lo0bits+0x2a>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	4770      	bx	lr
 8005cda:	2020      	movs	r0, #32
 8005cdc:	4770      	bx	lr

08005cde <__i2b>:
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	f7ff ff27 	bl	8005b36 <_Balloc>
 8005ce8:	2201      	movs	r2, #1
 8005cea:	6144      	str	r4, [r0, #20]
 8005cec:	6102      	str	r2, [r0, #16]
 8005cee:	bd10      	pop	{r4, pc}

08005cf0 <__multiply>:
 8005cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	690a      	ldr	r2, [r1, #16]
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	4688      	mov	r8, r1
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	bfbe      	ittt	lt
 8005d00:	460b      	movlt	r3, r1
 8005d02:	46a0      	movlt	r8, r4
 8005d04:	461c      	movlt	r4, r3
 8005d06:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d0a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d12:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d16:	eb07 0609 	add.w	r6, r7, r9
 8005d1a:	42b3      	cmp	r3, r6
 8005d1c:	bfb8      	it	lt
 8005d1e:	3101      	addlt	r1, #1
 8005d20:	f7ff ff09 	bl	8005b36 <_Balloc>
 8005d24:	f100 0514 	add.w	r5, r0, #20
 8005d28:	462b      	mov	r3, r5
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005d30:	4573      	cmp	r3, lr
 8005d32:	d316      	bcc.n	8005d62 <__multiply+0x72>
 8005d34:	f104 0214 	add.w	r2, r4, #20
 8005d38:	f108 0114 	add.w	r1, r8, #20
 8005d3c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d40:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	9b00      	ldr	r3, [sp, #0]
 8005d48:	9201      	str	r2, [sp, #4]
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d80c      	bhi.n	8005d68 <__multiply+0x78>
 8005d4e:	2e00      	cmp	r6, #0
 8005d50:	dd03      	ble.n	8005d5a <__multiply+0x6a>
 8005d52:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d05d      	beq.n	8005e16 <__multiply+0x126>
 8005d5a:	6106      	str	r6, [r0, #16]
 8005d5c:	b003      	add	sp, #12
 8005d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d62:	f843 2b04 	str.w	r2, [r3], #4
 8005d66:	e7e3      	b.n	8005d30 <__multiply+0x40>
 8005d68:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d6c:	f1bb 0f00 	cmp.w	fp, #0
 8005d70:	d023      	beq.n	8005dba <__multiply+0xca>
 8005d72:	4689      	mov	r9, r1
 8005d74:	46ac      	mov	ip, r5
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d7e:	f8dc a000 	ldr.w	sl, [ip]
 8005d82:	b2a3      	uxth	r3, r4
 8005d84:	fa1f fa8a 	uxth.w	sl, sl
 8005d88:	fb0b a303 	mla	r3, fp, r3, sl
 8005d8c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d90:	f8dc 4000 	ldr.w	r4, [ip]
 8005d94:	4443      	add	r3, r8
 8005d96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d9a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d9e:	46e2      	mov	sl, ip
 8005da0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005daa:	454f      	cmp	r7, r9
 8005dac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005db0:	f84a 3b04 	str.w	r3, [sl], #4
 8005db4:	d82b      	bhi.n	8005e0e <__multiply+0x11e>
 8005db6:	f8cc 8004 	str.w	r8, [ip, #4]
 8005dba:	9b01      	ldr	r3, [sp, #4]
 8005dbc:	3204      	adds	r2, #4
 8005dbe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005dc2:	f1ba 0f00 	cmp.w	sl, #0
 8005dc6:	d020      	beq.n	8005e0a <__multiply+0x11a>
 8005dc8:	4689      	mov	r9, r1
 8005dca:	46a8      	mov	r8, r5
 8005dcc:	f04f 0b00 	mov.w	fp, #0
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	f8b9 c000 	ldrh.w	ip, [r9]
 8005dd6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	fb0a 440c 	mla	r4, sl, ip, r4
 8005de0:	46c4      	mov	ip, r8
 8005de2:	445c      	add	r4, fp
 8005de4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005de8:	f84c 3b04 	str.w	r3, [ip], #4
 8005dec:	f859 3b04 	ldr.w	r3, [r9], #4
 8005df0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	fb0a b303 	mla	r3, sl, r3, fp
 8005dfa:	454f      	cmp	r7, r9
 8005dfc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e00:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e04:	d805      	bhi.n	8005e12 <__multiply+0x122>
 8005e06:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e0a:	3504      	adds	r5, #4
 8005e0c:	e79b      	b.n	8005d46 <__multiply+0x56>
 8005e0e:	46d4      	mov	ip, sl
 8005e10:	e7b3      	b.n	8005d7a <__multiply+0x8a>
 8005e12:	46e0      	mov	r8, ip
 8005e14:	e7dd      	b.n	8005dd2 <__multiply+0xe2>
 8005e16:	3e01      	subs	r6, #1
 8005e18:	e799      	b.n	8005d4e <__multiply+0x5e>
	...

08005e1c <__pow5mult>:
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e20:	4615      	mov	r5, r2
 8005e22:	f012 0203 	ands.w	r2, r2, #3
 8005e26:	4606      	mov	r6, r0
 8005e28:	460f      	mov	r7, r1
 8005e2a:	d007      	beq.n	8005e3c <__pow5mult+0x20>
 8005e2c:	4c21      	ldr	r4, [pc, #132]	; (8005eb4 <__pow5mult+0x98>)
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	2300      	movs	r3, #0
 8005e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e36:	f7ff fec9 	bl	8005bcc <__multadd>
 8005e3a:	4607      	mov	r7, r0
 8005e3c:	10ad      	asrs	r5, r5, #2
 8005e3e:	d035      	beq.n	8005eac <__pow5mult+0x90>
 8005e40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e42:	b93c      	cbnz	r4, 8005e54 <__pow5mult+0x38>
 8005e44:	2010      	movs	r0, #16
 8005e46:	f7fd ffd9 	bl	8003dfc <malloc>
 8005e4a:	6270      	str	r0, [r6, #36]	; 0x24
 8005e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e50:	6004      	str	r4, [r0, #0]
 8005e52:	60c4      	str	r4, [r0, #12]
 8005e54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e5c:	b94c      	cbnz	r4, 8005e72 <__pow5mult+0x56>
 8005e5e:	f240 2171 	movw	r1, #625	; 0x271
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff3b 	bl	8005cde <__i2b>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e70:	6003      	str	r3, [r0, #0]
 8005e72:	f04f 0800 	mov.w	r8, #0
 8005e76:	07eb      	lsls	r3, r5, #31
 8005e78:	d50a      	bpl.n	8005e90 <__pow5mult+0x74>
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff ff36 	bl	8005cf0 <__multiply>
 8005e84:	4681      	mov	r9, r0
 8005e86:	4639      	mov	r1, r7
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f7ff fe88 	bl	8005b9e <_Bfree>
 8005e8e:	464f      	mov	r7, r9
 8005e90:	106d      	asrs	r5, r5, #1
 8005e92:	d00b      	beq.n	8005eac <__pow5mult+0x90>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	b938      	cbnz	r0, 8005ea8 <__pow5mult+0x8c>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7ff ff27 	bl	8005cf0 <__multiply>
 8005ea2:	6020      	str	r0, [r4, #0]
 8005ea4:	f8c0 8000 	str.w	r8, [r0]
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	e7e4      	b.n	8005e76 <__pow5mult+0x5a>
 8005eac:	4638      	mov	r0, r7
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	bf00      	nop
 8005eb4:	08007760 	.word	0x08007760

08005eb8 <__lshift>:
 8005eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	4616      	mov	r6, r2
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ec8:	eb0a 0903 	add.w	r9, sl, r3
 8005ecc:	6849      	ldr	r1, [r1, #4]
 8005ece:	68a3      	ldr	r3, [r4, #8]
 8005ed0:	f109 0501 	add.w	r5, r9, #1
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	db32      	blt.n	8005f3e <__lshift+0x86>
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff fe2c 	bl	8005b36 <_Balloc>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	f100 0114 	add.w	r1, r0, #20
 8005ee8:	4553      	cmp	r3, sl
 8005eea:	db2b      	blt.n	8005f44 <__lshift+0x8c>
 8005eec:	6920      	ldr	r0, [r4, #16]
 8005eee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ef2:	f104 0314 	add.w	r3, r4, #20
 8005ef6:	f016 021f 	ands.w	r2, r6, #31
 8005efa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005efe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f02:	d025      	beq.n	8005f50 <__lshift+0x98>
 8005f04:	2000      	movs	r0, #0
 8005f06:	f1c2 0e20 	rsb	lr, r2, #32
 8005f0a:	468a      	mov	sl, r1
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	4096      	lsls	r6, r2
 8005f10:	4330      	orrs	r0, r6
 8005f12:	f84a 0b04 	str.w	r0, [sl], #4
 8005f16:	f853 0b04 	ldr.w	r0, [r3], #4
 8005f1a:	459c      	cmp	ip, r3
 8005f1c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005f20:	d814      	bhi.n	8005f4c <__lshift+0x94>
 8005f22:	6048      	str	r0, [r1, #4]
 8005f24:	b108      	cbz	r0, 8005f2a <__lshift+0x72>
 8005f26:	f109 0502 	add.w	r5, r9, #2
 8005f2a:	3d01      	subs	r5, #1
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005f32:	4621      	mov	r1, r4
 8005f34:	f7ff fe33 	bl	8005b9e <_Bfree>
 8005f38:	4640      	mov	r0, r8
 8005f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3e:	3101      	adds	r1, #1
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	e7c7      	b.n	8005ed4 <__lshift+0x1c>
 8005f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	e7cd      	b.n	8005ee8 <__lshift+0x30>
 8005f4c:	4651      	mov	r1, sl
 8005f4e:	e7dc      	b.n	8005f0a <__lshift+0x52>
 8005f50:	3904      	subs	r1, #4
 8005f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f56:	459c      	cmp	ip, r3
 8005f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f5c:	d8f9      	bhi.n	8005f52 <__lshift+0x9a>
 8005f5e:	e7e4      	b.n	8005f2a <__lshift+0x72>

08005f60 <__mcmp>:
 8005f60:	6903      	ldr	r3, [r0, #16]
 8005f62:	690a      	ldr	r2, [r1, #16]
 8005f64:	b530      	push	{r4, r5, lr}
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	d10c      	bne.n	8005f84 <__mcmp+0x24>
 8005f6a:	0092      	lsls	r2, r2, #2
 8005f6c:	3014      	adds	r0, #20
 8005f6e:	3114      	adds	r1, #20
 8005f70:	1884      	adds	r4, r0, r2
 8005f72:	4411      	add	r1, r2
 8005f74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f7c:	4295      	cmp	r5, r2
 8005f7e:	d003      	beq.n	8005f88 <__mcmp+0x28>
 8005f80:	d305      	bcc.n	8005f8e <__mcmp+0x2e>
 8005f82:	2301      	movs	r3, #1
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd30      	pop	{r4, r5, pc}
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	d3f3      	bcc.n	8005f74 <__mcmp+0x14>
 8005f8c:	e7fa      	b.n	8005f84 <__mcmp+0x24>
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f92:	e7f7      	b.n	8005f84 <__mcmp+0x24>

08005f94 <__mdiff>:
 8005f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	460d      	mov	r5, r1
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	4614      	mov	r4, r2
 8005fa2:	f7ff ffdd 	bl	8005f60 <__mcmp>
 8005fa6:	1e06      	subs	r6, r0, #0
 8005fa8:	d108      	bne.n	8005fbc <__mdiff+0x28>
 8005faa:	4631      	mov	r1, r6
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7ff fdc2 	bl	8005b36 <_Balloc>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fbc:	bfa4      	itt	ge
 8005fbe:	4623      	movge	r3, r4
 8005fc0:	462c      	movge	r4, r5
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	6861      	ldr	r1, [r4, #4]
 8005fc6:	bfa6      	itte	ge
 8005fc8:	461d      	movge	r5, r3
 8005fca:	2600      	movge	r6, #0
 8005fcc:	2601      	movlt	r6, #1
 8005fce:	f7ff fdb2 	bl	8005b36 <_Balloc>
 8005fd2:	f04f 0e00 	mov.w	lr, #0
 8005fd6:	60c6      	str	r6, [r0, #12]
 8005fd8:	692b      	ldr	r3, [r5, #16]
 8005fda:	6926      	ldr	r6, [r4, #16]
 8005fdc:	f104 0214 	add.w	r2, r4, #20
 8005fe0:	f105 0914 	add.w	r9, r5, #20
 8005fe4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005fe8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005fec:	f100 0114 	add.w	r1, r0, #20
 8005ff0:	f852 ab04 	ldr.w	sl, [r2], #4
 8005ff4:	f859 5b04 	ldr.w	r5, [r9], #4
 8005ff8:	fa1f f38a 	uxth.w	r3, sl
 8005ffc:	4473      	add	r3, lr
 8005ffe:	b2ac      	uxth	r4, r5
 8006000:	1b1b      	subs	r3, r3, r4
 8006002:	0c2c      	lsrs	r4, r5, #16
 8006004:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006008:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800600c:	b29b      	uxth	r3, r3
 800600e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006012:	45c8      	cmp	r8, r9
 8006014:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006018:	4694      	mov	ip, r2
 800601a:	f841 4b04 	str.w	r4, [r1], #4
 800601e:	d8e7      	bhi.n	8005ff0 <__mdiff+0x5c>
 8006020:	45bc      	cmp	ip, r7
 8006022:	d304      	bcc.n	800602e <__mdiff+0x9a>
 8006024:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006028:	b183      	cbz	r3, 800604c <__mdiff+0xb8>
 800602a:	6106      	str	r6, [r0, #16]
 800602c:	e7c4      	b.n	8005fb8 <__mdiff+0x24>
 800602e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006032:	b2a2      	uxth	r2, r4
 8006034:	4472      	add	r2, lr
 8006036:	1413      	asrs	r3, r2, #16
 8006038:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800603c:	b292      	uxth	r2, r2
 800603e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006042:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006046:	f841 2b04 	str.w	r2, [r1], #4
 800604a:	e7e9      	b.n	8006020 <__mdiff+0x8c>
 800604c:	3e01      	subs	r6, #1
 800604e:	e7e9      	b.n	8006024 <__mdiff+0x90>

08006050 <__d2b>:
 8006050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006054:	461c      	mov	r4, r3
 8006056:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800605a:	2101      	movs	r1, #1
 800605c:	4690      	mov	r8, r2
 800605e:	f7ff fd6a 	bl	8005b36 <_Balloc>
 8006062:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006066:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800606a:	4607      	mov	r7, r0
 800606c:	bb34      	cbnz	r4, 80060bc <__d2b+0x6c>
 800606e:	9201      	str	r2, [sp, #4]
 8006070:	f1b8 0200 	subs.w	r2, r8, #0
 8006074:	d027      	beq.n	80060c6 <__d2b+0x76>
 8006076:	a802      	add	r0, sp, #8
 8006078:	f840 2d08 	str.w	r2, [r0, #-8]!
 800607c:	f7ff fe00 	bl	8005c80 <__lo0bits>
 8006080:	9900      	ldr	r1, [sp, #0]
 8006082:	b1f0      	cbz	r0, 80060c2 <__d2b+0x72>
 8006084:	9a01      	ldr	r2, [sp, #4]
 8006086:	f1c0 0320 	rsb	r3, r0, #32
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	430b      	orrs	r3, r1
 8006090:	40c2      	lsrs	r2, r0
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	9201      	str	r2, [sp, #4]
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf14      	ite	ne
 800609c:	2102      	movne	r1, #2
 800609e:	2101      	moveq	r1, #1
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	6139      	str	r1, [r7, #16]
 80060a4:	b1c4      	cbz	r4, 80060d8 <__d2b+0x88>
 80060a6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80060aa:	4404      	add	r4, r0
 80060ac:	6034      	str	r4, [r6, #0]
 80060ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060b2:	6028      	str	r0, [r5, #0]
 80060b4:	4638      	mov	r0, r7
 80060b6:	b002      	add	sp, #8
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060c0:	e7d5      	b.n	800606e <__d2b+0x1e>
 80060c2:	6179      	str	r1, [r7, #20]
 80060c4:	e7e7      	b.n	8006096 <__d2b+0x46>
 80060c6:	a801      	add	r0, sp, #4
 80060c8:	f7ff fdda 	bl	8005c80 <__lo0bits>
 80060cc:	2101      	movs	r1, #1
 80060ce:	9b01      	ldr	r3, [sp, #4]
 80060d0:	6139      	str	r1, [r7, #16]
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	3020      	adds	r0, #32
 80060d6:	e7e5      	b.n	80060a4 <__d2b+0x54>
 80060d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80060e0:	6030      	str	r0, [r6, #0]
 80060e2:	6918      	ldr	r0, [r3, #16]
 80060e4:	f7ff fdad 	bl	8005c42 <__hi0bits>
 80060e8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80060ec:	e7e1      	b.n	80060b2 <__d2b+0x62>

080060ee <_calloc_r>:
 80060ee:	b538      	push	{r3, r4, r5, lr}
 80060f0:	fb02 f401 	mul.w	r4, r2, r1
 80060f4:	4621      	mov	r1, r4
 80060f6:	f7fd fedd 	bl	8003eb4 <_malloc_r>
 80060fa:	4605      	mov	r5, r0
 80060fc:	b118      	cbz	r0, 8006106 <_calloc_r+0x18>
 80060fe:	4622      	mov	r2, r4
 8006100:	2100      	movs	r1, #0
 8006102:	f7fd fe83 	bl	8003e0c <memset>
 8006106:	4628      	mov	r0, r5
 8006108:	bd38      	pop	{r3, r4, r5, pc}

0800610a <__sfputc_r>:
 800610a:	6893      	ldr	r3, [r2, #8]
 800610c:	b410      	push	{r4}
 800610e:	3b01      	subs	r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	6093      	str	r3, [r2, #8]
 8006114:	da07      	bge.n	8006126 <__sfputc_r+0x1c>
 8006116:	6994      	ldr	r4, [r2, #24]
 8006118:	42a3      	cmp	r3, r4
 800611a:	db01      	blt.n	8006120 <__sfputc_r+0x16>
 800611c:	290a      	cmp	r1, #10
 800611e:	d102      	bne.n	8006126 <__sfputc_r+0x1c>
 8006120:	bc10      	pop	{r4}
 8006122:	f7fe bbfd 	b.w	8004920 <__swbuf_r>
 8006126:	6813      	ldr	r3, [r2, #0]
 8006128:	1c58      	adds	r0, r3, #1
 800612a:	6010      	str	r0, [r2, #0]
 800612c:	7019      	strb	r1, [r3, #0]
 800612e:	4608      	mov	r0, r1
 8006130:	bc10      	pop	{r4}
 8006132:	4770      	bx	lr

08006134 <__sfputs_r>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	4606      	mov	r6, r0
 8006138:	460f      	mov	r7, r1
 800613a:	4614      	mov	r4, r2
 800613c:	18d5      	adds	r5, r2, r3
 800613e:	42ac      	cmp	r4, r5
 8006140:	d101      	bne.n	8006146 <__sfputs_r+0x12>
 8006142:	2000      	movs	r0, #0
 8006144:	e007      	b.n	8006156 <__sfputs_r+0x22>
 8006146:	463a      	mov	r2, r7
 8006148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800614c:	4630      	mov	r0, r6
 800614e:	f7ff ffdc 	bl	800610a <__sfputc_r>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	d1f3      	bne.n	800613e <__sfputs_r+0xa>
 8006156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006158 <_vfiprintf_r>:
 8006158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615c:	460c      	mov	r4, r1
 800615e:	b09d      	sub	sp, #116	; 0x74
 8006160:	4617      	mov	r7, r2
 8006162:	461d      	mov	r5, r3
 8006164:	4606      	mov	r6, r0
 8006166:	b118      	cbz	r0, 8006170 <_vfiprintf_r+0x18>
 8006168:	6983      	ldr	r3, [r0, #24]
 800616a:	b90b      	cbnz	r3, 8006170 <_vfiprintf_r+0x18>
 800616c:	f7ff fbcc 	bl	8005908 <__sinit>
 8006170:	4b7c      	ldr	r3, [pc, #496]	; (8006364 <_vfiprintf_r+0x20c>)
 8006172:	429c      	cmp	r4, r3
 8006174:	d158      	bne.n	8006228 <_vfiprintf_r+0xd0>
 8006176:	6874      	ldr	r4, [r6, #4]
 8006178:	89a3      	ldrh	r3, [r4, #12]
 800617a:	0718      	lsls	r0, r3, #28
 800617c:	d55e      	bpl.n	800623c <_vfiprintf_r+0xe4>
 800617e:	6923      	ldr	r3, [r4, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d05b      	beq.n	800623c <_vfiprintf_r+0xe4>
 8006184:	2300      	movs	r3, #0
 8006186:	9309      	str	r3, [sp, #36]	; 0x24
 8006188:	2320      	movs	r3, #32
 800618a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800618e:	2330      	movs	r3, #48	; 0x30
 8006190:	f04f 0b01 	mov.w	fp, #1
 8006194:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006198:	9503      	str	r5, [sp, #12]
 800619a:	46b8      	mov	r8, r7
 800619c:	4645      	mov	r5, r8
 800619e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80061a2:	b10b      	cbz	r3, 80061a8 <_vfiprintf_r+0x50>
 80061a4:	2b25      	cmp	r3, #37	; 0x25
 80061a6:	d154      	bne.n	8006252 <_vfiprintf_r+0xfa>
 80061a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80061ac:	d00b      	beq.n	80061c6 <_vfiprintf_r+0x6e>
 80061ae:	4653      	mov	r3, sl
 80061b0:	463a      	mov	r2, r7
 80061b2:	4621      	mov	r1, r4
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7ff ffbd 	bl	8006134 <__sfputs_r>
 80061ba:	3001      	adds	r0, #1
 80061bc:	f000 80c2 	beq.w	8006344 <_vfiprintf_r+0x1ec>
 80061c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c2:	4453      	add	r3, sl
 80061c4:	9309      	str	r3, [sp, #36]	; 0x24
 80061c6:	f898 3000 	ldrb.w	r3, [r8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80ba 	beq.w	8006344 <_vfiprintf_r+0x1ec>
 80061d0:	2300      	movs	r3, #0
 80061d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	9307      	str	r3, [sp, #28]
 80061de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061e2:	931a      	str	r3, [sp, #104]	; 0x68
 80061e4:	46a8      	mov	r8, r5
 80061e6:	2205      	movs	r2, #5
 80061e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80061ec:	485e      	ldr	r0, [pc, #376]	; (8006368 <_vfiprintf_r+0x210>)
 80061ee:	f7ff fc87 	bl	8005b00 <memchr>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	bb78      	cbnz	r0, 8006256 <_vfiprintf_r+0xfe>
 80061f6:	06d9      	lsls	r1, r3, #27
 80061f8:	bf44      	itt	mi
 80061fa:	2220      	movmi	r2, #32
 80061fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006200:	071a      	lsls	r2, r3, #28
 8006202:	bf44      	itt	mi
 8006204:	222b      	movmi	r2, #43	; 0x2b
 8006206:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800620a:	782a      	ldrb	r2, [r5, #0]
 800620c:	2a2a      	cmp	r2, #42	; 0x2a
 800620e:	d02a      	beq.n	8006266 <_vfiprintf_r+0x10e>
 8006210:	46a8      	mov	r8, r5
 8006212:	2000      	movs	r0, #0
 8006214:	250a      	movs	r5, #10
 8006216:	9a07      	ldr	r2, [sp, #28]
 8006218:	4641      	mov	r1, r8
 800621a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800621e:	3b30      	subs	r3, #48	; 0x30
 8006220:	2b09      	cmp	r3, #9
 8006222:	d969      	bls.n	80062f8 <_vfiprintf_r+0x1a0>
 8006224:	b360      	cbz	r0, 8006280 <_vfiprintf_r+0x128>
 8006226:	e024      	b.n	8006272 <_vfiprintf_r+0x11a>
 8006228:	4b50      	ldr	r3, [pc, #320]	; (800636c <_vfiprintf_r+0x214>)
 800622a:	429c      	cmp	r4, r3
 800622c:	d101      	bne.n	8006232 <_vfiprintf_r+0xda>
 800622e:	68b4      	ldr	r4, [r6, #8]
 8006230:	e7a2      	b.n	8006178 <_vfiprintf_r+0x20>
 8006232:	4b4f      	ldr	r3, [pc, #316]	; (8006370 <_vfiprintf_r+0x218>)
 8006234:	429c      	cmp	r4, r3
 8006236:	bf08      	it	eq
 8006238:	68f4      	ldreq	r4, [r6, #12]
 800623a:	e79d      	b.n	8006178 <_vfiprintf_r+0x20>
 800623c:	4621      	mov	r1, r4
 800623e:	4630      	mov	r0, r6
 8006240:	f7fe fbc0 	bl	80049c4 <__swsetup_r>
 8006244:	2800      	cmp	r0, #0
 8006246:	d09d      	beq.n	8006184 <_vfiprintf_r+0x2c>
 8006248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800624c:	b01d      	add	sp, #116	; 0x74
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	46a8      	mov	r8, r5
 8006254:	e7a2      	b.n	800619c <_vfiprintf_r+0x44>
 8006256:	4a44      	ldr	r2, [pc, #272]	; (8006368 <_vfiprintf_r+0x210>)
 8006258:	4645      	mov	r5, r8
 800625a:	1a80      	subs	r0, r0, r2
 800625c:	fa0b f000 	lsl.w	r0, fp, r0
 8006260:	4318      	orrs	r0, r3
 8006262:	9004      	str	r0, [sp, #16]
 8006264:	e7be      	b.n	80061e4 <_vfiprintf_r+0x8c>
 8006266:	9a03      	ldr	r2, [sp, #12]
 8006268:	1d11      	adds	r1, r2, #4
 800626a:	6812      	ldr	r2, [r2, #0]
 800626c:	9103      	str	r1, [sp, #12]
 800626e:	2a00      	cmp	r2, #0
 8006270:	db01      	blt.n	8006276 <_vfiprintf_r+0x11e>
 8006272:	9207      	str	r2, [sp, #28]
 8006274:	e004      	b.n	8006280 <_vfiprintf_r+0x128>
 8006276:	4252      	negs	r2, r2
 8006278:	f043 0302 	orr.w	r3, r3, #2
 800627c:	9207      	str	r2, [sp, #28]
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	f898 3000 	ldrb.w	r3, [r8]
 8006284:	2b2e      	cmp	r3, #46	; 0x2e
 8006286:	d10e      	bne.n	80062a6 <_vfiprintf_r+0x14e>
 8006288:	f898 3001 	ldrb.w	r3, [r8, #1]
 800628c:	2b2a      	cmp	r3, #42	; 0x2a
 800628e:	d138      	bne.n	8006302 <_vfiprintf_r+0x1aa>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	f108 0802 	add.w	r8, r8, #2
 8006296:	1d1a      	adds	r2, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	9203      	str	r2, [sp, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	bfb8      	it	lt
 80062a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	4d33      	ldr	r5, [pc, #204]	; (8006374 <_vfiprintf_r+0x21c>)
 80062a8:	2203      	movs	r2, #3
 80062aa:	f898 1000 	ldrb.w	r1, [r8]
 80062ae:	4628      	mov	r0, r5
 80062b0:	f7ff fc26 	bl	8005b00 <memchr>
 80062b4:	b140      	cbz	r0, 80062c8 <_vfiprintf_r+0x170>
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	1b40      	subs	r0, r0, r5
 80062ba:	fa03 f000 	lsl.w	r0, r3, r0
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	f108 0801 	add.w	r8, r8, #1
 80062c4:	4303      	orrs	r3, r0
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	f898 1000 	ldrb.w	r1, [r8]
 80062cc:	2206      	movs	r2, #6
 80062ce:	482a      	ldr	r0, [pc, #168]	; (8006378 <_vfiprintf_r+0x220>)
 80062d0:	f108 0701 	add.w	r7, r8, #1
 80062d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d8:	f7ff fc12 	bl	8005b00 <memchr>
 80062dc:	2800      	cmp	r0, #0
 80062de:	d037      	beq.n	8006350 <_vfiprintf_r+0x1f8>
 80062e0:	4b26      	ldr	r3, [pc, #152]	; (800637c <_vfiprintf_r+0x224>)
 80062e2:	bb1b      	cbnz	r3, 800632c <_vfiprintf_r+0x1d4>
 80062e4:	9b03      	ldr	r3, [sp, #12]
 80062e6:	3307      	adds	r3, #7
 80062e8:	f023 0307 	bic.w	r3, r3, #7
 80062ec:	3308      	adds	r3, #8
 80062ee:	9303      	str	r3, [sp, #12]
 80062f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f2:	444b      	add	r3, r9
 80062f4:	9309      	str	r3, [sp, #36]	; 0x24
 80062f6:	e750      	b.n	800619a <_vfiprintf_r+0x42>
 80062f8:	fb05 3202 	mla	r2, r5, r2, r3
 80062fc:	2001      	movs	r0, #1
 80062fe:	4688      	mov	r8, r1
 8006300:	e78a      	b.n	8006218 <_vfiprintf_r+0xc0>
 8006302:	2300      	movs	r3, #0
 8006304:	250a      	movs	r5, #10
 8006306:	4619      	mov	r1, r3
 8006308:	f108 0801 	add.w	r8, r8, #1
 800630c:	9305      	str	r3, [sp, #20]
 800630e:	4640      	mov	r0, r8
 8006310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006314:	3a30      	subs	r2, #48	; 0x30
 8006316:	2a09      	cmp	r2, #9
 8006318:	d903      	bls.n	8006322 <_vfiprintf_r+0x1ca>
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0c3      	beq.n	80062a6 <_vfiprintf_r+0x14e>
 800631e:	9105      	str	r1, [sp, #20]
 8006320:	e7c1      	b.n	80062a6 <_vfiprintf_r+0x14e>
 8006322:	fb05 2101 	mla	r1, r5, r1, r2
 8006326:	2301      	movs	r3, #1
 8006328:	4680      	mov	r8, r0
 800632a:	e7f0      	b.n	800630e <_vfiprintf_r+0x1b6>
 800632c:	ab03      	add	r3, sp, #12
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	4622      	mov	r2, r4
 8006332:	4b13      	ldr	r3, [pc, #76]	; (8006380 <_vfiprintf_r+0x228>)
 8006334:	a904      	add	r1, sp, #16
 8006336:	4630      	mov	r0, r6
 8006338:	f7fd fea8 	bl	800408c <_printf_float>
 800633c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006340:	4681      	mov	r9, r0
 8006342:	d1d5      	bne.n	80062f0 <_vfiprintf_r+0x198>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	065b      	lsls	r3, r3, #25
 8006348:	f53f af7e 	bmi.w	8006248 <_vfiprintf_r+0xf0>
 800634c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634e:	e77d      	b.n	800624c <_vfiprintf_r+0xf4>
 8006350:	ab03      	add	r3, sp, #12
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	4622      	mov	r2, r4
 8006356:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <_vfiprintf_r+0x228>)
 8006358:	a904      	add	r1, sp, #16
 800635a:	4630      	mov	r0, r6
 800635c:	f7fe f942 	bl	80045e4 <_printf_i>
 8006360:	e7ec      	b.n	800633c <_vfiprintf_r+0x1e4>
 8006362:	bf00      	nop
 8006364:	0800762c 	.word	0x0800762c
 8006368:	0800776c 	.word	0x0800776c
 800636c:	0800764c 	.word	0x0800764c
 8006370:	0800760c 	.word	0x0800760c
 8006374:	08007772 	.word	0x08007772
 8006378:	08007776 	.word	0x08007776
 800637c:	0800408d 	.word	0x0800408d
 8006380:	08006135 	.word	0x08006135

08006384 <__sread>:
 8006384:	b510      	push	{r4, lr}
 8006386:	460c      	mov	r4, r1
 8006388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800638c:	f000 f8a6 	bl	80064dc <_read_r>
 8006390:	2800      	cmp	r0, #0
 8006392:	bfab      	itete	ge
 8006394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006396:	89a3      	ldrhlt	r3, [r4, #12]
 8006398:	181b      	addge	r3, r3, r0
 800639a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800639e:	bfac      	ite	ge
 80063a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80063a2:	81a3      	strhlt	r3, [r4, #12]
 80063a4:	bd10      	pop	{r4, pc}

080063a6 <__swrite>:
 80063a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063aa:	461f      	mov	r7, r3
 80063ac:	898b      	ldrh	r3, [r1, #12]
 80063ae:	4605      	mov	r5, r0
 80063b0:	05db      	lsls	r3, r3, #23
 80063b2:	460c      	mov	r4, r1
 80063b4:	4616      	mov	r6, r2
 80063b6:	d505      	bpl.n	80063c4 <__swrite+0x1e>
 80063b8:	2302      	movs	r3, #2
 80063ba:	2200      	movs	r2, #0
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	f000 f868 	bl	8006494 <_lseek_r>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	4632      	mov	r2, r6
 80063c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d2:	463b      	mov	r3, r7
 80063d4:	4628      	mov	r0, r5
 80063d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	f000 b817 	b.w	800640c <_write_r>

080063de <__sseek>:
 80063de:	b510      	push	{r4, lr}
 80063e0:	460c      	mov	r4, r1
 80063e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e6:	f000 f855 	bl	8006494 <_lseek_r>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	bf15      	itete	ne
 80063f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80063f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063fa:	81a3      	strheq	r3, [r4, #12]
 80063fc:	bf18      	it	ne
 80063fe:	81a3      	strhne	r3, [r4, #12]
 8006400:	bd10      	pop	{r4, pc}

08006402 <__sclose>:
 8006402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006406:	f000 b813 	b.w	8006430 <_close_r>
	...

0800640c <_write_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
 8006410:	4608      	mov	r0, r1
 8006412:	4611      	mov	r1, r2
 8006414:	2200      	movs	r2, #0
 8006416:	4c05      	ldr	r4, [pc, #20]	; (800642c <_write_r+0x20>)
 8006418:	6022      	str	r2, [r4, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f7fb fb1c 	bl	8001a58 <_write>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_write_r+0x1e>
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	b103      	cbz	r3, 800642a <_write_r+0x1e>
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	20000a84 	.word	0x20000a84

08006430 <_close_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	2300      	movs	r3, #0
 8006434:	4c05      	ldr	r4, [pc, #20]	; (800644c <_close_r+0x1c>)
 8006436:	4605      	mov	r5, r0
 8006438:	4608      	mov	r0, r1
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	f7fc f8d5 	bl	80025ea <_close>
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	d102      	bne.n	800644a <_close_r+0x1a>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	b103      	cbz	r3, 800644a <_close_r+0x1a>
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	bd38      	pop	{r3, r4, r5, pc}
 800644c:	20000a84 	.word	0x20000a84

08006450 <_fstat_r>:
 8006450:	b538      	push	{r3, r4, r5, lr}
 8006452:	2300      	movs	r3, #0
 8006454:	4c06      	ldr	r4, [pc, #24]	; (8006470 <_fstat_r+0x20>)
 8006456:	4605      	mov	r5, r0
 8006458:	4608      	mov	r0, r1
 800645a:	4611      	mov	r1, r2
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	f7fc f8cf 	bl	8002600 <_fstat>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d102      	bne.n	800646c <_fstat_r+0x1c>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	b103      	cbz	r3, 800646c <_fstat_r+0x1c>
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	bd38      	pop	{r3, r4, r5, pc}
 800646e:	bf00      	nop
 8006470:	20000a84 	.word	0x20000a84

08006474 <_isatty_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	2300      	movs	r3, #0
 8006478:	4c05      	ldr	r4, [pc, #20]	; (8006490 <_isatty_r+0x1c>)
 800647a:	4605      	mov	r5, r0
 800647c:	4608      	mov	r0, r1
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	f7fc f8cd 	bl	800261e <_isatty>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	d102      	bne.n	800648e <_isatty_r+0x1a>
 8006488:	6823      	ldr	r3, [r4, #0]
 800648a:	b103      	cbz	r3, 800648e <_isatty_r+0x1a>
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	bd38      	pop	{r3, r4, r5, pc}
 8006490:	20000a84 	.word	0x20000a84

08006494 <_lseek_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4605      	mov	r5, r0
 8006498:	4608      	mov	r0, r1
 800649a:	4611      	mov	r1, r2
 800649c:	2200      	movs	r2, #0
 800649e:	4c05      	ldr	r4, [pc, #20]	; (80064b4 <_lseek_r+0x20>)
 80064a0:	6022      	str	r2, [r4, #0]
 80064a2:	461a      	mov	r2, r3
 80064a4:	f7fc f8c5 	bl	8002632 <_lseek>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_lseek_r+0x1e>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_lseek_r+0x1e>
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	20000a84 	.word	0x20000a84

080064b8 <__ascii_mbtowc>:
 80064b8:	b082      	sub	sp, #8
 80064ba:	b901      	cbnz	r1, 80064be <__ascii_mbtowc+0x6>
 80064bc:	a901      	add	r1, sp, #4
 80064be:	b142      	cbz	r2, 80064d2 <__ascii_mbtowc+0x1a>
 80064c0:	b14b      	cbz	r3, 80064d6 <__ascii_mbtowc+0x1e>
 80064c2:	7813      	ldrb	r3, [r2, #0]
 80064c4:	600b      	str	r3, [r1, #0]
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	1c10      	adds	r0, r2, #0
 80064ca:	bf18      	it	ne
 80064cc:	2001      	movne	r0, #1
 80064ce:	b002      	add	sp, #8
 80064d0:	4770      	bx	lr
 80064d2:	4610      	mov	r0, r2
 80064d4:	e7fb      	b.n	80064ce <__ascii_mbtowc+0x16>
 80064d6:	f06f 0001 	mvn.w	r0, #1
 80064da:	e7f8      	b.n	80064ce <__ascii_mbtowc+0x16>

080064dc <_read_r>:
 80064dc:	b538      	push	{r3, r4, r5, lr}
 80064de:	4605      	mov	r5, r0
 80064e0:	4608      	mov	r0, r1
 80064e2:	4611      	mov	r1, r2
 80064e4:	2200      	movs	r2, #0
 80064e6:	4c05      	ldr	r4, [pc, #20]	; (80064fc <_read_r+0x20>)
 80064e8:	6022      	str	r2, [r4, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f7fc f860 	bl	80025b0 <_read>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_read_r+0x1e>
 80064f4:	6823      	ldr	r3, [r4, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_read_r+0x1e>
 80064f8:	602b      	str	r3, [r5, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	20000a84 	.word	0x20000a84

08006500 <__ascii_wctomb>:
 8006500:	b149      	cbz	r1, 8006516 <__ascii_wctomb+0x16>
 8006502:	2aff      	cmp	r2, #255	; 0xff
 8006504:	bf8b      	itete	hi
 8006506:	238a      	movhi	r3, #138	; 0x8a
 8006508:	700a      	strbls	r2, [r1, #0]
 800650a:	6003      	strhi	r3, [r0, #0]
 800650c:	2001      	movls	r0, #1
 800650e:	bf88      	it	hi
 8006510:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006514:	4770      	bx	lr
 8006516:	4608      	mov	r0, r1
 8006518:	4770      	bx	lr
	...

0800651c <pow>:
 800651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006520:	b08f      	sub	sp, #60	; 0x3c
 8006522:	461d      	mov	r5, r3
 8006524:	4680      	mov	r8, r0
 8006526:	4689      	mov	r9, r1
 8006528:	4614      	mov	r4, r2
 800652a:	f000 f955 	bl	80067d8 <__ieee754_pow>
 800652e:	4fa1      	ldr	r7, [pc, #644]	; (80067b4 <pow+0x298>)
 8006530:	e9cd 0100 	strd	r0, r1, [sp]
 8006534:	f997 3000 	ldrsb.w	r3, [r7]
 8006538:	463e      	mov	r6, r7
 800653a:	9302      	str	r3, [sp, #8]
 800653c:	3301      	adds	r3, #1
 800653e:	d05f      	beq.n	8006600 <pow+0xe4>
 8006540:	4622      	mov	r2, r4
 8006542:	462b      	mov	r3, r5
 8006544:	4620      	mov	r0, r4
 8006546:	4629      	mov	r1, r5
 8006548:	f7fa fa60 	bl	8000a0c <__aeabi_dcmpun>
 800654c:	4682      	mov	sl, r0
 800654e:	2800      	cmp	r0, #0
 8006550:	d156      	bne.n	8006600 <pow+0xe4>
 8006552:	4642      	mov	r2, r8
 8006554:	464b      	mov	r3, r9
 8006556:	4640      	mov	r0, r8
 8006558:	4649      	mov	r1, r9
 800655a:	f7fa fa57 	bl	8000a0c <__aeabi_dcmpun>
 800655e:	9003      	str	r0, [sp, #12]
 8006560:	b1e8      	cbz	r0, 800659e <pow+0x82>
 8006562:	2200      	movs	r2, #0
 8006564:	2300      	movs	r3, #0
 8006566:	4620      	mov	r0, r4
 8006568:	4629      	mov	r1, r5
 800656a:	f7fa fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800656e:	2800      	cmp	r0, #0
 8006570:	d046      	beq.n	8006600 <pow+0xe4>
 8006572:	2301      	movs	r3, #1
 8006574:	2200      	movs	r2, #0
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	4b8f      	ldr	r3, [pc, #572]	; (80067b8 <pow+0x29c>)
 800657a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800657e:	9305      	str	r3, [sp, #20]
 8006580:	4b8e      	ldr	r3, [pc, #568]	; (80067bc <pow+0x2a0>)
 8006582:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006586:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006590:	2b02      	cmp	r3, #2
 8006592:	d031      	beq.n	80065f8 <pow+0xdc>
 8006594:	a804      	add	r0, sp, #16
 8006596:	f000 fedf 	bl	8007358 <matherr>
 800659a:	bb38      	cbnz	r0, 80065ec <pow+0xd0>
 800659c:	e058      	b.n	8006650 <pow+0x134>
 800659e:	f04f 0a00 	mov.w	sl, #0
 80065a2:	f04f 0b00 	mov.w	fp, #0
 80065a6:	4652      	mov	r2, sl
 80065a8:	465b      	mov	r3, fp
 80065aa:	4640      	mov	r0, r8
 80065ac:	4649      	mov	r1, r9
 80065ae:	f7fa f9fb 	bl	80009a8 <__aeabi_dcmpeq>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d051      	beq.n	800665a <pow+0x13e>
 80065b6:	4652      	mov	r2, sl
 80065b8:	465b      	mov	r3, fp
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa f9f3 	bl	80009a8 <__aeabi_dcmpeq>
 80065c2:	4606      	mov	r6, r0
 80065c4:	b308      	cbz	r0, 800660a <pow+0xee>
 80065c6:	2301      	movs	r3, #1
 80065c8:	9304      	str	r3, [sp, #16]
 80065ca:	4b7b      	ldr	r3, [pc, #492]	; (80067b8 <pow+0x29c>)
 80065cc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80065d8:	930c      	str	r3, [sp, #48]	; 0x30
 80065da:	9b02      	ldr	r3, [sp, #8]
 80065dc:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0d7      	beq.n	8006594 <pow+0x78>
 80065e4:	2200      	movs	r2, #0
 80065e6:	4b75      	ldr	r3, [pc, #468]	; (80067bc <pow+0x2a0>)
 80065e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ee:	b11b      	cbz	r3, 80065f8 <pow+0xdc>
 80065f0:	f7fd fbda 	bl	8003da8 <__errno>
 80065f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065f6:	6003      	str	r3, [r0, #0]
 80065f8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 80065fc:	e9cd 3400 	strd	r3, r4, [sp]
 8006600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006604:	b00f      	add	sp, #60	; 0x3c
 8006606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660a:	4620      	mov	r0, r4
 800660c:	4629      	mov	r1, r5
 800660e:	f000 fe9d 	bl	800734c <finite>
 8006612:	2800      	cmp	r0, #0
 8006614:	d0f4      	beq.n	8006600 <pow+0xe4>
 8006616:	4652      	mov	r2, sl
 8006618:	465b      	mov	r3, fp
 800661a:	4620      	mov	r0, r4
 800661c:	4629      	mov	r1, r5
 800661e:	f7fa f9cd 	bl	80009bc <__aeabi_dcmplt>
 8006622:	2800      	cmp	r0, #0
 8006624:	d0ec      	beq.n	8006600 <pow+0xe4>
 8006626:	2301      	movs	r3, #1
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	4b63      	ldr	r3, [pc, #396]	; (80067b8 <pow+0x29c>)
 800662c:	960c      	str	r6, [sp, #48]	; 0x30
 800662e:	9305      	str	r3, [sp, #20]
 8006630:	f997 3000 	ldrsb.w	r3, [r7]
 8006634:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006638:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800663c:	b913      	cbnz	r3, 8006644 <pow+0x128>
 800663e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006642:	e7a7      	b.n	8006594 <pow+0x78>
 8006644:	2000      	movs	r0, #0
 8006646:	495e      	ldr	r1, [pc, #376]	; (80067c0 <pow+0x2a4>)
 8006648:	2b02      	cmp	r3, #2
 800664a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800664e:	d1a1      	bne.n	8006594 <pow+0x78>
 8006650:	f7fd fbaa 	bl	8003da8 <__errno>
 8006654:	2321      	movs	r3, #33	; 0x21
 8006656:	6003      	str	r3, [r0, #0]
 8006658:	e7c8      	b.n	80065ec <pow+0xd0>
 800665a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800665e:	f000 fe75 	bl	800734c <finite>
 8006662:	9002      	str	r0, [sp, #8]
 8006664:	2800      	cmp	r0, #0
 8006666:	d177      	bne.n	8006758 <pow+0x23c>
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	f000 fe6e 	bl	800734c <finite>
 8006670:	2800      	cmp	r0, #0
 8006672:	d071      	beq.n	8006758 <pow+0x23c>
 8006674:	4620      	mov	r0, r4
 8006676:	4629      	mov	r1, r5
 8006678:	f000 fe68 	bl	800734c <finite>
 800667c:	2800      	cmp	r0, #0
 800667e:	d06b      	beq.n	8006758 <pow+0x23c>
 8006680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006684:	4619      	mov	r1, r3
 8006686:	4610      	mov	r0, r2
 8006688:	f7fa f9c0 	bl	8000a0c <__aeabi_dcmpun>
 800668c:	f997 7000 	ldrsb.w	r7, [r7]
 8006690:	4b49      	ldr	r3, [pc, #292]	; (80067b8 <pow+0x29c>)
 8006692:	b1a0      	cbz	r0, 80066be <pow+0x1a2>
 8006694:	2201      	movs	r2, #1
 8006696:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800669a:	9b02      	ldr	r3, [sp, #8]
 800669c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80066a0:	930c      	str	r3, [sp, #48]	; 0x30
 80066a2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80066a6:	2f00      	cmp	r7, #0
 80066a8:	d0c9      	beq.n	800663e <pow+0x122>
 80066aa:	4652      	mov	r2, sl
 80066ac:	465b      	mov	r3, fp
 80066ae:	4650      	mov	r0, sl
 80066b0:	4659      	mov	r1, fp
 80066b2:	f7fa f83b 	bl	800072c <__aeabi_ddiv>
 80066b6:	2f02      	cmp	r7, #2
 80066b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066bc:	e7c7      	b.n	800664e <pow+0x132>
 80066be:	2203      	movs	r2, #3
 80066c0:	900c      	str	r0, [sp, #48]	; 0x30
 80066c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066c6:	4620      	mov	r0, r4
 80066c8:	4629      	mov	r1, r5
 80066ca:	2200      	movs	r2, #0
 80066cc:	4b3d      	ldr	r3, [pc, #244]	; (80067c4 <pow+0x2a8>)
 80066ce:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80066d2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80066d6:	f7f9 feff 	bl	80004d8 <__aeabi_dmul>
 80066da:	4604      	mov	r4, r0
 80066dc:	460d      	mov	r5, r1
 80066de:	bb17      	cbnz	r7, 8006726 <pow+0x20a>
 80066e0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80066e4:	4b38      	ldr	r3, [pc, #224]	; (80067c8 <pow+0x2ac>)
 80066e6:	4640      	mov	r0, r8
 80066e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80066ec:	4649      	mov	r1, r9
 80066ee:	4652      	mov	r2, sl
 80066f0:	465b      	mov	r3, fp
 80066f2:	f7fa f963 	bl	80009bc <__aeabi_dcmplt>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d054      	beq.n	80067a4 <pow+0x288>
 80066fa:	4620      	mov	r0, r4
 80066fc:	4629      	mov	r1, r5
 80066fe:	f000 fe33 	bl	8007368 <rint>
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
 8006706:	f7fa f94f 	bl	80009a8 <__aeabi_dcmpeq>
 800670a:	b920      	cbnz	r0, 8006716 <pow+0x1fa>
 800670c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006710:	4b2e      	ldr	r3, [pc, #184]	; (80067cc <pow+0x2b0>)
 8006712:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006716:	f996 3000 	ldrsb.w	r3, [r6]
 800671a:	2b02      	cmp	r3, #2
 800671c:	d142      	bne.n	80067a4 <pow+0x288>
 800671e:	f7fd fb43 	bl	8003da8 <__errno>
 8006722:	2322      	movs	r3, #34	; 0x22
 8006724:	e797      	b.n	8006656 <pow+0x13a>
 8006726:	2200      	movs	r2, #0
 8006728:	4b29      	ldr	r3, [pc, #164]	; (80067d0 <pow+0x2b4>)
 800672a:	4640      	mov	r0, r8
 800672c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006730:	4649      	mov	r1, r9
 8006732:	4652      	mov	r2, sl
 8006734:	465b      	mov	r3, fp
 8006736:	f7fa f941 	bl	80009bc <__aeabi_dcmplt>
 800673a:	2800      	cmp	r0, #0
 800673c:	d0eb      	beq.n	8006716 <pow+0x1fa>
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f000 fe11 	bl	8007368 <rint>
 8006746:	4622      	mov	r2, r4
 8006748:	462b      	mov	r3, r5
 800674a:	f7fa f92d 	bl	80009a8 <__aeabi_dcmpeq>
 800674e:	2800      	cmp	r0, #0
 8006750:	d1e1      	bne.n	8006716 <pow+0x1fa>
 8006752:	2200      	movs	r2, #0
 8006754:	4b1a      	ldr	r3, [pc, #104]	; (80067c0 <pow+0x2a4>)
 8006756:	e7dc      	b.n	8006712 <pow+0x1f6>
 8006758:	2200      	movs	r2, #0
 800675a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800675e:	2300      	movs	r3, #0
 8006760:	f7fa f922 	bl	80009a8 <__aeabi_dcmpeq>
 8006764:	2800      	cmp	r0, #0
 8006766:	f43f af4b 	beq.w	8006600 <pow+0xe4>
 800676a:	4640      	mov	r0, r8
 800676c:	4649      	mov	r1, r9
 800676e:	f000 fded 	bl	800734c <finite>
 8006772:	2800      	cmp	r0, #0
 8006774:	f43f af44 	beq.w	8006600 <pow+0xe4>
 8006778:	4620      	mov	r0, r4
 800677a:	4629      	mov	r1, r5
 800677c:	f000 fde6 	bl	800734c <finite>
 8006780:	2800      	cmp	r0, #0
 8006782:	f43f af3d 	beq.w	8006600 <pow+0xe4>
 8006786:	2304      	movs	r3, #4
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <pow+0x29c>)
 800678c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8006790:	9305      	str	r3, [sp, #20]
 8006792:	2300      	movs	r3, #0
 8006794:	2400      	movs	r4, #0
 8006796:	930c      	str	r3, [sp, #48]	; 0x30
 8006798:	2300      	movs	r3, #0
 800679a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800679e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 80067a2:	e7b8      	b.n	8006716 <pow+0x1fa>
 80067a4:	a804      	add	r0, sp, #16
 80067a6:	f000 fdd7 	bl	8007358 <matherr>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f47f af1e 	bne.w	80065ec <pow+0xd0>
 80067b0:	e7b5      	b.n	800671e <pow+0x202>
 80067b2:	bf00      	nop
 80067b4:	2000071c 	.word	0x2000071c
 80067b8:	08007888 	.word	0x08007888
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	fff00000 	.word	0xfff00000
 80067c4:	3fe00000 	.word	0x3fe00000
 80067c8:	47efffff 	.word	0x47efffff
 80067cc:	c7efffff 	.word	0xc7efffff
 80067d0:	7ff00000 	.word	0x7ff00000
 80067d4:	00000000 	.word	0x00000000

080067d8 <__ieee754_pow>:
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	b091      	sub	sp, #68	; 0x44
 80067de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80067e6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80067ea:	ea55 0302 	orrs.w	r3, r5, r2
 80067ee:	4607      	mov	r7, r0
 80067f0:	4688      	mov	r8, r1
 80067f2:	f000 84b7 	beq.w	8007164 <__ieee754_pow+0x98c>
 80067f6:	4b80      	ldr	r3, [pc, #512]	; (80069f8 <__ieee754_pow+0x220>)
 80067f8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80067fc:	429c      	cmp	r4, r3
 80067fe:	4689      	mov	r9, r1
 8006800:	4682      	mov	sl, r0
 8006802:	dc09      	bgt.n	8006818 <__ieee754_pow+0x40>
 8006804:	d103      	bne.n	800680e <__ieee754_pow+0x36>
 8006806:	b938      	cbnz	r0, 8006818 <__ieee754_pow+0x40>
 8006808:	42a5      	cmp	r5, r4
 800680a:	dc0d      	bgt.n	8006828 <__ieee754_pow+0x50>
 800680c:	e001      	b.n	8006812 <__ieee754_pow+0x3a>
 800680e:	429d      	cmp	r5, r3
 8006810:	dc02      	bgt.n	8006818 <__ieee754_pow+0x40>
 8006812:	429d      	cmp	r5, r3
 8006814:	d10e      	bne.n	8006834 <__ieee754_pow+0x5c>
 8006816:	b16a      	cbz	r2, 8006834 <__ieee754_pow+0x5c>
 8006818:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800681c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006820:	ea54 030a 	orrs.w	r3, r4, sl
 8006824:	f000 849e 	beq.w	8007164 <__ieee754_pow+0x98c>
 8006828:	4874      	ldr	r0, [pc, #464]	; (80069fc <__ieee754_pow+0x224>)
 800682a:	b011      	add	sp, #68	; 0x44
 800682c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	f000 bd94 	b.w	800735c <nan>
 8006834:	f1b9 0f00 	cmp.w	r9, #0
 8006838:	da53      	bge.n	80068e2 <__ieee754_pow+0x10a>
 800683a:	4b71      	ldr	r3, [pc, #452]	; (8006a00 <__ieee754_pow+0x228>)
 800683c:	429d      	cmp	r5, r3
 800683e:	dc4e      	bgt.n	80068de <__ieee754_pow+0x106>
 8006840:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006844:	429d      	cmp	r5, r3
 8006846:	dd4c      	ble.n	80068e2 <__ieee754_pow+0x10a>
 8006848:	152b      	asrs	r3, r5, #20
 800684a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800684e:	2b14      	cmp	r3, #20
 8006850:	dd28      	ble.n	80068a4 <__ieee754_pow+0xcc>
 8006852:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006856:	fa22 f103 	lsr.w	r1, r2, r3
 800685a:	fa01 f303 	lsl.w	r3, r1, r3
 800685e:	4293      	cmp	r3, r2
 8006860:	d13f      	bne.n	80068e2 <__ieee754_pow+0x10a>
 8006862:	f001 0101 	and.w	r1, r1, #1
 8006866:	f1c1 0302 	rsb	r3, r1, #2
 800686a:	9300      	str	r3, [sp, #0]
 800686c:	2a00      	cmp	r2, #0
 800686e:	d15c      	bne.n	800692a <__ieee754_pow+0x152>
 8006870:	4b61      	ldr	r3, [pc, #388]	; (80069f8 <__ieee754_pow+0x220>)
 8006872:	429d      	cmp	r5, r3
 8006874:	d126      	bne.n	80068c4 <__ieee754_pow+0xec>
 8006876:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800687a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800687e:	ea53 030a 	orrs.w	r3, r3, sl
 8006882:	f000 846f 	beq.w	8007164 <__ieee754_pow+0x98c>
 8006886:	4b5f      	ldr	r3, [pc, #380]	; (8006a04 <__ieee754_pow+0x22c>)
 8006888:	429c      	cmp	r4, r3
 800688a:	dd2c      	ble.n	80068e6 <__ieee754_pow+0x10e>
 800688c:	2e00      	cmp	r6, #0
 800688e:	f280 846f 	bge.w	8007170 <__ieee754_pow+0x998>
 8006892:	f04f 0b00 	mov.w	fp, #0
 8006896:	f04f 0c00 	mov.w	ip, #0
 800689a:	4658      	mov	r0, fp
 800689c:	4661      	mov	r1, ip
 800689e:	b011      	add	sp, #68	; 0x44
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	d13e      	bne.n	8006926 <__ieee754_pow+0x14e>
 80068a8:	f1c3 0314 	rsb	r3, r3, #20
 80068ac:	fa45 f103 	asr.w	r1, r5, r3
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	f040 8463 	bne.w	8007180 <__ieee754_pow+0x9a8>
 80068ba:	f001 0101 	and.w	r1, r1, #1
 80068be:	f1c1 0302 	rsb	r3, r1, #2
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	4b50      	ldr	r3, [pc, #320]	; (8006a08 <__ieee754_pow+0x230>)
 80068c6:	429d      	cmp	r5, r3
 80068c8:	d114      	bne.n	80068f4 <__ieee754_pow+0x11c>
 80068ca:	2e00      	cmp	r6, #0
 80068cc:	f280 8454 	bge.w	8007178 <__ieee754_pow+0x9a0>
 80068d0:	463a      	mov	r2, r7
 80068d2:	4643      	mov	r3, r8
 80068d4:	2000      	movs	r0, #0
 80068d6:	494c      	ldr	r1, [pc, #304]	; (8006a08 <__ieee754_pow+0x230>)
 80068d8:	f7f9 ff28 	bl	800072c <__aeabi_ddiv>
 80068dc:	e013      	b.n	8006906 <__ieee754_pow+0x12e>
 80068de:	2302      	movs	r3, #2
 80068e0:	e7c3      	b.n	800686a <__ieee754_pow+0x92>
 80068e2:	2300      	movs	r3, #0
 80068e4:	e7c1      	b.n	800686a <__ieee754_pow+0x92>
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	dad3      	bge.n	8006892 <__ieee754_pow+0xba>
 80068ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80068ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80068f2:	e7d2      	b.n	800689a <__ieee754_pow+0xc2>
 80068f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80068f8:	d108      	bne.n	800690c <__ieee754_pow+0x134>
 80068fa:	463a      	mov	r2, r7
 80068fc:	4643      	mov	r3, r8
 80068fe:	4638      	mov	r0, r7
 8006900:	4641      	mov	r1, r8
 8006902:	f7f9 fde9 	bl	80004d8 <__aeabi_dmul>
 8006906:	4683      	mov	fp, r0
 8006908:	468c      	mov	ip, r1
 800690a:	e7c6      	b.n	800689a <__ieee754_pow+0xc2>
 800690c:	4b3f      	ldr	r3, [pc, #252]	; (8006a0c <__ieee754_pow+0x234>)
 800690e:	429e      	cmp	r6, r3
 8006910:	d10b      	bne.n	800692a <__ieee754_pow+0x152>
 8006912:	f1b9 0f00 	cmp.w	r9, #0
 8006916:	db08      	blt.n	800692a <__ieee754_pow+0x152>
 8006918:	4638      	mov	r0, r7
 800691a:	4641      	mov	r1, r8
 800691c:	b011      	add	sp, #68	; 0x44
 800691e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006922:	f000 bc63 	b.w	80071ec <__ieee754_sqrt>
 8006926:	2300      	movs	r3, #0
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	4638      	mov	r0, r7
 800692c:	4641      	mov	r1, r8
 800692e:	f000 fd09 	bl	8007344 <fabs>
 8006932:	4683      	mov	fp, r0
 8006934:	468c      	mov	ip, r1
 8006936:	f1ba 0f00 	cmp.w	sl, #0
 800693a:	d12b      	bne.n	8006994 <__ieee754_pow+0x1bc>
 800693c:	b124      	cbz	r4, 8006948 <__ieee754_pow+0x170>
 800693e:	4b32      	ldr	r3, [pc, #200]	; (8006a08 <__ieee754_pow+0x230>)
 8006940:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8006944:	429a      	cmp	r2, r3
 8006946:	d125      	bne.n	8006994 <__ieee754_pow+0x1bc>
 8006948:	2e00      	cmp	r6, #0
 800694a:	da07      	bge.n	800695c <__ieee754_pow+0x184>
 800694c:	465a      	mov	r2, fp
 800694e:	4663      	mov	r3, ip
 8006950:	2000      	movs	r0, #0
 8006952:	492d      	ldr	r1, [pc, #180]	; (8006a08 <__ieee754_pow+0x230>)
 8006954:	f7f9 feea 	bl	800072c <__aeabi_ddiv>
 8006958:	4683      	mov	fp, r0
 800695a:	468c      	mov	ip, r1
 800695c:	f1b9 0f00 	cmp.w	r9, #0
 8006960:	da9b      	bge.n	800689a <__ieee754_pow+0xc2>
 8006962:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006966:	9b00      	ldr	r3, [sp, #0]
 8006968:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800696c:	4323      	orrs	r3, r4
 800696e:	d108      	bne.n	8006982 <__ieee754_pow+0x1aa>
 8006970:	465a      	mov	r2, fp
 8006972:	4663      	mov	r3, ip
 8006974:	4658      	mov	r0, fp
 8006976:	4661      	mov	r1, ip
 8006978:	f7f9 fbf6 	bl	8000168 <__aeabi_dsub>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	e7aa      	b.n	80068d8 <__ieee754_pow+0x100>
 8006982:	9b00      	ldr	r3, [sp, #0]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d188      	bne.n	800689a <__ieee754_pow+0xc2>
 8006988:	4658      	mov	r0, fp
 800698a:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800698e:	4683      	mov	fp, r0
 8006990:	469c      	mov	ip, r3
 8006992:	e782      	b.n	800689a <__ieee754_pow+0xc2>
 8006994:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 8006998:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800699c:	930d      	str	r3, [sp, #52]	; 0x34
 800699e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069a0:	9b00      	ldr	r3, [sp, #0]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	d104      	bne.n	80069b0 <__ieee754_pow+0x1d8>
 80069a6:	463a      	mov	r2, r7
 80069a8:	4643      	mov	r3, r8
 80069aa:	4638      	mov	r0, r7
 80069ac:	4641      	mov	r1, r8
 80069ae:	e7e3      	b.n	8006978 <__ieee754_pow+0x1a0>
 80069b0:	4b17      	ldr	r3, [pc, #92]	; (8006a10 <__ieee754_pow+0x238>)
 80069b2:	429d      	cmp	r5, r3
 80069b4:	f340 80fe 	ble.w	8006bb4 <__ieee754_pow+0x3dc>
 80069b8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80069bc:	429d      	cmp	r5, r3
 80069be:	dd0b      	ble.n	80069d8 <__ieee754_pow+0x200>
 80069c0:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <__ieee754_pow+0x22c>)
 80069c2:	429c      	cmp	r4, r3
 80069c4:	dc0e      	bgt.n	80069e4 <__ieee754_pow+0x20c>
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	f6bf af63 	bge.w	8006892 <__ieee754_pow+0xba>
 80069cc:	a308      	add	r3, pc, #32	; (adr r3, 80069f0 <__ieee754_pow+0x218>)
 80069ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d2:	4610      	mov	r0, r2
 80069d4:	4619      	mov	r1, r3
 80069d6:	e794      	b.n	8006902 <__ieee754_pow+0x12a>
 80069d8:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <__ieee754_pow+0x23c>)
 80069da:	429c      	cmp	r4, r3
 80069dc:	ddf3      	ble.n	80069c6 <__ieee754_pow+0x1ee>
 80069de:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <__ieee754_pow+0x230>)
 80069e0:	429c      	cmp	r4, r3
 80069e2:	dd19      	ble.n	8006a18 <__ieee754_pow+0x240>
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	dcf1      	bgt.n	80069cc <__ieee754_pow+0x1f4>
 80069e8:	e753      	b.n	8006892 <__ieee754_pow+0xba>
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w
 80069f0:	8800759c 	.word	0x8800759c
 80069f4:	7e37e43c 	.word	0x7e37e43c
 80069f8:	7ff00000 	.word	0x7ff00000
 80069fc:	08007771 	.word	0x08007771
 8006a00:	433fffff 	.word	0x433fffff
 8006a04:	3fefffff 	.word	0x3fefffff
 8006a08:	3ff00000 	.word	0x3ff00000
 8006a0c:	3fe00000 	.word	0x3fe00000
 8006a10:	41e00000 	.word	0x41e00000
 8006a14:	3feffffe 	.word	0x3feffffe
 8006a18:	4661      	mov	r1, ip
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	4b60      	ldr	r3, [pc, #384]	; (8006ba0 <__ieee754_pow+0x3c8>)
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f7f9 fba2 	bl	8000168 <__aeabi_dsub>
 8006a24:	a354      	add	r3, pc, #336	; (adr r3, 8006b78 <__ieee754_pow+0x3a0>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	460d      	mov	r5, r1
 8006a2e:	f7f9 fd53 	bl	80004d8 <__aeabi_dmul>
 8006a32:	a353      	add	r3, pc, #332	; (adr r3, 8006b80 <__ieee754_pow+0x3a8>)
 8006a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a38:	4606      	mov	r6, r0
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	f7f9 fd4a 	bl	80004d8 <__aeabi_dmul>
 8006a44:	2200      	movs	r2, #0
 8006a46:	4682      	mov	sl, r0
 8006a48:	468b      	mov	fp, r1
 8006a4a:	4b56      	ldr	r3, [pc, #344]	; (8006ba4 <__ieee754_pow+0x3cc>)
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	4629      	mov	r1, r5
 8006a50:	f7f9 fd42 	bl	80004d8 <__aeabi_dmul>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	a14b      	add	r1, pc, #300	; (adr r1, 8006b88 <__ieee754_pow+0x3b0>)
 8006a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a5e:	f7f9 fb83 	bl	8000168 <__aeabi_dsub>
 8006a62:	4622      	mov	r2, r4
 8006a64:	462b      	mov	r3, r5
 8006a66:	f7f9 fd37 	bl	80004d8 <__aeabi_dmul>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	2000      	movs	r0, #0
 8006a70:	494d      	ldr	r1, [pc, #308]	; (8006ba8 <__ieee754_pow+0x3d0>)
 8006a72:	f7f9 fb79 	bl	8000168 <__aeabi_dsub>
 8006a76:	4622      	mov	r2, r4
 8006a78:	462b      	mov	r3, r5
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4689      	mov	r9, r1
 8006a7e:	4620      	mov	r0, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7f9 fd29 	bl	80004d8 <__aeabi_dmul>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	f7f9 fd23 	bl	80004d8 <__aeabi_dmul>
 8006a92:	a33f      	add	r3, pc, #252	; (adr r3, 8006b90 <__ieee754_pow+0x3b8>)
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f7f9 fd1e 	bl	80004d8 <__aeabi_dmul>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4650      	mov	r0, sl
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	f7f9 fb60 	bl	8000168 <__aeabi_dsub>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4604      	mov	r4, r0
 8006aae:	460d      	mov	r5, r1
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7f9 fb5a 	bl	800016c <__adddf3>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	468b      	mov	fp, r1
 8006abc:	4682      	mov	sl, r0
 8006abe:	4632      	mov	r2, r6
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	f7f9 fb51 	bl	8000168 <__aeabi_dsub>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	4620      	mov	r0, r4
 8006acc:	4629      	mov	r1, r5
 8006ace:	f7f9 fb4b 	bl	8000168 <__aeabi_dsub>
 8006ad2:	9b00      	ldr	r3, [sp, #0]
 8006ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	bf0c      	ite	eq
 8006ae0:	4c32      	ldreq	r4, [pc, #200]	; (8006bac <__ieee754_pow+0x3d4>)
 8006ae2:	4c2f      	ldrne	r4, [pc, #188]	; (8006ba0 <__ieee754_pow+0x3c8>)
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	e9cd 3400 	strd	r3, r4, [sp]
 8006aea:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006aee:	2400      	movs	r4, #0
 8006af0:	460f      	mov	r7, r1
 8006af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	f7f9 fb35 	bl	8000168 <__aeabi_dsub>
 8006afe:	4652      	mov	r2, sl
 8006b00:	465b      	mov	r3, fp
 8006b02:	f7f9 fce9 	bl	80004d8 <__aeabi_dmul>
 8006b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	4630      	mov	r0, r6
 8006b10:	4639      	mov	r1, r7
 8006b12:	f7f9 fce1 	bl	80004d8 <__aeabi_dmul>
 8006b16:	4602      	mov	r2, r0
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 fb25 	bl	800016c <__adddf3>
 8006b22:	4622      	mov	r2, r4
 8006b24:	462b      	mov	r3, r5
 8006b26:	4680      	mov	r8, r0
 8006b28:	4689      	mov	r9, r1
 8006b2a:	4650      	mov	r0, sl
 8006b2c:	4659      	mov	r1, fp
 8006b2e:	f7f9 fcd3 	bl	80004d8 <__aeabi_dmul>
 8006b32:	4604      	mov	r4, r0
 8006b34:	460d      	mov	r5, r1
 8006b36:	460b      	mov	r3, r1
 8006b38:	4602      	mov	r2, r0
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006b42:	f7f9 fb13 	bl	800016c <__adddf3>
 8006b46:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <__ieee754_pow+0x3d8>)
 8006b48:	4682      	mov	sl, r0
 8006b4a:	4299      	cmp	r1, r3
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	460e      	mov	r6, r1
 8006b50:	f340 82e1 	ble.w	8007116 <__ieee754_pow+0x93e>
 8006b54:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006b58:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006b5c:	4303      	orrs	r3, r0
 8006b5e:	f000 81db 	beq.w	8006f18 <__ieee754_pow+0x740>
 8006b62:	a30d      	add	r3, pc, #52	; (adr r3, 8006b98 <__ieee754_pow+0x3c0>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006b6c:	f7f9 fcb4 	bl	80004d8 <__aeabi_dmul>
 8006b70:	a309      	add	r3, pc, #36	; (adr r3, 8006b98 <__ieee754_pow+0x3c0>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	e6c4      	b.n	8006902 <__ieee754_pow+0x12a>
 8006b78:	60000000 	.word	0x60000000
 8006b7c:	3ff71547 	.word	0x3ff71547
 8006b80:	f85ddf44 	.word	0xf85ddf44
 8006b84:	3e54ae0b 	.word	0x3e54ae0b
 8006b88:	55555555 	.word	0x55555555
 8006b8c:	3fd55555 	.word	0x3fd55555
 8006b90:	652b82fe 	.word	0x652b82fe
 8006b94:	3ff71547 	.word	0x3ff71547
 8006b98:	8800759c 	.word	0x8800759c
 8006b9c:	7e37e43c 	.word	0x7e37e43c
 8006ba0:	3ff00000 	.word	0x3ff00000
 8006ba4:	3fd00000 	.word	0x3fd00000
 8006ba8:	3fe00000 	.word	0x3fe00000
 8006bac:	bff00000 	.word	0xbff00000
 8006bb0:	408fffff 	.word	0x408fffff
 8006bb4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	da08      	bge.n	8006bd0 <__ieee754_pow+0x3f8>
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	4bcd      	ldr	r3, [pc, #820]	; (8006ef8 <__ieee754_pow+0x720>)
 8006bc2:	4661      	mov	r1, ip
 8006bc4:	f7f9 fc88 	bl	80004d8 <__aeabi_dmul>
 8006bc8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006bcc:	4683      	mov	fp, r0
 8006bce:	460c      	mov	r4, r1
 8006bd0:	1523      	asrs	r3, r4, #20
 8006bd2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006bd6:	4413      	add	r3, r2
 8006bd8:	930c      	str	r3, [sp, #48]	; 0x30
 8006bda:	4bc8      	ldr	r3, [pc, #800]	; (8006efc <__ieee754_pow+0x724>)
 8006bdc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006be0:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006be4:	429c      	cmp	r4, r3
 8006be6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006bea:	dd08      	ble.n	8006bfe <__ieee754_pow+0x426>
 8006bec:	4bc4      	ldr	r3, [pc, #784]	; (8006f00 <__ieee754_pow+0x728>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	f340 815b 	ble.w	8006eaa <__ieee754_pow+0x6d2>
 8006bf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bf6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	930c      	str	r3, [sp, #48]	; 0x30
 8006bfe:	f04f 0800 	mov.w	r8, #0
 8006c02:	4658      	mov	r0, fp
 8006c04:	4629      	mov	r1, r5
 8006c06:	4bbf      	ldr	r3, [pc, #764]	; (8006f04 <__ieee754_pow+0x72c>)
 8006c08:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8006c0c:	444b      	add	r3, r9
 8006c0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c12:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006c16:	461a      	mov	r2, r3
 8006c18:	4623      	mov	r3, r4
 8006c1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006c1e:	f7f9 faa3 	bl	8000168 <__aeabi_dsub>
 8006c22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c26:	4606      	mov	r6, r0
 8006c28:	460f      	mov	r7, r1
 8006c2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006c2e:	f7f9 fa9d 	bl	800016c <__adddf3>
 8006c32:	4602      	mov	r2, r0
 8006c34:	460b      	mov	r3, r1
 8006c36:	2000      	movs	r0, #0
 8006c38:	49b3      	ldr	r1, [pc, #716]	; (8006f08 <__ieee754_pow+0x730>)
 8006c3a:	f7f9 fd77 	bl	800072c <__aeabi_ddiv>
 8006c3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4630      	mov	r0, r6
 8006c48:	4639      	mov	r1, r7
 8006c4a:	f7f9 fc45 	bl	80004d8 <__aeabi_dmul>
 8006c4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c52:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006c56:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	106d      	asrs	r5, r5, #1
 8006c60:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006c6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006c6e:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 8006c72:	4650      	mov	r0, sl
 8006c74:	4659      	mov	r1, fp
 8006c76:	4614      	mov	r4, r2
 8006c78:	461d      	mov	r5, r3
 8006c7a:	f7f9 fc2d 	bl	80004d8 <__aeabi_dmul>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	4630      	mov	r0, r6
 8006c84:	4639      	mov	r1, r7
 8006c86:	f7f9 fa6f 	bl	8000168 <__aeabi_dsub>
 8006c8a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460f      	mov	r7, r1
 8006c92:	4620      	mov	r0, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7f9 fa67 	bl	8000168 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ca2:	f7f9 fa61 	bl	8000168 <__aeabi_dsub>
 8006ca6:	4652      	mov	r2, sl
 8006ca8:	465b      	mov	r3, fp
 8006caa:	f7f9 fc15 	bl	80004d8 <__aeabi_dmul>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	f7f9 fa57 	bl	8000168 <__aeabi_dsub>
 8006cba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006cbe:	f7f9 fc0b 	bl	80004d8 <__aeabi_dmul>
 8006cc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006cca:	4610      	mov	r0, r2
 8006ccc:	4619      	mov	r1, r3
 8006cce:	f7f9 fc03 	bl	80004d8 <__aeabi_dmul>
 8006cd2:	a377      	add	r3, pc, #476	; (adr r3, 8006eb0 <__ieee754_pow+0x6d8>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	f7f9 fbfc 	bl	80004d8 <__aeabi_dmul>
 8006ce0:	a375      	add	r3, pc, #468	; (adr r3, 8006eb8 <__ieee754_pow+0x6e0>)
 8006ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce6:	f7f9 fa41 	bl	800016c <__adddf3>
 8006cea:	4622      	mov	r2, r4
 8006cec:	462b      	mov	r3, r5
 8006cee:	f7f9 fbf3 	bl	80004d8 <__aeabi_dmul>
 8006cf2:	a373      	add	r3, pc, #460	; (adr r3, 8006ec0 <__ieee754_pow+0x6e8>)
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f7f9 fa38 	bl	800016c <__adddf3>
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	462b      	mov	r3, r5
 8006d00:	f7f9 fbea 	bl	80004d8 <__aeabi_dmul>
 8006d04:	a370      	add	r3, pc, #448	; (adr r3, 8006ec8 <__ieee754_pow+0x6f0>)
 8006d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0a:	f7f9 fa2f 	bl	800016c <__adddf3>
 8006d0e:	4622      	mov	r2, r4
 8006d10:	462b      	mov	r3, r5
 8006d12:	f7f9 fbe1 	bl	80004d8 <__aeabi_dmul>
 8006d16:	a36e      	add	r3, pc, #440	; (adr r3, 8006ed0 <__ieee754_pow+0x6f8>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	f7f9 fa26 	bl	800016c <__adddf3>
 8006d20:	4622      	mov	r2, r4
 8006d22:	462b      	mov	r3, r5
 8006d24:	f7f9 fbd8 	bl	80004d8 <__aeabi_dmul>
 8006d28:	a36b      	add	r3, pc, #428	; (adr r3, 8006ed8 <__ieee754_pow+0x700>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 fa1d 	bl	800016c <__adddf3>
 8006d32:	4622      	mov	r2, r4
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	462b      	mov	r3, r5
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fbcb 	bl	80004d8 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4630      	mov	r0, r6
 8006d48:	4639      	mov	r1, r7
 8006d4a:	f7f9 fbc5 	bl	80004d8 <__aeabi_dmul>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	460d      	mov	r5, r1
 8006d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d56:	4652      	mov	r2, sl
 8006d58:	465b      	mov	r3, fp
 8006d5a:	f7f9 fa07 	bl	800016c <__adddf3>
 8006d5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d62:	f7f9 fbb9 	bl	80004d8 <__aeabi_dmul>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	f7f9 f9ff 	bl	800016c <__adddf3>
 8006d6e:	4652      	mov	r2, sl
 8006d70:	4606      	mov	r6, r0
 8006d72:	460f      	mov	r7, r1
 8006d74:	465b      	mov	r3, fp
 8006d76:	4650      	mov	r0, sl
 8006d78:	4659      	mov	r1, fp
 8006d7a:	f7f9 fbad 	bl	80004d8 <__aeabi_dmul>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	4b62      	ldr	r3, [pc, #392]	; (8006f0c <__ieee754_pow+0x734>)
 8006d82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d86:	f7f9 f9f1 	bl	800016c <__adddf3>
 8006d8a:	4632      	mov	r2, r6
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	f7f9 f9ed 	bl	800016c <__adddf3>
 8006d92:	9804      	ldr	r0, [sp, #16]
 8006d94:	460d      	mov	r5, r1
 8006d96:	4604      	mov	r4, r0
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4650      	mov	r0, sl
 8006d9e:	4659      	mov	r1, fp
 8006da0:	f7f9 fb9a 	bl	80004d8 <__aeabi_dmul>
 8006da4:	2200      	movs	r2, #0
 8006da6:	4682      	mov	sl, r0
 8006da8:	468b      	mov	fp, r1
 8006daa:	4b58      	ldr	r3, [pc, #352]	; (8006f0c <__ieee754_pow+0x734>)
 8006dac:	4620      	mov	r0, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7f9 f9da 	bl	8000168 <__aeabi_dsub>
 8006db4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006db8:	f7f9 f9d6 	bl	8000168 <__aeabi_dsub>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 f9d0 	bl	8000168 <__aeabi_dsub>
 8006dc8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006dcc:	f7f9 fb84 	bl	80004d8 <__aeabi_dmul>
 8006dd0:	4622      	mov	r2, r4
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	460f      	mov	r7, r1
 8006dd6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dda:	462b      	mov	r3, r5
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4630      	mov	r0, r6
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 f9c0 	bl	800016c <__adddf3>
 8006dec:	4606      	mov	r6, r0
 8006dee:	460f      	mov	r7, r1
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4650      	mov	r0, sl
 8006df6:	4659      	mov	r1, fp
 8006df8:	f7f9 f9b8 	bl	800016c <__adddf3>
 8006dfc:	a338      	add	r3, pc, #224	; (adr r3, 8006ee0 <__ieee754_pow+0x708>)
 8006dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e02:	9804      	ldr	r0, [sp, #16]
 8006e04:	460d      	mov	r5, r1
 8006e06:	4604      	mov	r4, r0
 8006e08:	f7f9 fb66 	bl	80004d8 <__aeabi_dmul>
 8006e0c:	4652      	mov	r2, sl
 8006e0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006e12:	465b      	mov	r3, fp
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 f9a6 	bl	8000168 <__aeabi_dsub>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4630      	mov	r0, r6
 8006e22:	4639      	mov	r1, r7
 8006e24:	f7f9 f9a0 	bl	8000168 <__aeabi_dsub>
 8006e28:	a32f      	add	r3, pc, #188	; (adr r3, 8006ee8 <__ieee754_pow+0x710>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fb53 	bl	80004d8 <__aeabi_dmul>
 8006e32:	a32f      	add	r3, pc, #188	; (adr r3, 8006ef0 <__ieee754_pow+0x718>)
 8006e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e38:	4606      	mov	r6, r0
 8006e3a:	460f      	mov	r7, r1
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4629      	mov	r1, r5
 8006e40:	f7f9 fb4a 	bl	80004d8 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 f98e 	bl	800016c <__adddf3>
 8006e50:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <__ieee754_pow+0x738>)
 8006e52:	444b      	add	r3, r9
 8006e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e58:	f7f9 f988 	bl	800016c <__adddf3>
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e60:	460d      	mov	r5, r1
 8006e62:	f7f9 facf 	bl	8000404 <__aeabi_i2d>
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	4b2a      	ldr	r3, [pc, #168]	; (8006f14 <__ieee754_pow+0x73c>)
 8006e6c:	4622      	mov	r2, r4
 8006e6e:	444b      	add	r3, r9
 8006e70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e74:	462b      	mov	r3, r5
 8006e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e7a:	f7f9 f977 	bl	800016c <__adddf3>
 8006e7e:	4642      	mov	r2, r8
 8006e80:	464b      	mov	r3, r9
 8006e82:	f7f9 f973 	bl	800016c <__adddf3>
 8006e86:	4632      	mov	r2, r6
 8006e88:	463b      	mov	r3, r7
 8006e8a:	f7f9 f96f 	bl	800016c <__adddf3>
 8006e8e:	9804      	ldr	r0, [sp, #16]
 8006e90:	4632      	mov	r2, r6
 8006e92:	463b      	mov	r3, r7
 8006e94:	4682      	mov	sl, r0
 8006e96:	468b      	mov	fp, r1
 8006e98:	f7f9 f966 	bl	8000168 <__aeabi_dsub>
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	f7f9 f962 	bl	8000168 <__aeabi_dsub>
 8006ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ea8:	e60b      	b.n	8006ac2 <__ieee754_pow+0x2ea>
 8006eaa:	f04f 0801 	mov.w	r8, #1
 8006eae:	e6a8      	b.n	8006c02 <__ieee754_pow+0x42a>
 8006eb0:	4a454eef 	.word	0x4a454eef
 8006eb4:	3fca7e28 	.word	0x3fca7e28
 8006eb8:	93c9db65 	.word	0x93c9db65
 8006ebc:	3fcd864a 	.word	0x3fcd864a
 8006ec0:	a91d4101 	.word	0xa91d4101
 8006ec4:	3fd17460 	.word	0x3fd17460
 8006ec8:	518f264d 	.word	0x518f264d
 8006ecc:	3fd55555 	.word	0x3fd55555
 8006ed0:	db6fabff 	.word	0xdb6fabff
 8006ed4:	3fdb6db6 	.word	0x3fdb6db6
 8006ed8:	33333303 	.word	0x33333303
 8006edc:	3fe33333 	.word	0x3fe33333
 8006ee0:	e0000000 	.word	0xe0000000
 8006ee4:	3feec709 	.word	0x3feec709
 8006ee8:	dc3a03fd 	.word	0xdc3a03fd
 8006eec:	3feec709 	.word	0x3feec709
 8006ef0:	145b01f5 	.word	0x145b01f5
 8006ef4:	be3e2fe0 	.word	0xbe3e2fe0
 8006ef8:	43400000 	.word	0x43400000
 8006efc:	0003988e 	.word	0x0003988e
 8006f00:	000bb679 	.word	0x000bb679
 8006f04:	08007890 	.word	0x08007890
 8006f08:	3ff00000 	.word	0x3ff00000
 8006f0c:	40080000 	.word	0x40080000
 8006f10:	080078b0 	.word	0x080078b0
 8006f14:	080078a0 	.word	0x080078a0
 8006f18:	a39b      	add	r3, pc, #620	; (adr r3, 8007188 <__ieee754_pow+0x9b0>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	4640      	mov	r0, r8
 8006f20:	4649      	mov	r1, r9
 8006f22:	f7f9 f923 	bl	800016c <__adddf3>
 8006f26:	4622      	mov	r2, r4
 8006f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f2c:	462b      	mov	r3, r5
 8006f2e:	4650      	mov	r0, sl
 8006f30:	4639      	mov	r1, r7
 8006f32:	f7f9 f919 	bl	8000168 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3e:	f7f9 fd5b 	bl	80009f8 <__aeabi_dcmpgt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f47f ae0d 	bne.w	8006b62 <__ieee754_pow+0x38a>
 8006f48:	4aa3      	ldr	r2, [pc, #652]	; (80071d8 <__ieee754_pow+0xa00>)
 8006f4a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	f340 8103 	ble.w	800715a <__ieee754_pow+0x982>
 8006f54:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006f58:	2000      	movs	r0, #0
 8006f5a:	151b      	asrs	r3, r3, #20
 8006f5c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006f60:	fa4a f303 	asr.w	r3, sl, r3
 8006f64:	4433      	add	r3, r6
 8006f66:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006f6a:	4f9c      	ldr	r7, [pc, #624]	; (80071dc <__ieee754_pow+0xa04>)
 8006f6c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006f70:	4117      	asrs	r7, r2
 8006f72:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006f76:	ea23 0107 	bic.w	r1, r3, r7
 8006f7a:	f1c2 0214 	rsb	r2, r2, #20
 8006f7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006f82:	fa4a fa02 	asr.w	sl, sl, r2
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	4629      	mov	r1, r5
 8006f90:	bfb8      	it	lt
 8006f92:	f1ca 0a00 	rsblt	sl, sl, #0
 8006f96:	f7f9 f8e7 	bl	8000168 <__aeabi_dsub>
 8006f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa2:	4642      	mov	r2, r8
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	f7f9 f8e1 	bl	800016c <__adddf3>
 8006faa:	a379      	add	r3, pc, #484	; (adr r3, 8007190 <__ieee754_pow+0x9b8>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	f7f9 fa8f 	bl	80004d8 <__aeabi_dmul>
 8006fba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7f9 f8cf 	bl	8000168 <__aeabi_dsub>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4640      	mov	r0, r8
 8006fd0:	4649      	mov	r1, r9
 8006fd2:	f7f9 f8c9 	bl	8000168 <__aeabi_dsub>
 8006fd6:	a370      	add	r3, pc, #448	; (adr r3, 8007198 <__ieee754_pow+0x9c0>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 fa7c 	bl	80004d8 <__aeabi_dmul>
 8006fe0:	a36f      	add	r3, pc, #444	; (adr r3, 80071a0 <__ieee754_pow+0x9c8>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	4680      	mov	r8, r0
 8006fe8:	4689      	mov	r9, r1
 8006fea:	4620      	mov	r0, r4
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 fa73 	bl	80004d8 <__aeabi_dmul>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	460b      	mov	r3, r1
 8006ff6:	4640      	mov	r0, r8
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	f7f9 f8b7 	bl	800016c <__adddf3>
 8006ffe:	4604      	mov	r4, r0
 8007000:	460d      	mov	r5, r1
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4630      	mov	r0, r6
 8007008:	4639      	mov	r1, r7
 800700a:	f7f9 f8af 	bl	800016c <__adddf3>
 800700e:	4632      	mov	r2, r6
 8007010:	463b      	mov	r3, r7
 8007012:	4680      	mov	r8, r0
 8007014:	4689      	mov	r9, r1
 8007016:	f7f9 f8a7 	bl	8000168 <__aeabi_dsub>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f8a1 	bl	8000168 <__aeabi_dsub>
 8007026:	4642      	mov	r2, r8
 8007028:	4606      	mov	r6, r0
 800702a:	460f      	mov	r7, r1
 800702c:	464b      	mov	r3, r9
 800702e:	4640      	mov	r0, r8
 8007030:	4649      	mov	r1, r9
 8007032:	f7f9 fa51 	bl	80004d8 <__aeabi_dmul>
 8007036:	a35c      	add	r3, pc, #368	; (adr r3, 80071a8 <__ieee754_pow+0x9d0>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	f7f9 fa4a 	bl	80004d8 <__aeabi_dmul>
 8007044:	a35a      	add	r3, pc, #360	; (adr r3, 80071b0 <__ieee754_pow+0x9d8>)
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 f88d 	bl	8000168 <__aeabi_dsub>
 800704e:	4622      	mov	r2, r4
 8007050:	462b      	mov	r3, r5
 8007052:	f7f9 fa41 	bl	80004d8 <__aeabi_dmul>
 8007056:	a358      	add	r3, pc, #352	; (adr r3, 80071b8 <__ieee754_pow+0x9e0>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 f886 	bl	800016c <__adddf3>
 8007060:	4622      	mov	r2, r4
 8007062:	462b      	mov	r3, r5
 8007064:	f7f9 fa38 	bl	80004d8 <__aeabi_dmul>
 8007068:	a355      	add	r3, pc, #340	; (adr r3, 80071c0 <__ieee754_pow+0x9e8>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7f9 f87b 	bl	8000168 <__aeabi_dsub>
 8007072:	4622      	mov	r2, r4
 8007074:	462b      	mov	r3, r5
 8007076:	f7f9 fa2f 	bl	80004d8 <__aeabi_dmul>
 800707a:	a353      	add	r3, pc, #332	; (adr r3, 80071c8 <__ieee754_pow+0x9f0>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f7f9 f874 	bl	800016c <__adddf3>
 8007084:	4622      	mov	r2, r4
 8007086:	462b      	mov	r3, r5
 8007088:	f7f9 fa26 	bl	80004d8 <__aeabi_dmul>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4640      	mov	r0, r8
 8007092:	4649      	mov	r1, r9
 8007094:	f7f9 f868 	bl	8000168 <__aeabi_dsub>
 8007098:	4604      	mov	r4, r0
 800709a:	460d      	mov	r5, r1
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7f9 fa18 	bl	80004d8 <__aeabi_dmul>
 80070a8:	2200      	movs	r2, #0
 80070aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80070b2:	4620      	mov	r0, r4
 80070b4:	4629      	mov	r1, r5
 80070b6:	f7f9 f857 	bl	8000168 <__aeabi_dsub>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070c2:	f7f9 fb33 	bl	800072c <__aeabi_ddiv>
 80070c6:	4632      	mov	r2, r6
 80070c8:	4604      	mov	r4, r0
 80070ca:	460d      	mov	r5, r1
 80070cc:	463b      	mov	r3, r7
 80070ce:	4640      	mov	r0, r8
 80070d0:	4649      	mov	r1, r9
 80070d2:	f7f9 fa01 	bl	80004d8 <__aeabi_dmul>
 80070d6:	4632      	mov	r2, r6
 80070d8:	463b      	mov	r3, r7
 80070da:	f7f9 f847 	bl	800016c <__adddf3>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4620      	mov	r0, r4
 80070e4:	4629      	mov	r1, r5
 80070e6:	f7f9 f83f 	bl	8000168 <__aeabi_dsub>
 80070ea:	4642      	mov	r2, r8
 80070ec:	464b      	mov	r3, r9
 80070ee:	f7f9 f83b 	bl	8000168 <__aeabi_dsub>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	2000      	movs	r0, #0
 80070f8:	4939      	ldr	r1, [pc, #228]	; (80071e0 <__ieee754_pow+0xa08>)
 80070fa:	f7f9 f835 	bl	8000168 <__aeabi_dsub>
 80070fe:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007102:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007106:	da2b      	bge.n	8007160 <__ieee754_pow+0x988>
 8007108:	4652      	mov	r2, sl
 800710a:	f000 f9b9 	bl	8007480 <scalbn>
 800710e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007112:	f7ff bbf6 	b.w	8006902 <__ieee754_pow+0x12a>
 8007116:	4b33      	ldr	r3, [pc, #204]	; (80071e4 <__ieee754_pow+0xa0c>)
 8007118:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800711c:	429f      	cmp	r7, r3
 800711e:	f77f af13 	ble.w	8006f48 <__ieee754_pow+0x770>
 8007122:	4b31      	ldr	r3, [pc, #196]	; (80071e8 <__ieee754_pow+0xa10>)
 8007124:	440b      	add	r3, r1
 8007126:	4303      	orrs	r3, r0
 8007128:	d00b      	beq.n	8007142 <__ieee754_pow+0x96a>
 800712a:	a329      	add	r3, pc, #164	; (adr r3, 80071d0 <__ieee754_pow+0x9f8>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007134:	f7f9 f9d0 	bl	80004d8 <__aeabi_dmul>
 8007138:	a325      	add	r3, pc, #148	; (adr r3, 80071d0 <__ieee754_pow+0x9f8>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7ff bbe0 	b.w	8006902 <__ieee754_pow+0x12a>
 8007142:	4622      	mov	r2, r4
 8007144:	462b      	mov	r3, r5
 8007146:	f7f9 f80f 	bl	8000168 <__aeabi_dsub>
 800714a:	4642      	mov	r2, r8
 800714c:	464b      	mov	r3, r9
 800714e:	f7f9 fc49 	bl	80009e4 <__aeabi_dcmpge>
 8007152:	2800      	cmp	r0, #0
 8007154:	f43f aef8 	beq.w	8006f48 <__ieee754_pow+0x770>
 8007158:	e7e7      	b.n	800712a <__ieee754_pow+0x952>
 800715a:	f04f 0a00 	mov.w	sl, #0
 800715e:	e71e      	b.n	8006f9e <__ieee754_pow+0x7c6>
 8007160:	4621      	mov	r1, r4
 8007162:	e7d4      	b.n	800710e <__ieee754_pow+0x936>
 8007164:	f04f 0b00 	mov.w	fp, #0
 8007168:	f8df c074 	ldr.w	ip, [pc, #116]	; 80071e0 <__ieee754_pow+0xa08>
 800716c:	f7ff bb95 	b.w	800689a <__ieee754_pow+0xc2>
 8007170:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007174:	f7ff bb91 	b.w	800689a <__ieee754_pow+0xc2>
 8007178:	4638      	mov	r0, r7
 800717a:	4641      	mov	r1, r8
 800717c:	f7ff bbc3 	b.w	8006906 <__ieee754_pow+0x12e>
 8007180:	9200      	str	r2, [sp, #0]
 8007182:	f7ff bb9f 	b.w	80068c4 <__ieee754_pow+0xec>
 8007186:	bf00      	nop
 8007188:	652b82fe 	.word	0x652b82fe
 800718c:	3c971547 	.word	0x3c971547
 8007190:	00000000 	.word	0x00000000
 8007194:	3fe62e43 	.word	0x3fe62e43
 8007198:	fefa39ef 	.word	0xfefa39ef
 800719c:	3fe62e42 	.word	0x3fe62e42
 80071a0:	0ca86c39 	.word	0x0ca86c39
 80071a4:	be205c61 	.word	0xbe205c61
 80071a8:	72bea4d0 	.word	0x72bea4d0
 80071ac:	3e663769 	.word	0x3e663769
 80071b0:	c5d26bf1 	.word	0xc5d26bf1
 80071b4:	3ebbbd41 	.word	0x3ebbbd41
 80071b8:	af25de2c 	.word	0xaf25de2c
 80071bc:	3f11566a 	.word	0x3f11566a
 80071c0:	16bebd93 	.word	0x16bebd93
 80071c4:	3f66c16c 	.word	0x3f66c16c
 80071c8:	5555553e 	.word	0x5555553e
 80071cc:	3fc55555 	.word	0x3fc55555
 80071d0:	c2f8f359 	.word	0xc2f8f359
 80071d4:	01a56e1f 	.word	0x01a56e1f
 80071d8:	3fe00000 	.word	0x3fe00000
 80071dc:	000fffff 	.word	0x000fffff
 80071e0:	3ff00000 	.word	0x3ff00000
 80071e4:	4090cbff 	.word	0x4090cbff
 80071e8:	3f6f3400 	.word	0x3f6f3400

080071ec <__ieee754_sqrt>:
 80071ec:	4b54      	ldr	r3, [pc, #336]	; (8007340 <__ieee754_sqrt+0x154>)
 80071ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f2:	438b      	bics	r3, r1
 80071f4:	4606      	mov	r6, r0
 80071f6:	460d      	mov	r5, r1
 80071f8:	460a      	mov	r2, r1
 80071fa:	460c      	mov	r4, r1
 80071fc:	d10f      	bne.n	800721e <__ieee754_sqrt+0x32>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	f7f9 f969 	bl	80004d8 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4630      	mov	r0, r6
 800720c:	4629      	mov	r1, r5
 800720e:	f7f8 ffad 	bl	800016c <__adddf3>
 8007212:	4606      	mov	r6, r0
 8007214:	460d      	mov	r5, r1
 8007216:	4630      	mov	r0, r6
 8007218:	4629      	mov	r1, r5
 800721a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800721e:	2900      	cmp	r1, #0
 8007220:	4607      	mov	r7, r0
 8007222:	4603      	mov	r3, r0
 8007224:	dc0e      	bgt.n	8007244 <__ieee754_sqrt+0x58>
 8007226:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800722a:	ea5c 0707 	orrs.w	r7, ip, r7
 800722e:	d0f2      	beq.n	8007216 <__ieee754_sqrt+0x2a>
 8007230:	b141      	cbz	r1, 8007244 <__ieee754_sqrt+0x58>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	f7f8 ff97 	bl	8000168 <__aeabi_dsub>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	f7f9 fa75 	bl	800072c <__aeabi_ddiv>
 8007242:	e7e6      	b.n	8007212 <__ieee754_sqrt+0x26>
 8007244:	1512      	asrs	r2, r2, #20
 8007246:	d074      	beq.n	8007332 <__ieee754_sqrt+0x146>
 8007248:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800724c:	07d5      	lsls	r5, r2, #31
 800724e:	f04f 0500 	mov.w	r5, #0
 8007252:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007256:	bf48      	it	mi
 8007258:	0fd9      	lsrmi	r1, r3, #31
 800725a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800725e:	bf44      	itt	mi
 8007260:	005b      	lslmi	r3, r3, #1
 8007262:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8007266:	1051      	asrs	r1, r2, #1
 8007268:	0fda      	lsrs	r2, r3, #31
 800726a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800726e:	4628      	mov	r0, r5
 8007270:	2216      	movs	r2, #22
 8007272:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	1987      	adds	r7, r0, r6
 800727a:	42a7      	cmp	r7, r4
 800727c:	bfde      	ittt	le
 800727e:	19b8      	addle	r0, r7, r6
 8007280:	1be4      	suble	r4, r4, r7
 8007282:	19ad      	addle	r5, r5, r6
 8007284:	0fdf      	lsrs	r7, r3, #31
 8007286:	3a01      	subs	r2, #1
 8007288:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800728c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007290:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007294:	d1f0      	bne.n	8007278 <__ieee754_sqrt+0x8c>
 8007296:	f04f 0c20 	mov.w	ip, #32
 800729a:	4696      	mov	lr, r2
 800729c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80072a0:	4284      	cmp	r4, r0
 80072a2:	eb06 070e 	add.w	r7, r6, lr
 80072a6:	dc02      	bgt.n	80072ae <__ieee754_sqrt+0xc2>
 80072a8:	d112      	bne.n	80072d0 <__ieee754_sqrt+0xe4>
 80072aa:	429f      	cmp	r7, r3
 80072ac:	d810      	bhi.n	80072d0 <__ieee754_sqrt+0xe4>
 80072ae:	2f00      	cmp	r7, #0
 80072b0:	eb07 0e06 	add.w	lr, r7, r6
 80072b4:	da42      	bge.n	800733c <__ieee754_sqrt+0x150>
 80072b6:	f1be 0f00 	cmp.w	lr, #0
 80072ba:	db3f      	blt.n	800733c <__ieee754_sqrt+0x150>
 80072bc:	f100 0801 	add.w	r8, r0, #1
 80072c0:	1a24      	subs	r4, r4, r0
 80072c2:	4640      	mov	r0, r8
 80072c4:	429f      	cmp	r7, r3
 80072c6:	bf88      	it	hi
 80072c8:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 80072cc:	1bdb      	subs	r3, r3, r7
 80072ce:	4432      	add	r2, r6
 80072d0:	0064      	lsls	r4, r4, #1
 80072d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80072d6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80072da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80072de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072e2:	d1dd      	bne.n	80072a0 <__ieee754_sqrt+0xb4>
 80072e4:	4323      	orrs	r3, r4
 80072e6:	d006      	beq.n	80072f6 <__ieee754_sqrt+0x10a>
 80072e8:	1c54      	adds	r4, r2, #1
 80072ea:	bf0b      	itete	eq
 80072ec:	4662      	moveq	r2, ip
 80072ee:	3201      	addne	r2, #1
 80072f0:	3501      	addeq	r5, #1
 80072f2:	f022 0201 	bicne.w	r2, r2, #1
 80072f6:	106b      	asrs	r3, r5, #1
 80072f8:	0852      	lsrs	r2, r2, #1
 80072fa:	07e8      	lsls	r0, r5, #31
 80072fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007300:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007304:	bf48      	it	mi
 8007306:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800730a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800730e:	4616      	mov	r6, r2
 8007310:	e781      	b.n	8007216 <__ieee754_sqrt+0x2a>
 8007312:	0adc      	lsrs	r4, r3, #11
 8007314:	3915      	subs	r1, #21
 8007316:	055b      	lsls	r3, r3, #21
 8007318:	2c00      	cmp	r4, #0
 800731a:	d0fa      	beq.n	8007312 <__ieee754_sqrt+0x126>
 800731c:	02e6      	lsls	r6, r4, #11
 800731e:	d50a      	bpl.n	8007336 <__ieee754_sqrt+0x14a>
 8007320:	f1c2 0020 	rsb	r0, r2, #32
 8007324:	fa23 f000 	lsr.w	r0, r3, r0
 8007328:	1e55      	subs	r5, r2, #1
 800732a:	4093      	lsls	r3, r2
 800732c:	4304      	orrs	r4, r0
 800732e:	1b4a      	subs	r2, r1, r5
 8007330:	e78a      	b.n	8007248 <__ieee754_sqrt+0x5c>
 8007332:	4611      	mov	r1, r2
 8007334:	e7f0      	b.n	8007318 <__ieee754_sqrt+0x12c>
 8007336:	0064      	lsls	r4, r4, #1
 8007338:	3201      	adds	r2, #1
 800733a:	e7ef      	b.n	800731c <__ieee754_sqrt+0x130>
 800733c:	4680      	mov	r8, r0
 800733e:	e7bf      	b.n	80072c0 <__ieee754_sqrt+0xd4>
 8007340:	7ff00000 	.word	0x7ff00000

08007344 <fabs>:
 8007344:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007348:	4619      	mov	r1, r3
 800734a:	4770      	bx	lr

0800734c <finite>:
 800734c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007350:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8007354:	0fc0      	lsrs	r0, r0, #31
 8007356:	4770      	bx	lr

08007358 <matherr>:
 8007358:	2000      	movs	r0, #0
 800735a:	4770      	bx	lr

0800735c <nan>:
 800735c:	2000      	movs	r0, #0
 800735e:	4901      	ldr	r1, [pc, #4]	; (8007364 <nan+0x8>)
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	7ff80000 	.word	0x7ff80000

08007368 <rint>:
 8007368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800736a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800736e:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8007372:	f1bc 0f13 	cmp.w	ip, #19
 8007376:	4604      	mov	r4, r0
 8007378:	460d      	mov	r5, r1
 800737a:	460b      	mov	r3, r1
 800737c:	4606      	mov	r6, r0
 800737e:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8007382:	dc5a      	bgt.n	800743a <rint+0xd2>
 8007384:	f1bc 0f00 	cmp.w	ip, #0
 8007388:	da2b      	bge.n	80073e2 <rint+0x7a>
 800738a:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800738e:	4302      	orrs	r2, r0
 8007390:	d023      	beq.n	80073da <rint+0x72>
 8007392:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007396:	4302      	orrs	r2, r0
 8007398:	4256      	negs	r6, r2
 800739a:	4316      	orrs	r6, r2
 800739c:	0c4b      	lsrs	r3, r1, #17
 800739e:	0b36      	lsrs	r6, r6, #12
 80073a0:	4934      	ldr	r1, [pc, #208]	; (8007474 <rint+0x10c>)
 80073a2:	045b      	lsls	r3, r3, #17
 80073a4:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 80073a8:	ea46 0503 	orr.w	r5, r6, r3
 80073ac:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80073b0:	4602      	mov	r2, r0
 80073b2:	462b      	mov	r3, r5
 80073b4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80073b8:	4620      	mov	r0, r4
 80073ba:	4629      	mov	r1, r5
 80073bc:	f7f8 fed6 	bl	800016c <__adddf3>
 80073c0:	e9cd 0100 	strd	r0, r1, [sp]
 80073c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c8:	462b      	mov	r3, r5
 80073ca:	4622      	mov	r2, r4
 80073cc:	f7f8 fecc 	bl	8000168 <__aeabi_dsub>
 80073d0:	4604      	mov	r4, r0
 80073d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073d6:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 80073da:	4620      	mov	r0, r4
 80073dc:	4629      	mov	r1, r5
 80073de:	b003      	add	sp, #12
 80073e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e2:	4a25      	ldr	r2, [pc, #148]	; (8007478 <rint+0x110>)
 80073e4:	fa42 f20c 	asr.w	r2, r2, ip
 80073e8:	4011      	ands	r1, r2
 80073ea:	4301      	orrs	r1, r0
 80073ec:	d0f5      	beq.n	80073da <rint+0x72>
 80073ee:	0852      	lsrs	r2, r2, #1
 80073f0:	ea05 0102 	and.w	r1, r5, r2
 80073f4:	ea50 0601 	orrs.w	r6, r0, r1
 80073f8:	d00c      	beq.n	8007414 <rint+0xac>
 80073fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073fe:	f1bc 0f13 	cmp.w	ip, #19
 8007402:	bf0c      	ite	eq
 8007404:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8007408:	2600      	movne	r6, #0
 800740a:	ea25 0202 	bic.w	r2, r5, r2
 800740e:	fa43 f30c 	asr.w	r3, r3, ip
 8007412:	4313      	orrs	r3, r2
 8007414:	4917      	ldr	r1, [pc, #92]	; (8007474 <rint+0x10c>)
 8007416:	4632      	mov	r2, r6
 8007418:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800741c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007420:	4620      	mov	r0, r4
 8007422:	4629      	mov	r1, r5
 8007424:	f7f8 fea2 	bl	800016c <__adddf3>
 8007428:	e9cd 0100 	strd	r0, r1, [sp]
 800742c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007430:	4622      	mov	r2, r4
 8007432:	462b      	mov	r3, r5
 8007434:	f7f8 fe98 	bl	8000168 <__aeabi_dsub>
 8007438:	e008      	b.n	800744c <rint+0xe4>
 800743a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800743e:	dd08      	ble.n	8007452 <rint+0xea>
 8007440:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8007444:	d1c9      	bne.n	80073da <rint+0x72>
 8007446:	4602      	mov	r2, r0
 8007448:	f7f8 fe90 	bl	800016c <__adddf3>
 800744c:	4604      	mov	r4, r0
 800744e:	460d      	mov	r5, r1
 8007450:	e7c3      	b.n	80073da <rint+0x72>
 8007452:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8007456:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800745a:	40ca      	lsrs	r2, r1
 800745c:	4210      	tst	r0, r2
 800745e:	d0bc      	beq.n	80073da <rint+0x72>
 8007460:	0852      	lsrs	r2, r2, #1
 8007462:	4210      	tst	r0, r2
 8007464:	bf1f      	itttt	ne
 8007466:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800746a:	ea20 0202 	bicne.w	r2, r0, r2
 800746e:	410e      	asrne	r6, r1
 8007470:	4316      	orrne	r6, r2
 8007472:	e7cf      	b.n	8007414 <rint+0xac>
 8007474:	080078c0 	.word	0x080078c0
 8007478:	000fffff 	.word	0x000fffff
 800747c:	00000000 	.word	0x00000000

08007480 <scalbn>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	4616      	mov	r6, r2
 8007484:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	460b      	mov	r3, r1
 800748e:	b982      	cbnz	r2, 80074b2 <scalbn+0x32>
 8007490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007494:	4303      	orrs	r3, r0
 8007496:	d034      	beq.n	8007502 <scalbn+0x82>
 8007498:	4b2d      	ldr	r3, [pc, #180]	; (8007550 <scalbn+0xd0>)
 800749a:	2200      	movs	r2, #0
 800749c:	f7f9 f81c 	bl	80004d8 <__aeabi_dmul>
 80074a0:	4b2c      	ldr	r3, [pc, #176]	; (8007554 <scalbn+0xd4>)
 80074a2:	4604      	mov	r4, r0
 80074a4:	429e      	cmp	r6, r3
 80074a6:	460d      	mov	r5, r1
 80074a8:	da0d      	bge.n	80074c6 <scalbn+0x46>
 80074aa:	a325      	add	r3, pc, #148	; (adr r3, 8007540 <scalbn+0xc0>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	e01c      	b.n	80074ec <scalbn+0x6c>
 80074b2:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80074b6:	42ba      	cmp	r2, r7
 80074b8:	d109      	bne.n	80074ce <scalbn+0x4e>
 80074ba:	4602      	mov	r2, r0
 80074bc:	f7f8 fe56 	bl	800016c <__adddf3>
 80074c0:	4604      	mov	r4, r0
 80074c2:	460d      	mov	r5, r1
 80074c4:	e01d      	b.n	8007502 <scalbn+0x82>
 80074c6:	460b      	mov	r3, r1
 80074c8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80074cc:	3a36      	subs	r2, #54	; 0x36
 80074ce:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80074d2:	4432      	add	r2, r6
 80074d4:	428a      	cmp	r2, r1
 80074d6:	dd0c      	ble.n	80074f2 <scalbn+0x72>
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	a11a      	add	r1, pc, #104	; (adr r1, 8007548 <scalbn+0xc8>)
 80074de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e2:	f000 f83b 	bl	800755c <copysign>
 80074e6:	a318      	add	r3, pc, #96	; (adr r3, 8007548 <scalbn+0xc8>)
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f7f8 fff4 	bl	80004d8 <__aeabi_dmul>
 80074f0:	e7e6      	b.n	80074c0 <scalbn+0x40>
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	dd08      	ble.n	8007508 <scalbn+0x88>
 80074f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074fe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007502:	4620      	mov	r0, r4
 8007504:	4629      	mov	r1, r5
 8007506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007508:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800750c:	da0b      	bge.n	8007526 <scalbn+0xa6>
 800750e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007512:	429e      	cmp	r6, r3
 8007514:	4622      	mov	r2, r4
 8007516:	462b      	mov	r3, r5
 8007518:	dce0      	bgt.n	80074dc <scalbn+0x5c>
 800751a:	a109      	add	r1, pc, #36	; (adr r1, 8007540 <scalbn+0xc0>)
 800751c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007520:	f000 f81c 	bl	800755c <copysign>
 8007524:	e7c1      	b.n	80074aa <scalbn+0x2a>
 8007526:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800752a:	3236      	adds	r2, #54	; 0x36
 800752c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007530:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007534:	4620      	mov	r0, r4
 8007536:	4629      	mov	r1, r5
 8007538:	2200      	movs	r2, #0
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <scalbn+0xd8>)
 800753c:	e7d6      	b.n	80074ec <scalbn+0x6c>
 800753e:	bf00      	nop
 8007540:	c2f8f359 	.word	0xc2f8f359
 8007544:	01a56e1f 	.word	0x01a56e1f
 8007548:	8800759c 	.word	0x8800759c
 800754c:	7e37e43c 	.word	0x7e37e43c
 8007550:	43500000 	.word	0x43500000
 8007554:	ffff3cb0 	.word	0xffff3cb0
 8007558:	3c900000 	.word	0x3c900000

0800755c <copysign>:
 800755c:	b530      	push	{r4, r5, lr}
 800755e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007566:	ea42 0503 	orr.w	r5, r2, r3
 800756a:	4629      	mov	r1, r5
 800756c:	bd30      	pop	{r4, r5, pc}
	...

08007570 <_init>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	bf00      	nop
 8007574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007576:	bc08      	pop	{r3}
 8007578:	469e      	mov	lr, r3
 800757a:	4770      	bx	lr

0800757c <_fini>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	bf00      	nop
 8007580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007582:	bc08      	pop	{r3}
 8007584:	469e      	mov	lr, r3
 8007586:	4770      	bx	lr
